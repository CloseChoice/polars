Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_dummies", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.time_range", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_match", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_match", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.time_range.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_match.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_match.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_dummies", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.time_range", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.bottom_k", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.count_match", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.any", "polars.apply", "polars.approx_unique", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.time", "polars.var", "polars.when", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.count_match", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 92, 120, 136, 137, 238, 256, 270, 596, 678, 703, 989], "refer": [0, 31, 104, 105, 108, 142, 256, 366, 369, 424, 453, 493, 512, 513, 514, 516, 596, 806, 809, 883, 947, 948, 949, 951, 989], "input": [0, 65, 94, 104, 105, 108, 137, 138, 149, 160, 188, 202, 209, 223, 233, 236, 256, 263, 270, 380, 399, 418, 433, 446, 483, 538, 539, 540, 541, 544, 546, 547, 548, 549, 555, 560, 561, 569, 570, 573, 584, 585, 596, 607, 610, 620, 627, 653, 661, 666, 672, 676, 694, 703, 837, 861, 862, 864, 989], "output": [0, 26, 28, 31, 32, 33, 34, 75, 108, 132, 137, 161, 162, 173, 183, 190, 199, 202, 229, 233, 256, 265, 270, 422, 423, 432, 535, 541, 550, 569, 582, 596, 607, 628, 629, 638, 642, 643, 653, 672, 675, 678, 694, 703, 978, 989], "seri": [0, 1, 23, 66, 67, 68, 69, 70, 73, 74, 75, 91, 93, 96, 98, 102, 123, 127, 132, 133, 137, 145, 153, 155, 157, 158, 163, 166, 167, 169, 171, 179, 180, 184, 195, 196, 211, 215, 218, 221, 222, 237, 256, 269, 270, 272, 273, 274, 275, 276, 277, 280, 281, 283, 284, 285, 290, 293, 294, 301, 302, 305, 306, 307, 310, 318, 319, 323, 324, 336, 338, 342, 345, 349, 351, 353, 358, 362, 363, 365, 370, 373, 382, 383, 389, 397, 399, 401, 402, 403, 404, 405, 407, 408, 409, 420, 422, 449, 453, 454, 455, 456, 457, 459, 471, 472, 475, 478, 479, 486, 501, 506, 512, 513, 514, 516, 519, 525, 526, 527, 528, 534, 539, 540, 541, 542, 543, 545, 551, 553, 554, 555, 561, 562, 564, 566, 568, 569, 570, 571, 572, 573, 574, 577, 578, 581, 583, 584, 585, 586, 588, 596, 607, 624, 677, 694, 983, 985, 988, 990, 993, 994, 995, 997], "datafram": [0, 1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 70, 72, 73, 74, 76, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 115, 117, 118, 119, 122, 124, 125, 132, 254, 255, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 303, 304, 307, 308, 309, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 566, 569, 570, 571, 572, 573, 574, 575, 577, 581, 582, 583, 584, 585, 586, 588, 589, 596, 607, 614, 616, 620, 621, 625, 628, 633, 634, 635, 636, 638, 642, 643, 647, 651, 658, 659, 660, 661, 667, 668, 669, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 702, 703, 722, 750, 765, 766, 802, 833, 881, 931, 943, 944, 958, 967, 968, 978, 989, 996, 997], "lazyfram": [0, 1, 50, 51, 53, 55, 65, 66, 67, 68, 69, 72, 73, 115, 116, 117, 118, 119, 120, 122, 127, 132, 177, 189, 256, 307, 386, 596, 607, 693, 996, 997], "express": [0, 70, 72, 75, 102, 124, 127, 129, 132, 133, 137, 138, 149, 151, 153, 160, 186, 190, 198, 202, 209, 223, 233, 236, 238, 256, 263, 265, 266, 267, 269, 270, 281, 287, 289, 307, 316, 320, 321, 322, 325, 331, 333, 337, 355, 356, 359, 366, 376, 380, 383, 386, 390, 392, 393, 397, 399, 403, 406, 411, 414, 415, 420, 421, 422, 423, 424, 428, 429, 430, 431, 432, 433, 437, 439, 443, 445, 446, 448, 449, 450, 451, 456, 470, 471, 472, 474, 476, 481, 483, 487, 488, 493, 494, 495, 496, 502, 503, 521, 522, 525, 531, 532, 534, 537, 538, 539, 540, 543, 544, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 568, 569, 570, 573, 575, 577, 578, 579, 580, 581, 582, 584, 585, 587, 589, 595, 607, 610, 614, 619, 620, 621, 624, 627, 647, 653, 656, 657, 658, 659, 661, 666, 672, 673, 676, 678, 694, 703, 720, 722, 754, 755, 756, 764, 773, 795, 796, 799, 823, 837, 901, 908, 922, 923, 928, 929, 930, 931, 937, 938, 989], "extend": [0, 94, 256, 383, 596, 607, 702, 823, 989], "function": [0, 31, 65, 66, 67, 68, 69, 74, 92, 98, 104, 105, 108, 115, 125, 137, 142, 148, 155, 182, 189, 190, 220, 224, 227, 228, 238, 256, 266, 270, 307, 331, 363, 377, 378, 379, 422, 423, 446, 448, 459, 460, 461, 462, 463, 464, 466, 467, 468, 480, 529, 539, 540, 541, 553, 554, 555, 561, 562, 564, 569, 570, 573, 577, 585, 596, 607, 638, 642, 646, 669, 678, 694, 703, 740, 764, 803, 817, 818, 819, 820, 833, 881, 889, 903, 904, 910, 915, 972, 989, 997], "data": [0, 1, 6, 16, 19, 29, 30, 31, 32, 36, 50, 56, 65, 66, 68, 73, 76, 81, 82, 86, 88, 91, 92, 93, 94, 95, 96, 97, 102, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 122, 123, 125, 126, 127, 129, 133, 136, 137, 139, 140, 150, 159, 160, 161, 173, 174, 175, 177, 188, 189, 193, 198, 199, 207, 214, 219, 220, 233, 235, 254, 256, 267, 270, 308, 317, 336, 364, 373, 376, 392, 393, 398, 405, 407, 414, 421, 443, 445, 453, 469, 470, 480, 493, 494, 512, 513, 514, 516, 529, 531, 532, 538, 547, 568, 578, 582, 596, 607, 612, 613, 621, 627, 628, 646, 658, 659, 672, 694, 702, 703, 741, 748, 753, 757, 770, 772, 813, 833, 883, 899, 900, 910, 915, 947, 948, 949, 951, 970, 971, 972, 973, 975, 980, 988, 989, 996], "type": [0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 75, 81, 91, 93, 94, 95, 96, 97, 102, 104, 105, 107, 108, 115, 116, 121, 122, 123, 126, 127, 132, 133, 137, 155, 159, 161, 162, 163, 174, 214, 220, 222, 225, 256, 270, 294, 307, 317, 318, 320, 321, 322, 338, 342, 345, 349, 351, 353, 358, 362, 365, 380, 394, 401, 403, 404, 424, 456, 507, 508, 509, 512, 529, 541, 547, 556, 557, 558, 560, 561, 568, 578, 587, 596, 607, 614, 619, 621, 628, 629, 647, 657, 658, 659, 667, 694, 727, 740, 748, 750, 754, 755, 756, 774, 778, 781, 788, 790, 793, 798, 802, 805, 831, 910, 942, 943, 944, 947, 970, 971, 973, 981, 989, 996], "config": [0, 65, 202, 233, 256, 558, 607, 653, 672, 694], "except": [0, 164, 176, 178, 212, 256, 560, 607, 634, 694, 832, 859, 960, 971, 980, 989], "test": [0, 108, 607, 630, 637, 694], "util": [0, 98, 564, 607, 621, 694], "sql": [0, 29, 50, 54, 106, 175, 256, 607], "These": [1, 31, 134, 256, 370, 595, 810], "allow": [1, 30, 31, 56, 81, 92, 115, 117, 118, 119, 120, 127, 129, 136, 173, 176, 177, 198, 199, 200, 220, 225, 235, 256, 359, 366, 369, 455, 470, 512, 513, 514, 596, 633, 634, 638, 642, 658, 659, 667, 673, 694, 799, 806, 809, 885, 900, 902, 947, 948, 949, 972, 989, 997], "you": [1, 13, 31, 35, 55, 65, 73, 91, 93, 94, 95, 97, 102, 104, 105, 108, 109, 113, 115, 122, 133, 134, 137, 146, 150, 161, 162, 173, 176, 186, 198, 199, 216, 219, 224, 238, 256, 270, 289, 307, 320, 321, 322, 355, 356, 362, 366, 369, 386, 399, 422, 424, 455, 460, 461, 462, 463, 464, 466, 467, 468, 497, 500, 512, 514, 543, 553, 562, 578, 596, 614, 617, 628, 629, 630, 634, 637, 657, 659, 678, 694, 702, 703, 722, 754, 755, 756, 795, 796, 802, 806, 809, 837, 885, 932, 935, 947, 949, 971, 980, 989, 997], "regist": [1, 50, 52, 53, 54, 55, 66, 67, 68, 69, 128, 130, 996], "custom": [1, 31, 66, 67, 68, 69, 128, 129, 130, 137, 238, 256, 270, 307, 366, 369, 422, 459, 541, 569, 596, 638, 678, 694, 703, 740, 806, 809, 889, 989, 997], "dedic": [1, 92, 173, 199, 256], "namespac": [1, 255, 595, 607, 693], "underli": [1, 77, 84, 91, 93, 94, 95, 97, 113, 124, 127, 129, 150, 173, 174, 199, 214, 256, 311, 336, 337, 341, 344, 346, 347, 348, 350, 352, 354, 357, 360, 361, 362, 364, 371, 372, 373, 374, 455, 469, 487, 489, 596, 694, 702, 743, 772, 773, 777, 780, 782, 783, 787, 789, 792, 794, 797, 800, 801, 802, 804, 811, 812, 813, 814, 885, 899, 910, 922, 924, 966, 971, 989], "polar": [1, 256, 595, 596, 601, 607, 694, 989, 996], "class": [1, 2, 3, 4, 5, 15, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 96, 124, 125, 220, 256, 596, 601, 607, 694, 970, 971, 989, 996], "without": [1, 6, 74, 98, 107, 110, 114, 116, 120, 227, 228, 256, 270, 331, 363, 460, 461, 462, 463, 464, 466, 467, 468, 581, 596, 669, 694, 764, 770, 803, 833, 881, 989], "requir": [1, 30, 31, 35, 65, 96, 122, 123, 142, 198, 220, 256, 308, 377, 378, 379, 475, 512, 513, 514, 532, 578, 596, 659, 694, 741, 818, 819, 820, 909, 947, 948, 949, 971, 972, 975, 989], "subclass": [1, 256], "mixin": 1, "expr": [1, 65, 66, 67, 68, 69, 70, 75, 102, 132, 133, 149, 151, 153, 175, 176, 186, 190, 198, 202, 233, 256, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 596, 597, 598, 601, 602, 603, 604, 620, 622, 624, 633, 634, 648, 653, 656, 672, 694, 720, 722, 764, 773, 824, 908, 922, 926, 945, 961, 989], "ar": [1, 6, 11, 15, 18, 26, 30, 31, 55, 56, 65, 75, 76, 83, 90, 91, 92, 93, 94, 95, 96, 97, 98, 104, 105, 106, 107, 108, 109, 113, 115, 116, 117, 118, 120, 122, 123, 125, 127, 134, 136, 137, 138, 142, 146, 148, 151, 155, 160, 161, 162, 173, 176, 177, 182, 183, 188, 198, 199, 202, 203, 209, 215, 220, 223, 228, 229, 233, 236, 256, 266, 307, 327, 329, 330, 334, 335, 363, 370, 375, 377, 378, 379, 399, 401, 403, 404, 405, 407, 408, 409, 412, 424, 446, 453, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 477, 480, 482, 483, 497, 500, 501, 523, 539, 540, 543, 544, 546, 548, 549, 550, 555, 570, 573, 582, 584, 585, 589, 590, 592, 595, 596, 597, 598, 601, 602, 603, 604, 607, 610, 617, 622, 627, 628, 629, 630, 634, 637, 638, 642, 643, 647, 650, 653, 654, 658, 659, 661, 666, 669, 672, 673, 676, 694, 700, 702, 740, 762, 763, 803, 810, 816, 817, 818, 819, 820, 830, 837, 841, 844, 845, 847, 848, 849, 850, 857, 883, 887, 889, 895, 912, 915, 932, 935, 936, 959, 971, 972, 980, 983, 985, 989, 990, 993, 994, 995, 997], "all": [1, 8, 15, 18, 23, 26, 31, 36, 52, 65, 72, 75, 91, 94, 96, 97, 99, 104, 105, 107, 108, 109, 113, 115, 117, 118, 124, 125, 129, 143, 146, 152, 164, 169, 171, 173, 174, 177, 178, 182, 185, 186, 193, 198, 199, 208, 212, 217, 225, 227, 229, 256, 267, 268, 269, 289, 294, 304, 307, 309, 325, 331, 335, 380, 391, 394, 396, 398, 401, 404, 408, 409, 411, 415, 422, 423, 438, 444, 450, 453, 458, 475, 481, 483, 488, 494, 496, 499, 502, 503, 505, 511, 522, 535, 547, 555, 560, 562, 577, 584, 585, 589, 596, 601, 607, 614, 617, 619, 621, 623, 638, 642, 647, 657, 660, 667, 673, 694, 722, 727, 737, 740, 764, 766, 770, 832, 839, 854, 859, 883, 916, 923, 929, 931, 934, 937, 938, 940, 946, 960, 989, 996, 997], "support": [1, 30, 31, 35, 73, 91, 92, 93, 94, 95, 96, 97, 98, 106, 107, 108, 116, 124, 129, 134, 136, 173, 174, 199, 208, 209, 216, 220, 256, 302, 446, 481, 483, 506, 547, 596, 601, 660, 661, 694, 735, 916, 941, 972, 989, 996], "target": [1, 30, 31, 71, 256, 370, 493, 512, 513, 514, 928, 947, 948, 949], "thi": [1, 6, 8, 12, 13, 26, 28, 30, 31, 33, 35, 39, 50, 51, 55, 56, 65, 72, 73, 74, 76, 91, 93, 94, 95, 96, 97, 98, 101, 104, 105, 106, 107, 108, 109, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 129, 131, 134, 136, 137, 142, 146, 147, 148, 150, 155, 160, 161, 162, 163, 167, 169, 171, 172, 173, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 191, 192, 193, 198, 199, 200, 202, 206, 208, 210, 211, 214, 216, 219, 220, 224, 225, 227, 228, 229, 230, 231, 233, 234, 238, 239, 255, 256, 266, 269, 270, 271, 280, 289, 290, 294, 303, 307, 308, 315, 316, 318, 325, 331, 336, 347, 355, 356, 359, 362, 363, 366, 369, 373, 382, 397, 398, 399, 403, 415, 419, 420, 422, 428, 429, 430, 431, 432, 433, 441, 442, 446, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 466, 467, 468, 470, 472, 474, 475, 476, 481, 482, 483, 493, 498, 499, 504, 505, 511, 512, 514, 518, 530, 532, 533, 534, 535, 539, 540, 542, 543, 548, 551, 553, 555, 561, 562, 564, 570, 573, 581, 585, 596, 607, 608, 611, 614, 617, 619, 621, 627, 628, 629, 631, 634, 638, 642, 643, 647, 650, 653, 656, 657, 658, 659, 660, 667, 669, 672, 673, 674, 675, 678, 679, 693, 694, 702, 703, 712, 722, 723, 727, 736, 741, 747, 750, 764, 770, 772, 773, 783, 795, 796, 799, 802, 803, 806, 809, 813, 817, 822, 829, 830, 833, 838, 843, 844, 846, 851, 853, 855, 856, 858, 863, 865, 866, 867, 868, 870, 871, 873, 874, 876, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 893, 896, 897, 898, 900, 903, 904, 905, 908, 909, 910, 911, 916, 917, 919, 928, 933, 934, 939, 940, 946, 947, 949, 953, 954, 958, 959, 966, 968, 970, 971, 972, 974, 975, 977, 979, 980, 989, 996, 997], "featur": [1, 35, 39, 56, 71, 256], "i": [1, 6, 12, 13, 15, 28, 30, 31, 32, 33, 34, 39, 50, 55, 56, 65, 70, 71, 72, 73, 74, 75, 78, 80, 81, 83, 87, 89, 91, 92, 93, 94, 95, 96, 97, 101, 104, 105, 106, 107, 109, 113, 115, 116, 117, 118, 119, 120, 124, 125, 126, 127, 129, 131, 132, 136, 137, 146, 148, 156, 159, 160, 161, 162, 163, 164, 167, 168, 170, 172, 173, 174, 176, 177, 178, 180, 182, 183, 186, 188, 189, 190, 198, 199, 200, 208, 209, 210, 211, 212, 214, 220, 224, 225, 227, 228, 229, 230, 238, 239, 255, 256, 263, 266, 268, 269, 270, 271, 281, 289, 292, 302, 306, 307, 316, 325, 331, 337, 346, 359, 363, 366, 370, 377, 378, 379, 382, 394, 397, 399, 412, 419, 422, 424, 428, 431, 433, 446, 453, 455, 457, 460, 461, 462, 463, 464, 466, 467, 468, 470, 471, 472, 476, 477, 480, 481, 482, 483, 485, 487, 488, 493, 494, 496, 498, 499, 501, 502, 504, 505, 506, 509, 511, 512, 513, 514, 516, 518, 535, 536, 539, 540, 542, 543, 547, 548, 550, 551, 553, 554, 555, 562, 568, 570, 573, 575, 578, 579, 580, 581, 582, 583, 585, 588, 589, 596, 614, 617, 619, 621, 627, 628, 629, 632, 634, 636, 638, 642, 643, 647, 657, 658, 659, 660, 661, 662, 667, 669, 670, 675, 678, 679, 694, 701, 702, 703, 722, 725, 735, 739, 740, 764, 773, 782, 799, 803, 806, 810, 817, 818, 819, 820, 822, 830, 831, 832, 833, 836, 838, 840, 846, 851, 852, 853, 855, 856, 857, 859, 881, 883, 885, 887, 900, 901, 902, 903, 904, 905, 911, 912, 915, 916, 919, 922, 923, 928, 929, 931, 933, 934, 936, 937, 939, 940, 941, 944, 946, 947, 948, 949, 951, 953, 960, 966, 971, 972, 978, 979, 980, 989, 996, 997], "primarili": 1, "intend": 1, "us": [1, 10, 12, 13, 18, 23, 24, 28, 29, 31, 35, 50, 51, 52, 53, 55, 56, 65, 73, 74, 75, 92, 94, 95, 97, 99, 100, 102, 104, 105, 106, 107, 108, 109, 113, 115, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 129, 131, 132, 133, 137, 144, 146, 151, 152, 155, 160, 161, 162, 169, 171, 173, 174, 176, 180, 182, 185, 186, 189, 190, 198, 200, 202, 209, 210, 211, 217, 218, 220, 224, 225, 227, 228, 229, 230, 233, 236, 238, 256, 264, 270, 271, 281, 289, 307, 311, 312, 316, 318, 331, 334, 335, 362, 366, 369, 373, 375, 377, 378, 379, 385, 386, 398, 399, 412, 422, 424, 427, 446, 453, 455, 457, 460, 461, 462, 463, 464, 466, 467, 468, 470, 472, 475, 476, 480, 482, 483, 485, 487, 489, 490, 491, 493, 494, 497, 498, 502, 504, 506, 508, 510, 512, 513, 514, 516, 536, 539, 540, 541, 542, 543, 547, 549, 550, 553, 555, 562, 564, 568, 570, 573, 575, 578, 579, 580, 581, 582, 583, 584, 585, 588, 595, 596, 607, 614, 616, 617, 622, 623, 627, 628, 629, 630, 634, 636, 637, 642, 653, 659, 661, 662, 667, 669, 670, 672, 676, 678, 694, 703, 722, 740, 743, 744, 750, 764, 802, 806, 809, 813, 816, 818, 819, 820, 824, 825, 830, 833, 837, 857, 864, 883, 885, 887, 900, 903, 904, 905, 909, 911, 915, 919, 922, 924, 925, 928, 929, 932, 933, 937, 939, 941, 943, 947, 948, 949, 951, 961, 967, 969, 970, 971, 972, 979, 980, 989, 996, 997], "librari": [1, 77, 84, 422, 596, 997], "author": 1, "domain": [1, 494, 929], "specif": [1, 26, 30, 31, 91, 93, 95, 97, 104, 106, 107, 116, 126, 127, 173, 256, 366, 369, 459, 512, 513, 514, 516, 596, 694, 806, 809, 889, 947, 948, 949, 951, 989, 997], "capabl": [1, 31, 256], "which": [1, 18, 27, 28, 31, 32, 33, 34, 35, 65, 66, 67, 68, 69, 94, 104, 105, 106, 107, 108, 115, 116, 122, 128, 130, 138, 146, 150, 161, 162, 219, 223, 225, 256, 266, 307, 366, 383, 399, 401, 404, 405, 407, 408, 409, 433, 460, 461, 462, 463, 464, 466, 467, 468, 501, 589, 596, 610, 617, 619, 628, 629, 658, 659, 666, 667, 675, 694, 702, 740, 806, 823, 837, 841, 845, 847, 848, 849, 850, 903, 936, 989, 997], "mai": [1, 30, 39, 73, 74, 91, 93, 94, 95, 97, 104, 107, 109, 116, 117, 120, 137, 148, 150, 176, 205, 206, 220, 227, 228, 256, 270, 301, 306, 307, 331, 336, 347, 363, 432, 460, 461, 462, 463, 464, 466, 467, 468, 473, 474, 512, 514, 553, 554, 562, 577, 596, 634, 638, 655, 656, 659, 669, 674, 678, 694, 702, 703, 734, 739, 764, 772, 783, 803, 817, 833, 881, 907, 908, 947, 949, 989, 997], "exist": [1, 29, 30, 31, 65, 107, 116, 127, 233, 256, 337, 370, 672, 694, 773], "belong": [1, 161, 256, 628, 694], "core": [1, 220, 256, 997], "cannot": [1, 92, 104, 105, 108, 109, 122, 131, 137, 200, 238, 256, 311, 424, 470, 489, 508, 520, 596, 657, 678, 694, 703, 743, 900, 924, 943, 989], "overrid": [1, 31, 91, 93, 94, 95, 96, 97, 104, 124, 125, 129, 131, 256, 424, 596, 694, 864, 989], "str": [1, 7, 9, 12, 14, 15, 18, 19, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 71, 74, 75, 76, 91, 93, 94, 95, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 124, 125, 127, 128, 129, 130, 132, 133, 138, 141, 143, 144, 145, 146, 147, 148, 149, 153, 154, 155, 157, 159, 160, 161, 162, 164, 166, 169, 171, 172, 173, 175, 176, 179, 180, 181, 182, 183, 184, 186, 188, 190, 192, 194, 195, 196, 197, 198, 199, 200, 203, 205, 206, 208, 209, 210, 211, 212, 215, 216, 217, 218, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 263, 264, 265, 270, 285, 286, 287, 292, 293, 294, 302, 305, 307, 333, 338, 359, 362, 363, 366, 369, 370, 380, 384, 386, 388, 397, 399, 406, 423, 424, 432, 434, 446, 448, 450, 456, 458, 460, 461, 462, 463, 464, 466, 467, 468, 474, 475, 482, 483, 519, 520, 522, 525, 537, 538, 539, 541, 542, 545, 547, 549, 550, 551, 552, 553, 554, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 569, 571, 572, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 586, 587, 588, 596, 602, 610, 614, 615, 616, 617, 619, 620, 621, 624, 626, 627, 628, 629, 631, 633, 634, 642, 643, 647, 649, 650, 651, 654, 656, 657, 658, 659, 660, 661, 666, 667, 668, 669, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 699, 719, 720, 727, 740, 748, 765, 766, 774, 799, 802, 803, 806, 809, 810, 825, 864, 873, 874, 881, 886, 903, 904, 954, 956, 967, 968, 969, 989, 993, 996, 997], "dt": [1, 65, 75, 162, 256, 558, 604, 629, 694, 995], "attempt": [1, 219, 256], "do": [1, 31, 65, 72, 73, 102, 115, 133, 150, 176, 214, 224, 227, 256, 289, 331, 499, 505, 511, 578, 596, 614, 619, 634, 638, 647, 657, 658, 659, 694, 702, 722, 764, 934, 940, 946, 971, 980, 989], "so": [1, 56, 106, 115, 131, 159, 161, 162, 190, 256, 281, 292, 307, 316, 399, 499, 505, 511, 596, 628, 629, 694, 725, 934, 940, 946], "rais": [1, 14, 18, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 122, 123, 198, 256, 306, 311, 362, 432, 487, 489, 501, 512, 513, 514, 516, 568, 739, 743, 802, 922, 924, 936, 947, 948, 949, 951, 971, 980, 989], "an": [1, 6, 26, 29, 30, 31, 39, 66, 68, 69, 70, 72, 75, 77, 81, 82, 84, 91, 102, 104, 105, 106, 107, 108, 110, 113, 115, 117, 125, 127, 129, 132, 133, 137, 139, 140, 148, 151, 153, 155, 161, 162, 173, 174, 176, 186, 190, 196, 198, 214, 219, 227, 233, 238, 256, 265, 266, 270, 287, 289, 292, 306, 307, 311, 317, 320, 321, 322, 326, 327, 328, 329, 330, 331, 337, 362, 366, 373, 383, 386, 411, 422, 423, 433, 451, 459, 460, 461, 462, 463, 464, 466, 467, 468, 487, 489, 494, 512, 513, 514, 516, 525, 531, 539, 540, 543, 547, 555, 559, 564, 568, 570, 573, 577, 578, 581, 584, 585, 589, 596, 607, 612, 613, 614, 619, 621, 624, 628, 629, 634, 638, 647, 657, 672, 673, 678, 694, 703, 720, 722, 725, 739, 743, 748, 753, 754, 755, 756, 757, 760, 761, 762, 763, 764, 773, 802, 806, 813, 817, 823, 846, 889, 890, 891, 892, 893, 894, 896, 897, 898, 903, 904, 922, 924, 929, 947, 948, 949, 951, 971, 980, 989, 996], "attributeerror": 1, "howev": [1, 94, 148, 256, 817, 989], "can": [1, 13, 31, 55, 65, 75, 82, 94, 104, 105, 108, 109, 113, 115, 117, 119, 120, 125, 126, 127, 129, 131, 132, 134, 137, 138, 147, 155, 161, 162, 169, 171, 186, 190, 202, 209, 219, 223, 224, 227, 233, 238, 256, 270, 289, 307, 316, 327, 330, 331, 355, 356, 359, 362, 370, 383, 398, 399, 432, 438, 455, 460, 461, 462, 463, 464, 466, 467, 468, 472, 475, 477, 480, 483, 496, 499, 505, 511, 512, 535, 543, 544, 547, 562, 564, 589, 595, 596, 610, 614, 619, 628, 629, 653, 661, 666, 672, 674, 678, 694, 703, 722, 740, 764, 795, 796, 799, 802, 810, 823, 837, 869, 885, 903, 904, 905, 909, 912, 915, 931, 934, 940, 946, 947, 989, 996], "other": [1, 18, 31, 55, 75, 104, 105, 108, 115, 122, 123, 146, 150, 156, 175, 176, 182, 183, 198, 202, 228, 233, 254, 256, 263, 267, 269, 281, 285, 320, 321, 322, 333, 376, 390, 392, 393, 399, 403, 414, 421, 424, 428, 431, 437, 439, 443, 445, 483, 521, 529, 531, 538, 539, 540, 546, 548, 549, 555, 570, 573, 584, 585, 596, 607, 617, 633, 634, 642, 643, 653, 669, 672, 673, 694, 702, 718, 754, 755, 756, 768, 844, 902, 973, 981, 988, 989], "onli": [1, 18, 26, 31, 50, 52, 56, 65, 71, 73, 104, 105, 107, 108, 109, 113, 115, 116, 117, 118, 119, 127, 129, 134, 137, 146, 161, 162, 173, 176, 180, 199, 211, 216, 218, 229, 256, 264, 270, 281, 316, 319, 320, 321, 322, 359, 380, 389, 455, 533, 596, 614, 617, 628, 629, 630, 634, 637, 694, 751, 754, 755, 756, 799, 828, 846, 885, 966, 969, 989, 996, 997], "gener": [1, 99, 106, 124, 125, 126, 127, 129, 132, 142, 190, 200, 217, 224, 256, 470, 476, 578, 596, 694, 900, 911, 967, 989, 997], "userwarn": 1, "pl": [1, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 30, 31, 32, 33, 34, 35, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 115, 116, 120, 121, 122, 123, 124, 125, 126, 127, 129, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 596, 608, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 699, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 721, 722, 723, 726, 727, 729, 734, 735, 736, 738, 740, 747, 748, 750, 751, 752, 753, 754, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 819, 820, 823, 824, 825, 826, 828, 831, 832, 833, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 858, 863, 864, 865, 866, 867, 868, 869, 870, 871, 877, 878, 879, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 911, 912, 913, 914, 916, 917, 918, 919, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 943, 944, 945, 946, 947, 948, 949, 951, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 989, 996, 997], "register_expr_namespac": [1, 66, 68, 69], "greet": 1, "def": [1, 66, 67, 68, 69, 125, 126, 127, 129, 189, 224, 256, 263, 448, 494, 538, 569, 596, 646, 694, 929, 997], "__init__": [1, 2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 124, 996], "self": [1, 51, 52, 53, 55, 66, 67, 68, 69, 72, 137, 138, 139, 140, 142, 143, 144, 146, 149, 150, 151, 152, 153, 160, 161, 162, 164, 166, 167, 168, 175, 176, 178, 179, 180, 181, 182, 183, 184, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 200, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 217, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 256, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 309, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 596, 610, 611, 612, 613, 614, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 694, 702, 703, 748, 757, 826, 834, 863, 864, 875, 878, 879, 884, 903, 904, 905, 917, 977, 981, 989], "_expr": [1, 67], "hello": [1, 18, 51, 54, 499, 505, 511, 539, 727, 934, 940, 946], "return": [1, 26, 28, 31, 32, 33, 34, 50, 54, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 83, 85, 90, 91, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 113, 114, 115, 116, 126, 132, 133, 137, 138, 139, 142, 145, 146, 147, 148, 149, 151, 152, 155, 159, 160, 161, 162, 164, 166, 172, 173, 174, 175, 177, 178, 185, 186, 188, 189, 190, 198, 199, 200, 212, 213, 219, 220, 223, 224, 225, 229, 233, 235, 238, 241, 245, 250, 256, 266, 268, 272, 273, 274, 275, 276, 277, 280, 281, 283, 284, 286, 290, 292, 293, 294, 305, 306, 310, 312, 315, 323, 324, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 368, 370, 371, 372, 374, 382, 395, 399, 401, 402, 403, 404, 405, 407, 408, 409, 416, 420, 424, 433, 438, 448, 456, 457, 470, 471, 477, 478, 479, 486, 488, 490, 492, 493, 494, 496, 497, 498, 500, 501, 504, 506, 507, 508, 509, 518, 524, 525, 526, 527, 528, 530, 531, 533, 534, 535, 538, 539, 540, 541, 543, 544, 547, 556, 557, 558, 564, 566, 568, 569, 578, 581, 584, 586, 587, 589, 596, 610, 612, 614, 617, 618, 619, 621, 628, 629, 630, 636, 637, 638, 646, 647, 657, 658, 659, 664, 665, 666, 667, 672, 675, 681, 685, 690, 694, 699, 700, 701, 703, 710, 711, 713, 714, 716, 717, 719, 723, 725, 726, 727, 738, 739, 742, 744, 747, 753, 765, 766, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 807, 808, 810, 811, 812, 814, 817, 822, 830, 832, 833, 839, 841, 842, 844, 845, 847, 848, 849, 850, 854, 856, 859, 863, 864, 869, 881, 887, 888, 900, 901, 902, 904, 912, 921, 922, 923, 925, 927, 928, 929, 931, 932, 933, 935, 936, 939, 941, 942, 943, 944, 953, 960, 962, 974, 976, 977, 981, 989, 996, 997], "lit": [1, 102, 133, 399, 411, 553, 562, 578, 589, 596, 825, 989], "alia": [1, 12, 65, 67, 69, 161, 162, 178, 226, 233, 256, 263, 267, 270, 287, 289, 315, 320, 321, 322, 326, 327, 328, 329, 330, 332, 336, 337, 338, 341, 342, 343, 345, 347, 348, 349, 351, 353, 358, 359, 360, 362, 363, 364, 365, 366, 368, 369, 370, 372, 373, 376, 386, 388, 390, 392, 393, 397, 399, 402, 403, 411, 414, 415, 416, 421, 423, 424, 435, 437, 439, 443, 445, 447, 449, 450, 455, 471, 487, 488, 491, 493, 494, 497, 500, 506, 508, 509, 510, 519, 520, 521, 522, 529, 530, 531, 537, 538, 539, 540, 541, 545, 546, 548, 549, 553, 554, 555, 558, 559, 562, 563, 569, 570, 573, 577, 584, 585, 589, 596, 628, 629, 631, 637, 668, 672, 694, 722, 772, 774, 779, 799, 802, 806, 808, 813, 859, 928, 929, 943, 944, 989], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 18, 51, 54, 499, 505, 511, 727, 934, 940, 946], "select": [1, 29, 50, 51, 52, 65, 66, 67, 68, 70, 103, 104, 105, 106, 107, 109, 113, 115, 120, 126, 137, 172, 176, 186, 189, 198, 208, 221, 226, 229, 256, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 303, 304, 307, 308, 309, 315, 319, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 368, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 383, 387, 389, 391, 394, 396, 397, 398, 400, 401, 403, 404, 406, 410, 411, 412, 413, 415, 417, 418, 419, 420, 422, 423, 425, 426, 427, 436, 438, 440, 441, 442, 444, 445, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 492, 493, 494, 495, 496, 498, 499, 501, 504, 505, 507, 508, 509, 511, 512, 515, 517, 519, 520, 522, 523, 526, 527, 528, 530, 532, 533, 534, 535, 536, 539, 540, 541, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 554, 555, 558, 560, 561, 562, 563, 564, 566, 570, 571, 572, 573, 574, 575, 577, 578, 582, 583, 584, 585, 586, 588, 596, 615, 631, 634, 646, 660, 668, 673, 675, 694, 722, 802, 903, 904, 916, 931, 947, 961, 989, 996], "shape": [1, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 50, 51, 52, 54, 56, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 88, 91, 93, 94, 95, 96, 97, 98, 99, 102, 115, 120, 127, 129, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 157, 158, 160, 161, 162, 163, 164, 166, 167, 168, 169, 171, 172, 175, 176, 179, 180, 181, 182, 184, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 200, 202, 205, 206, 208, 209, 210, 211, 212, 213, 215, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 566, 569, 570, 571, 572, 573, 574, 575, 577, 578, 581, 582, 583, 584, 585, 586, 588, 589, 596, 610, 612, 614, 616, 617, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 653, 655, 656, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 702, 703, 704, 705, 706, 707, 708, 709, 712, 713, 714, 721, 722, 723, 726, 727, 729, 734, 735, 736, 738, 740, 747, 748, 750, 751, 753, 754, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 819, 820, 823, 824, 825, 826, 828, 831, 832, 833, 836, 837, 839, 841, 844, 845, 847, 848, 849, 850, 854, 856, 863, 864, 869, 877, 878, 879, 881, 883, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 903, 904, 907, 911, 912, 913, 914, 916, 917, 918, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 943, 944, 945, 946, 947, 948, 949, 951, 958, 960, 961, 962, 963, 964, 967, 968, 969, 973, 974, 975, 976, 977, 978, 981, 989, 996], "3": [1, 10, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 50, 52, 53, 55, 56, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 91, 93, 94, 95, 96, 97, 98, 99, 102, 106, 108, 115, 120, 121, 122, 123, 126, 127, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 263, 264, 265, 266, 270, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 309, 315, 317, 318, 319, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 346, 352, 354, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 437, 438, 439, 443, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 480, 482, 483, 484, 487, 490, 491, 493, 494, 495, 497, 500, 502, 506, 507, 508, 509, 510, 513, 516, 519, 520, 521, 522, 524, 525, 526, 530, 533, 534, 535, 537, 538, 539, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 575, 577, 578, 581, 582, 583, 584, 585, 586, 588, 589, 596, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 655, 656, 657, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 699, 702, 703, 704, 706, 707, 708, 710, 711, 712, 713, 714, 721, 722, 723, 726, 729, 734, 735, 736, 738, 740, 747, 748, 750, 751, 752, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 772, 773, 774, 777, 778, 779, 780, 782, 784, 785, 786, 788, 790, 791, 792, 794, 798, 800, 802, 803, 804, 806, 808, 809, 810, 812, 813, 817, 819, 820, 823, 824, 825, 826, 828, 831, 832, 833, 836, 837, 839, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 857, 858, 863, 864, 865, 866, 867, 868, 869, 870, 871, 877, 878, 879, 881, 882, 883, 886, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 911, 913, 914, 915, 916, 917, 919, 925, 926, 928, 929, 930, 932, 935, 937, 941, 945, 948, 951, 958, 959, 960, 961, 962, 963, 964, 966, 967, 970, 971, 972, 974, 975, 976, 977, 978, 979, 981, 989, 996, 997], "1": [1, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 91, 93, 94, 95, 96, 97, 98, 99, 102, 104, 105, 106, 107, 108, 109, 115, 116, 120, 121, 122, 123, 124, 127, 129, 132, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 315, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 596, 610, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 699, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 721, 722, 723, 725, 726, 729, 734, 735, 736, 738, 740, 747, 748, 750, 751, 752, 754, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 818, 819, 820, 823, 824, 825, 826, 828, 831, 832, 833, 836, 837, 839, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 856, 858, 863, 865, 866, 867, 868, 869, 870, 871, 877, 878, 879, 881, 882, 883, 886, 887, 888, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 928, 930, 931, 937, 943, 944, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 989, 996, 997], "2": [1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 50, 52, 53, 55, 56, 65, 66, 67, 68, 69, 70, 73, 74, 76, 91, 93, 94, 95, 96, 97, 98, 99, 106, 115, 120, 121, 122, 123, 126, 127, 129, 132, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 171, 172, 173, 175, 177, 179, 180, 181, 182, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 262, 263, 264, 265, 267, 268, 269, 270, 271, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 315, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 337, 338, 342, 344, 345, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 359, 361, 362, 363, 364, 365, 366, 369, 370, 373, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 437, 438, 439, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 480, 481, 482, 483, 484, 486, 488, 491, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 505, 506, 508, 509, 510, 511, 512, 514, 515, 517, 519, 520, 521, 522, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 581, 582, 583, 584, 585, 586, 588, 589, 596, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 633, 635, 636, 637, 638, 639, 640, 641, 642, 644, 646, 647, 648, 650, 651, 652, 653, 655, 656, 657, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 699, 702, 703, 705, 709, 710, 711, 712, 713, 714, 721, 722, 723, 726, 727, 729, 734, 735, 736, 738, 740, 747, 750, 751, 752, 753, 757, 758, 761, 762, 763, 764, 765, 766, 767, 768, 773, 775, 776, 780, 785, 786, 792, 794, 795, 796, 801, 802, 803, 804, 807, 810, 812, 814, 816, 817, 818, 819, 820, 823, 824, 825, 826, 828, 831, 832, 833, 836, 837, 839, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 858, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 877, 878, 879, 881, 882, 883, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 911, 913, 915, 916, 917, 918, 919, 921, 923, 928, 929, 930, 931, 934, 935, 936, 937, 938, 940, 943, 944, 946, 947, 949, 958, 959, 960, 961, 962, 963, 966, 967, 968, 969, 970, 971, 972, 974, 975, 976, 977, 978, 979, 981, 989, 996, 997], "column_0": [1, 137, 224, 256], "register_dataframe_namespac": [1, 67, 68, 69], "split": [1, 66, 174, 256, 508, 509, 943, 944], "splitfram": [1, 66], "df": [1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 50, 51, 66, 67, 70, 91, 92, 93, 94, 95, 96, 97, 98, 99, 105, 115, 125, 127, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 303, 304, 307, 308, 309, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 566, 569, 570, 571, 572, 573, 574, 575, 577, 581, 582, 583, 584, 585, 586, 588, 589, 596, 629, 668, 669, 675, 678, 681, 690, 694, 722, 750, 802, 931, 938, 943, 944, 968, 989, 997], "_df": [1, 66], "by_alternate_row": 1, "list": [1, 2, 30, 31, 38, 50, 54, 65, 66, 68, 72, 74, 91, 93, 94, 95, 97, 98, 101, 103, 104, 105, 106, 107, 109, 113, 115, 116, 125, 126, 127, 129, 132, 141, 144, 147, 148, 149, 153, 158, 160, 161, 166, 173, 185, 188, 198, 199, 202, 209, 215, 216, 224, 225, 226, 227, 233, 236, 237, 256, 264, 285, 288, 289, 290, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 382, 388, 396, 422, 433, 434, 446, 456, 457, 459, 460, 461, 462, 463, 464, 466, 467, 468, 474, 482, 483, 494, 507, 519, 520, 525, 529, 544, 547, 548, 555, 559, 568, 584, 585, 596, 615, 616, 618, 620, 624, 627, 628, 642, 653, 661, 667, 668, 672, 673, 676, 677, 694, 715, 718, 721, 722, 723, 725, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 752, 765, 817, 822, 826, 829, 833, 834, 844, 881, 887, 889, 890, 891, 892, 893, 894, 896, 897, 898, 901, 929, 942, 961, 970, 973, 989, 997], "with_row_count": [1, 256, 424, 596, 694, 904, 989], "name": [1, 16, 20, 22, 29, 31, 33, 51, 52, 53, 54, 55, 66, 67, 68, 69, 73, 74, 75, 80, 91, 93, 94, 95, 96, 97, 99, 102, 103, 104, 105, 107, 108, 109, 110, 113, 114, 115, 117, 118, 119, 123, 124, 125, 127, 128, 129, 130, 132, 133, 137, 138, 141, 144, 145, 146, 149, 154, 157, 159, 160, 172, 173, 175, 176, 182, 188, 190, 194, 198, 199, 201, 202, 209, 215, 217, 219, 222, 223, 224, 225, 226, 227, 228, 233, 234, 235, 236, 256, 265, 270, 307, 363, 370, 380, 399, 411, 423, 432, 434, 446, 450, 483, 494, 519, 520, 522, 539, 540, 542, 544, 546, 547, 548, 549, 550, 552, 555, 560, 566, 567, 570, 573, 575, 576, 578, 579, 580, 582, 584, 585, 586, 596, 610, 615, 616, 617, 620, 627, 633, 634, 642, 650, 652, 653, 661, 666, 667, 668, 669, 672, 674, 675, 676, 694, 699, 740, 753, 765, 803, 810, 881, 886, 928, 929, 937, 954, 956, 967, 968, 972, 989, 996, 997], "n": [1, 12, 15, 23, 34, 38, 40, 52, 53, 66, 67, 68, 69, 75, 101, 102, 104, 105, 115, 133, 137, 139, 150, 161, 164, 173, 174, 178, 199, 200, 210, 212, 213, 216, 218, 230, 241, 250, 256, 288, 293, 305, 307, 315, 331, 332, 336, 337, 343, 368, 373, 383, 395, 416, 447, 448, 456, 470, 480, 485, 502, 508, 509, 514, 524, 526, 530, 531, 536, 538, 550, 564, 566, 575, 578, 579, 580, 582, 583, 586, 588, 596, 612, 614, 628, 630, 637, 662, 664, 665, 670, 681, 690, 694, 702, 721, 726, 738, 740, 747, 753, 764, 767, 772, 773, 779, 808, 813, 823, 832, 859, 877, 900, 915, 919, 937, 943, 944, 949, 960, 962, 969, 974, 979, 989, 996, 997], "filter": [1, 66, 107, 115, 116, 120, 146, 169, 170, 171, 238, 256, 491, 510, 537, 543, 562, 596, 617, 621, 631, 678, 694, 903, 989], "col": [1, 12, 28, 31, 65, 66, 67, 68, 70, 95, 97, 115, 125, 127, 137, 149, 153, 160, 161, 162, 170, 172, 186, 189, 198, 202, 209, 226, 233, 236, 256, 262, 263, 264, 265, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 303, 304, 307, 308, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 383, 386, 387, 388, 389, 390, 392, 393, 397, 398, 399, 400, 402, 403, 405, 406, 407, 410, 411, 412, 413, 414, 417, 418, 419, 420, 421, 424, 425, 426, 427, 436, 437, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 517, 518, 519, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 546, 548, 549, 553, 554, 555, 558, 561, 562, 563, 564, 565, 570, 573, 576, 577, 585, 589, 596, 620, 624, 627, 628, 629, 631, 646, 653, 661, 668, 672, 673, 676, 694, 722, 750, 799, 802, 887, 903, 904, 931, 947, 989, 997], "0": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 31, 35, 50, 55, 65, 66, 67, 69, 70, 74, 75, 99, 102, 104, 105, 106, 108, 109, 113, 115, 117, 118, 119, 120, 121, 124, 125, 126, 127, 129, 132, 133, 137, 139, 140, 142, 143, 144, 147, 151, 152, 155, 156, 158, 159, 160, 161, 163, 167, 172, 173, 174, 175, 177, 179, 180, 181, 184, 185, 186, 187, 190, 191, 192, 196, 200, 201, 202, 206, 208, 209, 210, 211, 217, 218, 219, 220, 221, 224, 227, 229, 230, 233, 234, 236, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 256, 262, 264, 267, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 284, 287, 289, 292, 298, 307, 317, 319, 321, 322, 323, 324, 326, 331, 334, 335, 344, 348, 349, 351, 352, 358, 364, 365, 376, 377, 378, 379, 381, 383, 384, 385, 389, 390, 392, 393, 394, 398, 401, 404, 405, 407, 408, 409, 411, 412, 414, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 436, 437, 439, 441, 442, 443, 444, 445, 447, 448, 449, 452, 453, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 475, 477, 478, 479, 480, 484, 485, 493, 494, 512, 518, 521, 523, 527, 528, 529, 531, 536, 543, 544, 545, 546, 548, 550, 552, 553, 557, 559, 562, 567, 571, 572, 575, 576, 577, 582, 587, 588, 589, 596, 612, 613, 616, 618, 622, 623, 627, 628, 633, 636, 641, 645, 647, 648, 652, 653, 656, 657, 659, 661, 662, 670, 672, 673, 674, 676, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 694, 704, 705, 706, 707, 708, 709, 710, 712, 714, 722, 725, 740, 748, 751, 753, 758, 759, 764, 765, 766, 768, 780, 784, 785, 786, 787, 788, 789, 790, 791, 792, 797, 798, 804, 805, 816, 818, 819, 820, 824, 828, 831, 833, 841, 843, 845, 847, 848, 849, 850, 856, 857, 863, 866, 867, 877, 881, 882, 883, 889, 891, 892, 894, 895, 896, 898, 899, 900, 912, 913, 914, 918, 919, 921, 928, 929, 931, 947, 953, 963, 964, 967, 972, 973, 977, 979, 980, 989, 997], "drop": [1, 94, 137, 145, 146, 225, 233, 256, 288, 332, 334, 335, 512, 596, 617, 667, 672, 694, 721, 767, 769, 770, 947, 989], "aaa": [1, 31, 256, 487, 519, 520, 922], "bbb": [1, 31, 256, 519, 520], "ccc": [1, 31, 256, 519, 520], "ddd": [1, 31, 256, 519, 520], "eee": [1, 31, 256], "fff": 1, "column": [1, 15, 16, 19, 20, 22, 31, 33, 56, 65, 66, 73, 74, 75, 78, 80, 91, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 109, 110, 113, 114, 115, 116, 117, 118, 119, 122, 127, 132, 133, 136, 137, 138, 144, 145, 146, 147, 149, 154, 157, 159, 160, 161, 162, 166, 167, 172, 173, 175, 176, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 198, 199, 201, 202, 203, 209, 210, 211, 215, 217, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 236, 256, 266, 268, 270, 280, 285, 290, 303, 306, 307, 337, 341, 344, 346, 347, 348, 350, 352, 354, 357, 360, 361, 364, 366, 369, 371, 372, 374, 380, 382, 386, 388, 399, 411, 424, 430, 432, 434, 446, 450, 454, 456, 457, 460, 461, 462, 463, 464, 466, 467, 468, 475, 482, 483, 492, 508, 509, 512, 513, 514, 516, 522, 537, 539, 540, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 560, 561, 562, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 596, 610, 616, 617, 618, 620, 627, 628, 629, 633, 634, 638, 639, 640, 641, 642, 644, 645, 646, 648, 650, 652, 653, 654, 661, 662, 663, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 694, 700, 701, 718, 723, 736, 739, 765, 775, 776, 777, 780, 782, 783, 787, 789, 792, 794, 797, 800, 801, 804, 806, 807, 809, 811, 812, 814, 822, 881, 887, 909, 927, 943, 944, 947, 948, 949, 951, 958, 967, 968, 989, 997], "txt": [1, 12, 115], "utf8": [1, 10, 18, 56, 76, 94, 98, 104, 105, 115, 124, 126, 129, 147, 148, 149, 155, 201, 219, 256, 294, 366, 369, 382, 424, 486, 490, 493, 494, 496, 497, 506, 507, 508, 509, 512, 513, 514, 516, 547, 549, 596, 618, 620, 652, 694, 727, 806, 809, 822, 855, 921, 925, 928, 929, 931, 932, 941, 942, 943, 944, 947, 948, 949, 951, 989], "register_lazyframe_namespac": [1, 66, 67, 69], "dtypeoper": [1, 68], "ldf": [1, 68, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "_ldf": [1, 68], "upcast_integer_typ": [1, 68], "with_column": [1, 12, 68, 132, 162, 189, 256, 263, 270, 281, 289, 317, 318, 320, 321, 322, 327, 330, 332, 362, 366, 369, 376, 390, 392, 393, 394, 398, 399, 402, 405, 407, 408, 409, 411, 414, 421, 423, 424, 437, 439, 443, 446, 447, 448, 449, 487, 491, 494, 497, 500, 502, 503, 506, 508, 509, 510, 518, 521, 529, 531, 538, 541, 543, 546, 549, 555, 559, 569, 585, 589, 596, 629, 646, 694, 722, 750, 802], "tp": [1, 68], "cast": [1, 67, 68, 76, 91, 155, 161, 162, 189, 220, 233, 256, 269, 318, 329, 330, 336, 366, 369, 424, 445, 448, 455, 495, 496, 518, 523, 529, 549, 596, 628, 629, 646, 672, 694, 750, 762, 763, 772, 806, 809, 885, 930, 931, 959, 968, 973, 989], "int64": [1, 31, 33, 67, 68, 98, 104, 147, 155, 161, 162, 189, 201, 214, 220, 256, 329, 330, 342, 345, 349, 351, 353, 358, 365, 380, 448, 455, 495, 523, 529, 543, 547, 560, 568, 578, 584, 596, 618, 628, 629, 646, 652, 675, 694, 762, 763, 778, 781, 788, 790, 793, 798, 805, 885, 902, 959, 971, 972, 973, 989], "int8": [1, 68, 102, 133, 155, 256, 329, 330, 523, 578, 596, 762, 763, 767, 864, 888, 959, 977, 989], "int16": [1, 68, 329, 330, 523, 596, 762, 763, 864, 959, 969, 989], "int32": [1, 68, 91, 94, 98, 126, 127, 161, 162, 174, 256, 317, 347, 374, 529, 578, 596, 628, 629, 694, 783, 814, 863, 973, 989], "b": [1, 27, 28, 30, 32, 35, 52, 53, 55, 56, 68, 73, 76, 91, 93, 94, 95, 96, 97, 98, 99, 108, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 263, 265, 269, 270, 282, 285, 289, 294, 296, 309, 317, 318, 325, 333, 334, 335, 380, 384, 385, 386, 388, 391, 394, 396, 398, 399, 401, 404, 405, 406, 407, 408, 409, 411, 415, 423, 438, 444, 446, 448, 450, 458, 475, 481, 483, 492, 495, 502, 522, 533, 535, 537, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 559, 560, 561, 562, 563, 566, 569, 570, 571, 572, 573, 574, 575, 577, 579, 580, 582, 583, 584, 585, 586, 588, 596, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 630, 633, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 655, 656, 657, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 702, 722, 750, 766, 768, 816, 817, 825, 837, 844, 855, 886, 902, 927, 930, 937, 958, 972, 976, 989, 996], "4": [1, 15, 23, 27, 28, 30, 31, 32, 35, 50, 52, 53, 55, 56, 65, 66, 67, 68, 69, 70, 73, 75, 76, 91, 93, 94, 95, 96, 97, 98, 99, 115, 121, 122, 123, 129, 132, 137, 138, 139, 140, 143, 146, 149, 150, 151, 152, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 180, 182, 185, 186, 188, 189, 190, 191, 195, 199, 204, 209, 212, 213, 214, 215, 216, 217, 222, 223, 224, 226, 227, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 262, 263, 264, 267, 269, 270, 282, 287, 288, 289, 290, 293, 301, 302, 305, 309, 315, 317, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 337, 341, 345, 352, 353, 354, 360, 361, 363, 364, 365, 366, 369, 370, 371, 372, 374, 376, 381, 384, 385, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 408, 409, 411, 414, 415, 416, 418, 421, 423, 424, 437, 439, 443, 445, 446, 448, 449, 450, 452, 453, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 471, 473, 474, 477, 481, 482, 483, 484, 487, 497, 498, 500, 501, 502, 504, 506, 508, 509, 512, 519, 520, 521, 522, 524, 525, 526, 529, 530, 531, 538, 541, 542, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 559, 561, 562, 566, 568, 569, 570, 571, 572, 573, 574, 575, 582, 583, 584, 585, 586, 588, 589, 596, 610, 612, 613, 614, 617, 619, 620, 621, 622, 623, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 646, 647, 648, 655, 656, 657, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 702, 705, 712, 721, 722, 723, 726, 734, 735, 738, 747, 751, 752, 754, 764, 766, 768, 780, 781, 787, 789, 792, 793, 794, 795, 796, 797, 801, 803, 804, 805, 806, 809, 810, 811, 812, 824, 825, 832, 833, 836, 837, 839, 844, 847, 848, 849, 850, 854, 864, 870, 877, 878, 879, 881, 883, 887, 892, 894, 895, 896, 897, 898, 900, 902, 912, 916, 917, 922, 932, 933, 935, 936, 939, 941, 943, 944, 947, 958, 960, 961, 962, 969, 972, 973, 974, 981, 989, 997], "c": [1, 27, 28, 30, 32, 35, 52, 53, 55, 56, 66, 68, 73, 76, 94, 96, 98, 108, 115, 125, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 153, 154, 155, 156, 158, 159, 160, 161, 164, 166, 167, 174, 175, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 194, 196, 197, 198, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 214, 218, 219, 220, 221, 223, 224, 227, 228, 230, 231, 233, 236, 239, 240, 241, 242, 243, 244, 246, 249, 250, 256, 263, 270, 285, 294, 296, 399, 411, 446, 448, 475, 508, 512, 533, 535, 539, 540, 542, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 561, 562, 563, 566, 569, 570, 571, 572, 573, 574, 575, 582, 583, 585, 586, 588, 596, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 627, 628, 633, 636, 642, 645, 647, 650, 651, 652, 653, 657, 660, 661, 666, 669, 672, 673, 676, 679, 680, 681, 682, 683, 684, 686, 689, 690, 694, 766, 837, 855, 943, 947, 976, 989], "5": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 32, 35, 53, 55, 65, 66, 68, 69, 70, 73, 74, 91, 94, 95, 96, 97, 98, 101, 105, 121, 127, 137, 139, 140, 143, 149, 150, 151, 152, 155, 157, 158, 159, 160, 161, 162, 164, 165, 167, 168, 170, 172, 173, 176, 177, 178, 180, 182, 185, 186, 188, 190, 191, 192, 195, 199, 204, 209, 212, 213, 214, 215, 216, 219, 222, 227, 229, 232, 233, 234, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 263, 264, 267, 287, 289, 290, 293, 298, 304, 305, 315, 317, 318, 319, 320, 321, 322, 331, 332, 333, 337, 338, 342, 362, 364, 365, 366, 369, 371, 379, 380, 383, 389, 390, 392, 393, 395, 396, 399, 402, 405, 407, 408, 409, 411, 414, 416, 437, 439, 445, 446, 447, 448, 450, 452, 453, 457, 458, 459, 460, 461, 463, 467, 469, 471, 477, 483, 488, 496, 497, 500, 501, 518, 521, 522, 524, 526, 530, 531, 541, 542, 545, 546, 548, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 582, 583, 585, 586, 588, 596, 612, 613, 614, 619, 620, 621, 622, 623, 625, 627, 628, 629, 630, 632, 634, 635, 636, 637, 640, 641, 642, 647, 655, 656, 657, 660, 661, 662, 663, 664, 665, 671, 672, 674, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 702, 705, 709, 712, 722, 723, 726, 729, 738, 747, 750, 752, 754, 760, 764, 765, 766, 767, 768, 773, 774, 775, 776, 777, 778, 802, 804, 805, 806, 807, 809, 811, 812, 820, 823, 832, 833, 836, 837, 863, 864, 870, 877, 878, 879, 881, 882, 883, 887, 889, 890, 891, 893, 894, 897, 900, 902, 912, 918, 923, 931, 932, 936, 960, 974, 977, 981, 989, 997], "6": [1, 27, 28, 30, 31, 32, 33, 34, 35, 53, 55, 66, 68, 73, 91, 94, 95, 96, 97, 99, 137, 141, 144, 145, 146, 147, 149, 150, 153, 154, 156, 157, 158, 159, 161, 162, 164, 166, 167, 168, 170, 172, 173, 175, 179, 180, 181, 182, 184, 187, 190, 191, 192, 194, 195, 196, 198, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 233, 234, 241, 249, 250, 256, 263, 267, 270, 290, 309, 317, 329, 330, 333, 337, 359, 361, 364, 375, 384, 385, 391, 395, 396, 398, 416, 445, 451, 453, 454, 457, 460, 461, 462, 463, 464, 466, 467, 468, 471, 483, 488, 492, 497, 500, 501, 521, 524, 526, 538, 539, 541, 553, 554, 555, 559, 562, 569, 585, 596, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 628, 629, 630, 632, 633, 635, 637, 638, 642, 645, 647, 650, 652, 653, 655, 656, 657, 660, 661, 664, 665, 668, 669, 671, 672, 674, 675, 681, 689, 690, 694, 702, 723, 752, 758, 762, 763, 768, 799, 812, 833, 870, 883, 887, 892, 894, 895, 896, 898, 902, 923, 927, 932, 936, 959, 989, 996, 997], "7": [1, 27, 28, 30, 31, 32, 33, 34, 35, 55, 66, 68, 73, 75, 121, 141, 142, 143, 144, 145, 147, 149, 153, 154, 156, 161, 162, 164, 166, 168, 175, 179, 180, 181, 184, 187, 190, 192, 194, 196, 198, 200, 201, 202, 205, 206, 208, 210, 211, 212, 213, 218, 219, 220, 221, 227, 228, 229, 230, 231, 256, 263, 267, 330, 337, 341, 360, 362, 363, 370, 372, 374, 381, 395, 398, 416, 424, 445, 457, 461, 467, 483, 524, 526, 541, 553, 554, 562, 569, 585, 596, 615, 616, 618, 620, 624, 628, 629, 630, 632, 633, 637, 645, 648, 650, 652, 653, 664, 665, 669, 675, 694, 709, 773, 777, 783, 802, 803, 810, 812, 856, 864, 887, 897, 989, 997], "float32": [1, 28, 68, 155, 218, 219, 256, 568, 694, 840, 863, 989], "lazi": [1, 50, 51, 52, 53, 55, 68, 73, 75, 102, 115, 127, 133, 176, 189, 256, 270, 543, 564, 578, 596, 607, 633, 634, 673, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 694, 996, 997], "i16": [1, 68, 475, 596, 864, 969, 989, 997], "i32": [1, 68, 91, 94, 98, 126, 127, 202, 256, 317, 347, 374, 475, 501, 589, 596, 653, 694, 783, 814, 863, 936, 989, 997], "f32": [1, 68, 146, 218, 256, 289, 453, 475, 559, 596, 617, 694, 722, 863, 883, 989], "i64": [1, 15, 19, 50, 52, 66, 67, 68, 69, 73, 91, 93, 94, 95, 96, 97, 98, 115, 137, 138, 139, 140, 141, 144, 146, 147, 149, 150, 152, 153, 157, 158, 159, 160, 161, 162, 164, 166, 167, 168, 169, 171, 175, 176, 179, 182, 184, 188, 189, 190, 191, 194, 195, 196, 197, 200, 202, 205, 206, 208, 209, 211, 212, 213, 215, 221, 223, 224, 225, 226, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 246, 249, 250, 256, 263, 265, 269, 270, 288, 289, 290, 291, 292, 293, 295, 297, 299, 300, 301, 302, 303, 304, 305, 308, 309, 315, 318, 320, 321, 322, 327, 328, 329, 330, 332, 333, 342, 343, 345, 349, 351, 353, 358, 365, 368, 380, 383, 385, 386, 387, 388, 390, 391, 395, 396, 397, 398, 399, 402, 405, 407, 408, 409, 411, 413, 416, 420, 422, 423, 437, 438, 439, 446, 447, 448, 449, 450, 451, 454, 455, 457, 458, 470, 472, 473, 475, 476, 477, 481, 482, 483, 502, 503, 519, 520, 521, 522, 523, 524, 525, 526, 530, 531, 532, 534, 537, 539, 541, 546, 547, 549, 553, 554, 555, 558, 559, 560, 561, 562, 566, 568, 569, 570, 573, 577, 581, 585, 586, 589, 596, 610, 612, 614, 616, 617, 620, 621, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 642, 644, 646, 647, 650, 651, 653, 655, 656, 660, 661, 663, 664, 665, 666, 667, 668, 669, 672, 674, 676, 677, 678, 680, 681, 682, 683, 686, 689, 690, 694, 702, 703, 721, 722, 723, 726, 734, 735, 736, 738, 740, 747, 750, 754, 757, 760, 761, 762, 763, 766, 778, 779, 781, 788, 790, 793, 798, 805, 808, 823, 825, 826, 832, 836, 844, 869, 886, 887, 890, 893, 897, 900, 903, 904, 907, 911, 912, 916, 917, 958, 960, 961, 962, 968, 974, 975, 978, 981, 989, 996, 997], "register_series_namespac": [1, 66, 67, 68], "math": [1, 69, 758, 913, 963, 989], "mathshortcut": [1, 69], "": [1, 28, 31, 50, 53, 69, 74, 91, 98, 99, 104, 105, 116, 129, 138, 144, 146, 148, 149, 160, 161, 167, 175, 176, 188, 190, 195, 196, 202, 209, 213, 217, 223, 225, 226, 227, 256, 293, 294, 301, 302, 305, 343, 366, 369, 380, 412, 433, 438, 441, 442, 446, 447, 455, 459, 483, 487, 493, 494, 497, 498, 500, 502, 504, 506, 507, 509, 512, 513, 514, 516, 518, 519, 520, 539, 540, 544, 547, 550, 555, 560, 563, 564, 570, 573, 575, 584, 585, 596, 610, 616, 617, 620, 627, 628, 634, 653, 661, 666, 667, 668, 678, 694, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 721, 723, 726, 727, 729, 734, 735, 736, 738, 747, 748, 751, 752, 753, 754, 757, 758, 759, 760, 761, 762, 763, 764, 767, 768, 773, 779, 795, 796, 803, 806, 809, 810, 817, 819, 820, 823, 824, 825, 826, 828, 831, 832, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 877, 878, 879, 882, 883, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 911, 912, 913, 914, 916, 917, 919, 922, 923, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 939, 940, 941, 944, 945, 946, 947, 948, 949, 951, 953, 956, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 989], "_": [1, 65, 69, 99, 190, 217, 256, 494, 508, 929, 943, 967, 989], "squar": [1, 69, 238, 412, 484, 596, 678, 857, 918, 989], "cube": [1, 69, 449, 596], "s2": [1, 123, 155, 256, 702, 740, 752, 768, 844, 856, 870, 902, 972, 981, 989], "renam": [1, 94, 104, 105, 202, 233, 236, 256, 265, 423, 435, 520, 581, 584, 596, 653, 672, 676, 694, 864, 956, 968, 989], "n2": [1, 307], "in_plac": [1, 166, 207, 231, 256, 884, 886, 910, 917, 989], "true": [1, 6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 33, 50, 52, 54, 70, 72, 73, 75, 76, 91, 92, 96, 98, 101, 102, 104, 105, 107, 108, 109, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 132, 133, 134, 136, 138, 139, 140, 143, 152, 155, 156, 158, 159, 160, 161, 167, 169, 170, 171, 173, 176, 177, 180, 185, 186, 188, 190, 191, 198, 199, 200, 202, 209, 215, 219, 220, 223, 224, 225, 226, 227, 229, 233, 237, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 256, 264, 266, 267, 268, 269, 270, 281, 286, 303, 306, 307, 311, 317, 326, 327, 328, 329, 330, 336, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 392, 393, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 414, 421, 443, 445, 455, 465, 470, 475, 480, 482, 483, 487, 489, 491, 495, 496, 501, 507, 508, 510, 512, 513, 514, 516, 519, 520, 525, 532, 535, 538, 539, 540, 541, 543, 544, 550, 551, 562, 578, 582, 584, 589, 596, 610, 612, 613, 614, 619, 621, 623, 627, 628, 633, 634, 636, 638, 642, 647, 653, 657, 658, 659, 661, 666, 667, 668, 672, 677, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 694, 700, 701, 702, 703, 713, 736, 739, 743, 748, 752, 753, 772, 774, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 810, 811, 812, 813, 814, 816, 818, 819, 820, 826, 830, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 857, 870, 878, 879, 885, 895, 902, 915, 917, 922, 924, 926, 930, 931, 936, 942, 943, 945, 947, 948, 949, 951, 971, 972, 980, 981, 989, 996, 997], "s3": [1, 30, 107, 116, 120, 256, 740, 989], "n3": 1, "8": [1, 27, 28, 30, 32, 33, 34, 35, 46, 50, 55, 62, 64, 65, 66, 68, 69, 73, 74, 99, 121, 125, 127, 137, 141, 142, 143, 144, 145, 146, 147, 149, 153, 154, 156, 159, 164, 166, 175, 179, 180, 181, 184, 192, 194, 196, 198, 200, 201, 202, 205, 206, 208, 210, 211, 212, 213, 218, 219, 220, 221, 227, 228, 230, 231, 233, 256, 267, 269, 282, 288, 289, 325, 327, 330, 331, 334, 335, 337, 398, 415, 439, 445, 449, 450, 457, 458, 461, 462, 464, 466, 468, 475, 481, 483, 498, 504, 512, 522, 526, 538, 542, 545, 550, 551, 552, 554, 555, 559, 561, 566, 569, 570, 571, 572, 573, 574, 575, 582, 583, 585, 586, 588, 596, 615, 616, 617, 618, 620, 624, 630, 633, 637, 638, 647, 650, 652, 653, 664, 665, 669, 672, 675, 694, 721, 722, 764, 783, 833, 856, 877, 881, 887, 889, 892, 894, 895, 896, 898, 933, 939, 947, 989, 997], "9": [1, 27, 28, 30, 32, 35, 50, 55, 65, 73, 137, 142, 143, 155, 162, 164, 168, 202, 212, 227, 228, 231, 233, 249, 256, 263, 267, 269, 282, 288, 300, 303, 325, 327, 330, 334, 335, 337, 341, 360, 371, 372, 398, 403, 411, 415, 445, 457, 459, 461, 467, 477, 481, 494, 526, 541, 548, 553, 554, 596, 629, 630, 632, 637, 653, 664, 669, 672, 689, 694, 721, 736, 766, 777, 787, 789, 797, 803, 804, 810, 811, 844, 856, 887, 889, 897, 899, 912, 929, 989], "27": [1, 69, 249, 330, 347, 361, 374, 596, 689, 989, 997], "16": [1, 31, 43, 59, 67, 74, 99, 161, 162, 233, 256, 327, 330, 398, 439, 449, 461, 501, 512, 541, 553, 558, 559, 562, 575, 582, 596, 628, 629, 657, 672, 694, 803, 810, 877, 913, 936, 947, 963, 989], "64": [1, 42, 45, 61, 67, 69, 439, 449, 596, 659, 694, 877, 989], "25": [1, 31, 69, 75, 98, 127, 132, 143, 161, 162, 176, 229, 233, 256, 332, 347, 363, 370, 374, 531, 564, 596, 628, 629, 634, 640, 670, 672, 694, 766, 767, 803, 810, 816, 833, 877, 881, 989], "125": [1, 31, 69, 256, 263, 596, 877, 989], "arg": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 189, 220, 256, 448, 544, 563, 596, 646, 694, 703, 971, 972, 989], "ani": [2, 3, 4, 5, 8, 28, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 57, 58, 59, 60, 61, 62, 63, 64, 71, 91, 92, 93, 94, 95, 96, 97, 104, 105, 107, 108, 109, 113, 115, 116, 117, 119, 124, 126, 127, 129, 134, 137, 142, 146, 150, 152, 153, 155, 172, 173, 174, 188, 189, 198, 199, 215, 216, 219, 220, 225, 227, 256, 263, 267, 270, 285, 289, 317, 364, 376, 385, 390, 392, 393, 403, 414, 421, 422, 424, 435, 437, 439, 443, 445, 448, 457, 459, 471, 474, 501, 512, 513, 514, 516, 521, 525, 531, 538, 539, 541, 550, 561, 568, 582, 589, 596, 617, 623, 646, 667, 694, 702, 703, 718, 722, 768, 804, 825, 844, 856, 864, 887, 889, 901, 904, 936, 947, 948, 949, 951, 961, 970, 971, 972, 989, 996, 997], "kwarg": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 142, 189, 220, 256, 448, 596, 646, 694, 972, 989, 996], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 596, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 956, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 989, 996], "width": [2, 24, 31, 104, 105, 256, 498, 504, 518, 694, 933, 939, 953], "int": [2, 12, 13, 15, 23, 24, 28, 31, 35, 39, 52, 55, 67, 94, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 113, 115, 116, 117, 118, 119, 125, 126, 127, 128, 129, 130, 131, 133, 137, 138, 139, 148, 151, 152, 154, 163, 164, 165, 167, 172, 173, 174, 176, 178, 179, 180, 184, 185, 186, 196, 198, 200, 204, 205, 206, 208, 210, 211, 212, 213, 218, 221, 223, 227, 230, 232, 234, 241, 250, 256, 263, 286, 287, 288, 292, 293, 301, 302, 305, 306, 307, 309, 315, 320, 321, 322, 331, 332, 377, 378, 379, 383, 384, 385, 391, 394, 395, 416, 445, 447, 448, 449, 453, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 476, 481, 485, 493, 498, 501, 502, 504, 506, 508, 509, 518, 524, 525, 526, 530, 536, 538, 543, 550, 551, 556, 557, 558, 564, 566, 572, 574, 575, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 596, 610, 612, 621, 622, 623, 630, 634, 637, 647, 655, 656, 659, 660, 662, 664, 665, 666, 670, 671, 674, 681, 690, 694, 710, 711, 719, 720, 721, 725, 726, 734, 735, 738, 739, 740, 747, 748, 752, 753, 754, 755, 756, 764, 767, 817, 818, 819, 820, 823, 824, 825, 831, 832, 833, 856, 858, 859, 866, 870, 871, 873, 874, 875, 876, 877, 880, 883, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 907, 908, 911, 916, 919, 928, 933, 936, 937, 939, 941, 943, 944, 953, 959, 960, 961, 962, 969, 974, 979, 989, 996, 997], "inner": [2, 47, 56, 76, 126, 175, 228, 256, 294, 333, 529, 596, 633, 669, 675, 694, 727, 768, 973, 989], "polarsdatatyp": [2, 47, 102, 104, 105, 110, 114, 115, 124, 125, 126, 127, 129, 133, 137, 147, 256, 270, 317, 380, 422, 424, 495, 541, 543, 547, 560, 568, 569, 578, 596, 618, 694, 703, 748, 864, 930, 989], "pythondatatyp": [2, 47], "null": [2, 28, 30, 52, 65, 73, 94, 104, 105, 115, 120, 136, 138, 139, 143, 146, 152, 155, 156, 168, 175, 180, 181, 187, 190, 192, 205, 206, 209, 210, 211, 215, 220, 223, 226, 228, 230, 233, 239, 256, 265, 269, 270, 280, 288, 291, 292, 295, 301, 306, 307, 309, 311, 320, 321, 322, 325, 327, 330, 332, 334, 335, 342, 345, 349, 351, 353, 358, 365, 377, 378, 379, 380, 383, 384, 385, 386, 391, 398, 405, 406, 407, 408, 409, 415, 424, 444, 447, 454, 459, 460, 461, 462, 463, 464, 466, 467, 468, 473, 474, 475, 477, 482, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 500, 501, 504, 506, 508, 509, 510, 518, 519, 520, 529, 537, 539, 546, 548, 549, 551, 560, 568, 579, 580, 584, 589, 596, 610, 612, 617, 623, 632, 633, 645, 655, 656, 661, 666, 668, 669, 672, 673, 675, 679, 694, 703, 712, 721, 734, 739, 740, 743, 753, 754, 767, 770, 778, 781, 788, 790, 793, 798, 805, 818, 819, 820, 823, 825, 830, 849, 850, 876, 877, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 902, 907, 908, 912, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 932, 933, 935, 936, 939, 941, 943, 944, 945, 969, 971, 972, 973, 980, 989, 996, 997], "nest": [2, 47, 56, 98, 148, 256, 607, 817, 989, 996, 997], "paramet": [2, 7, 11, 12, 13, 14, 15, 18, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 47, 50, 51, 52, 53, 55, 57, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 136, 137, 138, 139, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 167, 172, 173, 174, 175, 176, 178, 180, 182, 183, 185, 186, 188, 189, 190, 192, 194, 195, 196, 198, 199, 200, 202, 203, 205, 206, 208, 209, 210, 211, 212, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 238, 241, 248, 250, 256, 263, 265, 267, 269, 270, 280, 285, 286, 287, 288, 289, 292, 293, 294, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 320, 321, 322, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 343, 359, 362, 363, 364, 366, 368, 369, 370, 373, 375, 376, 377, 378, 379, 380, 383, 385, 386, 390, 391, 392, 393, 394, 395, 398, 399, 403, 412, 414, 416, 417, 421, 422, 423, 424, 437, 439, 443, 445, 446, 447, 448, 449, 450, 452, 453, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 518, 519, 520, 521, 522, 524, 525, 530, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 560, 562, 563, 564, 566, 567, 568, 569, 570, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 596, 610, 612, 614, 616, 617, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 633, 634, 637, 638, 642, 643, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 678, 681, 688, 690, 694, 699, 702, 703, 712, 718, 719, 720, 721, 722, 725, 726, 727, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 753, 754, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 772, 773, 774, 779, 799, 802, 803, 804, 806, 808, 809, 810, 813, 816, 817, 818, 819, 820, 823, 824, 825, 826, 831, 832, 833, 836, 837, 846, 852, 853, 857, 859, 864, 877, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 911, 915, 916, 917, 919, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 951, 953, 954, 956, 960, 961, 967, 968, 969, 970, 971, 972, 974, 975, 978, 979, 980, 981, 989, 996], "The": [2, 18, 29, 31, 35, 47, 50, 54, 57, 65, 71, 91, 93, 94, 95, 97, 101, 104, 106, 113, 115, 131, 137, 145, 147, 159, 160, 161, 162, 163, 168, 173, 176, 183, 188, 198, 199, 202, 226, 229, 233, 236, 238, 256, 306, 309, 310, 311, 312, 341, 354, 359, 360, 363, 366, 370, 371, 380, 383, 391, 394, 422, 446, 453, 456, 459, 460, 461, 462, 463, 464, 466, 467, 468, 477, 480, 486, 489, 490, 495, 497, 498, 499, 504, 505, 511, 512, 518, 547, 560, 564, 579, 580, 581, 584, 589, 590, 592, 596, 597, 598, 602, 603, 604, 628, 629, 630, 632, 634, 637, 638, 643, 647, 653, 659, 668, 672, 676, 678, 694, 703, 739, 742, 743, 744, 753, 777, 794, 799, 800, 803, 806, 810, 811, 823, 831, 836, 883, 889, 890, 891, 892, 893, 894, 896, 897, 898, 912, 915, 921, 924, 925, 930, 932, 933, 934, 939, 940, 946, 947, 953, 983, 985, 989, 990, 993, 994, 995, 997], "datatyp": [2, 28, 33, 47, 63, 91, 93, 94, 95, 97, 100, 108, 110, 114, 129, 147, 149, 155, 201, 256, 290, 317, 380, 475, 492, 529, 547, 560, 568, 596, 607, 620, 652, 675, 694, 703, 723, 748, 766, 846, 851, 853, 855, 909, 927, 973, 989], "valu": [2, 8, 11, 12, 15, 26, 28, 31, 33, 47, 48, 50, 54, 56, 63, 65, 73, 74, 76, 94, 96, 104, 105, 106, 115, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 136, 137, 138, 143, 146, 150, 151, 152, 156, 159, 161, 162, 163, 164, 168, 172, 173, 178, 179, 180, 181, 182, 184, 186, 188, 190, 191, 192, 194, 198, 199, 200, 205, 206, 209, 210, 211, 212, 215, 216, 220, 223, 227, 228, 229, 230, 239, 240, 242, 243, 244, 246, 247, 256, 262, 263, 264, 266, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 287, 288, 291, 292, 293, 295, 297, 298, 299, 301, 304, 305, 308, 309, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 327, 330, 331, 332, 334, 335, 337, 341, 354, 360, 371, 376, 377, 378, 379, 381, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 405, 407, 408, 409, 410, 413, 414, 415, 418, 420, 421, 422, 424, 425, 426, 427, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 452, 453, 456, 459, 460, 461, 462, 463, 464, 466, 467, 468, 470, 471, 472, 473, 474, 477, 478, 479, 480, 482, 483, 484, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 502, 503, 506, 508, 509, 510, 518, 521, 523, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 538, 540, 542, 546, 549, 551, 553, 554, 555, 561, 562, 568, 570, 571, 572, 573, 574, 577, 578, 579, 580, 585, 589, 596, 610, 617, 622, 623, 628, 629, 631, 632, 639, 640, 641, 642, 644, 645, 648, 650, 655, 656, 661, 662, 663, 666, 669, 670, 675, 679, 680, 682, 683, 684, 686, 687, 694, 698, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 717, 720, 721, 724, 725, 726, 728, 730, 731, 732, 734, 738, 741, 743, 744, 745, 746, 750, 751, 754, 755, 756, 758, 759, 764, 765, 766, 767, 769, 770, 773, 777, 794, 800, 811, 817, 818, 819, 820, 823, 824, 825, 828, 830, 831, 832, 833, 834, 836, 837, 839, 841, 842, 844, 845, 847, 848, 849, 850, 854, 859, 864, 865, 866, 868, 869, 871, 873, 874, 875, 876, 877, 880, 881, 882, 883, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 901, 902, 903, 904, 907, 908, 912, 913, 914, 915, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 932, 935, 937, 938, 941, 943, 944, 945, 953, 959, 960, 961, 962, 963, 964, 972, 973, 976, 978, 980, 981, 989, 997], "within": [2, 47, 122, 123, 161, 162, 176, 229, 256, 483, 596, 628, 629, 634, 694, 996], "fix": [2, 108, 125, 127, 373, 460, 461, 462, 463, 464, 466, 467, 468, 596, 813], "size": [2, 13, 35, 104, 105, 125, 126, 127, 129, 131, 148, 161, 227, 256, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 543, 579, 580, 596, 628, 659, 694, 817, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 989, 997], "length": [2, 12, 73, 74, 102, 115, 125, 133, 161, 162, 208, 256, 302, 307, 331, 363, 370, 433, 459, 460, 461, 462, 463, 464, 466, 467, 468, 481, 498, 500, 504, 506, 518, 543, 578, 579, 580, 596, 628, 629, 647, 660, 694, 735, 740, 752, 764, 765, 773, 803, 810, 858, 875, 881, 889, 890, 891, 892, 893, 894, 896, 897, 898, 916, 933, 935, 939, 941, 953, 989], "method": [2, 3, 4, 5, 8, 27, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 73, 92, 104, 105, 108, 124, 134, 146, 160, 168, 173, 186, 192, 198, 199, 225, 233, 248, 256, 263, 266, 267, 366, 369, 376, 383, 390, 392, 393, 398, 414, 421, 437, 439, 443, 445, 449, 452, 453, 460, 461, 462, 463, 464, 466, 467, 468, 521, 531, 533, 538, 550, 575, 576, 582, 590, 592, 596, 597, 598, 601, 602, 603, 604, 607, 617, 632, 648, 667, 672, 688, 694, 703, 806, 809, 823, 836, 882, 883, 894, 973, 983, 985, 989, 990, 993, 994, 995], "attribut": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 57, 58, 59, 60, 61, 62, 63, 64, 124, 256, 590, 592, 597, 598, 602, 603, 604, 694, 983, 985, 990, 993, 994, 995], "A": [5, 28, 31, 50, 53, 72, 75, 98, 104, 105, 106, 113, 115, 131, 132, 155, 161, 176, 190, 199, 215, 227, 228, 229, 233, 256, 262, 307, 337, 342, 345, 349, 351, 353, 358, 365, 376, 383, 392, 393, 401, 404, 405, 407, 414, 421, 422, 423, 433, 443, 450, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 487, 488, 493, 494, 496, 502, 503, 518, 522, 548, 559, 563, 596, 628, 634, 650, 669, 672, 694, 773, 778, 781, 788, 790, 793, 798, 805, 823, 889, 890, 891, 893, 896, 897, 898, 922, 923, 928, 929, 931, 937, 938, 953, 989, 996], "encod": [5, 64, 104, 105, 115, 311, 489, 743, 924], "set": [5, 6, 7, 8, 9, 10, 12, 14, 15, 18, 23, 24, 26, 28, 30, 31, 32, 33, 34, 65, 66, 70, 75, 92, 94, 97, 99, 102, 104, 105, 108, 109, 113, 115, 117, 118, 119, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 141, 146, 160, 163, 173, 176, 182, 200, 202, 208, 217, 224, 225, 227, 233, 256, 270, 302, 306, 307, 373, 394, 403, 424, 448, 459, 460, 461, 462, 463, 464, 466, 467, 468, 470, 476, 480, 481, 499, 505, 506, 511, 512, 513, 514, 516, 543, 578, 579, 580, 584, 589, 596, 615, 617, 619, 627, 633, 634, 638, 642, 653, 658, 659, 660, 667, 672, 675, 678, 694, 702, 703, 735, 739, 740, 813, 831, 844, 864, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 904, 911, 915, 916, 934, 940, 941, 946, 947, 948, 949, 951, 971, 989, 997], "string": [5, 7, 9, 12, 13, 14, 18, 28, 31, 33, 34, 38, 50, 56, 64, 75, 76, 98, 104, 105, 115, 124, 125, 126, 129, 132, 138, 155, 159, 160, 161, 162, 176, 202, 209, 218, 223, 227, 229, 233, 236, 256, 263, 294, 313, 318, 359, 363, 366, 369, 370, 382, 388, 399, 424, 446, 448, 460, 461, 462, 463, 464, 466, 467, 468, 483, 486, 487, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 518, 539, 540, 544, 546, 548, 549, 555, 563, 570, 573, 584, 585, 596, 610, 619, 626, 627, 628, 629, 634, 653, 661, 666, 672, 675, 676, 694, 727, 745, 750, 799, 803, 806, 809, 810, 822, 837, 920, 921, 922, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 969, 989, 997], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 626, 649, 694], "activ": [6, 10, 16, 17, 19, 20, 21, 22, 25, 289, 494, 722, 929], "bool": [6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 33, 35, 65, 70, 72, 73, 76, 91, 92, 96, 98, 102, 104, 105, 109, 113, 115, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 136, 138, 139, 140, 152, 153, 155, 156, 158, 159, 160, 161, 166, 167, 169, 170, 171, 176, 188, 190, 200, 203, 207, 209, 215, 219, 220, 223, 224, 225, 226, 229, 231, 233, 240, 242, 243, 246, 256, 266, 267, 268, 269, 270, 280, 286, 287, 289, 303, 306, 308, 311, 317, 326, 327, 328, 329, 330, 331, 346, 362, 364, 375, 376, 377, 378, 379, 392, 393, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 414, 421, 422, 428, 429, 430, 431, 443, 445, 453, 455, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 472, 474, 475, 480, 482, 483, 487, 489, 491, 501, 502, 503, 507, 508, 510, 512, 513, 514, 516, 520, 532, 535, 538, 539, 540, 541, 543, 544, 550, 553, 568, 578, 582, 584, 596, 610, 612, 614, 619, 621, 623, 624, 627, 628, 633, 634, 638, 642, 647, 654, 657, 658, 659, 661, 666, 667, 668, 672, 680, 682, 683, 686, 694, 700, 701, 702, 703, 712, 719, 720, 722, 736, 739, 741, 743, 748, 753, 760, 761, 762, 763, 764, 765, 782, 802, 804, 816, 818, 819, 820, 826, 830, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 878, 879, 881, 883, 884, 885, 886, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 902, 904, 905, 910, 915, 917, 922, 924, 926, 936, 937, 938, 942, 943, 945, 947, 948, 949, 951, 970, 971, 972, 975, 978, 980, 989, 996], "decim": [6, 28, 31, 256, 469, 596, 899, 989], "temporari": 6, "remov": [6, 8, 144, 228, 256, 270, 380, 423, 499, 505, 511, 512, 560, 567, 575, 582, 596, 616, 669, 694, 934, 940, 946, 947], "later": 6, "onc": [6, 53, 104, 105, 108, 131, 136, 137, 200, 236, 256, 270, 316, 470, 596, 611, 676, 694, 703, 900, 989], "stabil": 6, "happen": 6, "being": [6, 74, 104, 105, 115, 120, 227, 228, 256, 270, 331, 363, 460, 461, 462, 463, 464, 466, 467, 468, 559, 596, 669, 694, 764, 803, 833, 881, 989, 997], "consid": [6, 74, 104, 105, 115, 120, 137, 146, 156, 182, 225, 227, 228, 256, 270, 320, 321, 322, 331, 363, 460, 461, 462, 463, 464, 466, 467, 468, 553, 562, 596, 617, 630, 637, 642, 667, 669, 694, 703, 754, 755, 756, 764, 803, 833, 846, 881, 902, 903, 904, 989], "break": [6, 74, 120, 227, 228, 256, 270, 331, 363, 460, 461, 462, 463, 464, 466, 467, 468, 596, 669, 694, 764, 803, 833, 881, 989], "chang": [6, 26, 65, 74, 104, 105, 120, 227, 228, 229, 256, 270, 331, 332, 363, 447, 460, 461, 462, 463, 464, 466, 467, 468, 596, 669, 694, 764, 803, 833, 877, 881, 910, 989], "current": [6, 9, 26, 52, 92, 98, 106, 136, 139, 140, 256, 307, 363, 447, 596, 607, 612, 613, 694, 753, 757, 803, 877, 989, 996], "alpha": [6, 72, 270, 377, 378, 379, 596, 614, 619, 621, 647, 657, 694, 818, 819, 820, 989], "state": [6, 8, 72, 84, 553, 607, 614, 619, 621, 647, 657, 694], "cfg": [7, 8, 9, 15, 134], "previous": 7, "save": [7, 362, 607, 802], "share": [7, 56, 148, 256, 817, 989], "option": [7, 8, 9, 26, 30, 31, 39, 65, 75, 104, 107, 108, 109, 113, 116, 117, 119, 121, 124, 125, 126, 127, 128, 129, 130, 172, 176, 182, 215, 219, 224, 256, 412, 459, 460, 461, 462, 463, 464, 466, 467, 468, 480, 506, 568, 584, 589, 596, 607, 633, 634, 642, 694, 853, 857, 889, 890, 891, 892, 893, 894, 896, 897, 898, 915, 941, 968, 989], "json": [7, 9, 33, 34, 111, 112, 118, 256, 495, 496, 607, 626, 649, 675, 694, 930, 931], "produc": [7, 126, 127, 129, 287, 432, 569, 638, 694, 720], "reset": [8, 134], "default": [8, 13, 26, 27, 28, 30, 31, 32, 33, 34, 35, 65, 70, 73, 75, 91, 93, 94, 95, 96, 97, 98, 99, 102, 104, 105, 108, 113, 115, 124, 125, 126, 127, 128, 129, 132, 133, 146, 148, 160, 162, 163, 173, 176, 182, 188, 190, 198, 199, 200, 210, 217, 225, 227, 230, 234, 256, 302, 306, 307, 318, 362, 375, 377, 378, 379, 394, 417, 424, 441, 442, 447, 453, 470, 476, 485, 493, 499, 501, 505, 506, 511, 512, 513, 514, 516, 536, 543, 550, 564, 568, 575, 578, 582, 583, 584, 588, 596, 617, 619, 627, 629, 634, 642, 659, 662, 667, 670, 675, 694, 735, 739, 740, 750, 802, 816, 817, 818, 819, 820, 831, 864, 873, 874, 877, 883, 900, 911, 919, 922, 928, 934, 936, 940, 941, 946, 947, 948, 949, 951, 979, 989, 997], "note": [8, 18, 30, 31, 39, 50, 54, 55, 65, 75, 91, 92, 93, 95, 97, 98, 102, 104, 106, 107, 113, 115, 116, 125, 127, 129, 131, 133, 134, 136, 137, 142, 151, 161, 162, 172, 173, 175, 176, 186, 189, 198, 199, 216, 219, 224, 228, 229, 233, 256, 270, 289, 306, 329, 330, 334, 335, 355, 356, 359, 363, 370, 399, 405, 407, 460, 461, 462, 463, 464, 466, 467, 468, 480, 487, 493, 494, 497, 499, 500, 502, 505, 511, 512, 523, 531, 553, 562, 577, 578, 589, 596, 614, 621, 622, 628, 629, 630, 634, 637, 650, 657, 669, 672, 694, 703, 722, 739, 762, 763, 795, 796, 799, 810, 903, 904, 910, 915, 922, 928, 929, 932, 934, 935, 937, 940, 946, 947, 959, 989, 996], "oper": [8, 31, 56, 73, 81, 82, 91, 93, 94, 95, 96, 97, 104, 113, 137, 150, 155, 160, 167, 177, 183, 186, 188, 189, 193, 214, 219, 220, 224, 227, 235, 236, 256, 263, 264, 267, 307, 326, 327, 328, 329, 330, 331, 376, 390, 392, 393, 411, 414, 421, 435, 437, 439, 443, 445, 449, 455, 521, 531, 538, 539, 540, 548, 549, 559, 596, 621, 627, 630, 633, 637, 642, 643, 676, 694, 702, 760, 761, 762, 763, 764, 885, 966, 970, 971, 972, 980, 989], "from": [8, 28, 31, 50, 51, 52, 65, 73, 75, 91, 92, 93, 94, 95, 96, 97, 98, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 143, 144, 148, 150, 159, 161, 162, 173, 174, 176, 177, 182, 194, 198, 200, 202, 224, 225, 227, 229, 256, 307, 326, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 380, 398, 412, 441, 442, 447, 448, 470, 483, 493, 494, 495, 501, 512, 513, 514, 516, 533, 535, 546, 556, 557, 558, 578, 582, 583, 587, 595, 596, 616, 621, 626, 628, 629, 634, 642, 649, 650, 653, 667, 673, 694, 702, 740, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 853, 857, 873, 874, 875, 877, 900, 928, 929, 930, 936, 947, 948, 949, 951, 978, 981, 989, 996, 997], "environ": [8, 26, 128, 131], "local": [8, 30, 107, 116, 129, 256, 362, 775, 776, 802, 807, 878, 879, 989], "non": [8, 31, 39, 65, 96, 174, 182, 202, 228, 233, 256, 307, 399, 447, 459, 460, 461, 462, 463, 464, 466, 467, 468, 488, 494, 539, 540, 546, 548, 549, 555, 570, 573, 579, 580, 584, 585, 596, 642, 653, 669, 672, 694, 740, 837, 877, 889, 890, 891, 892, 893, 894, 896, 897, 898, 923, 929, 971, 989], "env": [8, 130], "back": [8, 65, 150, 220, 256, 446, 596, 702, 972, 989], "exampl": [8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 105, 106, 107, 108, 115, 116, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 581, 582, 583, 584, 585, 586, 588, 589, 596, 607, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 699, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 721, 722, 723, 726, 727, 729, 734, 735, 736, 738, 740, 747, 748, 750, 751, 752, 753, 754, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 823, 824, 825, 826, 828, 831, 832, 833, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 858, 863, 864, 865, 866, 867, 868, 869, 870, 871, 877, 878, 879, 881, 882, 883, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 911, 912, 913, 914, 916, 917, 919, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 943, 944, 945, 946, 947, 948, 949, 951, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 989, 996], "ascii": [10, 18, 498, 500, 504, 518, 933, 935, 939, 953], "charact": [10, 12, 18, 24, 28, 104, 105, 115, 256, 359, 492, 494, 497, 498, 499, 504, 505, 507, 508, 511, 518, 647, 694, 799, 927, 929, 932, 933, 934, 939, 940, 942, 943, 946, 953], "displai": [10, 11, 12, 15, 17, 21, 23, 31, 256], "tabl": [10, 14, 15, 17, 18, 19, 20, 21, 23, 24, 29, 30, 31, 51, 52, 53, 55, 91, 98, 104, 105, 107, 115, 116, 190, 214, 220, 227, 228, 256, 669, 694, 972, 989, 996], "outlin": 10, "fals": [10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 30, 31, 33, 35, 50, 65, 70, 72, 75, 92, 96, 98, 102, 104, 105, 108, 109, 113, 115, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 136, 138, 139, 140, 143, 155, 156, 158, 159, 160, 161, 166, 167, 169, 170, 171, 173, 176, 177, 180, 185, 186, 188, 190, 191, 198, 199, 200, 203, 207, 209, 215, 219, 220, 223, 224, 225, 229, 231, 233, 239, 240, 242, 243, 244, 246, 249, 256, 266, 267, 268, 270, 280, 286, 289, 303, 306, 308, 326, 327, 328, 329, 330, 331, 346, 362, 364, 375, 376, 377, 378, 379, 392, 393, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 414, 421, 422, 443, 445, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 472, 475, 480, 482, 483, 487, 491, 495, 501, 502, 503, 507, 508, 510, 512, 513, 514, 532, 535, 538, 539, 540, 543, 544, 550, 553, 568, 578, 582, 584, 589, 596, 610, 612, 613, 614, 619, 621, 627, 628, 633, 634, 636, 638, 647, 654, 657, 658, 659, 661, 666, 667, 672, 679, 680, 682, 683, 684, 686, 689, 694, 702, 712, 722, 736, 739, 741, 748, 752, 753, 760, 761, 762, 763, 764, 765, 782, 802, 804, 816, 818, 819, 820, 826, 837, 838, 839, 841, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 857, 870, 878, 879, 881, 883, 884, 886, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 902, 905, 910, 915, 917, 922, 926, 930, 936, 937, 938, 942, 943, 945, 947, 948, 949, 970, 971, 972, 975, 978, 980, 981, 989, 996], "revert": 10, "abc": [10, 16, 17, 18, 19, 20, 21, 22, 23, 263, 494, 502, 596, 929, 937], "xyz": [10, 16, 17, 18, 19, 20, 21, 22, 23, 263, 488, 494, 596, 923, 929, 968, 989], "f64": [10, 14, 16, 17, 19, 20, 21, 22, 23, 50, 65, 67, 69, 74, 94, 120, 127, 139, 140, 142, 143, 144, 147, 151, 152, 155, 158, 159, 160, 167, 175, 176, 180, 181, 190, 191, 192, 208, 209, 210, 230, 233, 236, 240, 242, 243, 244, 245, 246, 248, 249, 256, 262, 272, 273, 274, 275, 276, 277, 298, 317, 319, 323, 324, 331, 334, 335, 364, 375, 376, 377, 378, 379, 380, 381, 389, 390, 392, 393, 398, 405, 407, 408, 409, 411, 412, 414, 417, 418, 419, 421, 425, 426, 427, 436, 439, 441, 442, 443, 447, 449, 452, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 478, 479, 480, 484, 485, 527, 528, 531, 536, 545, 546, 548, 550, 552, 560, 571, 572, 575, 582, 583, 588, 596, 612, 616, 622, 623, 627, 633, 634, 640, 641, 648, 661, 662, 670, 672, 673, 676, 680, 682, 683, 684, 685, 686, 688, 689, 694, 704, 705, 706, 707, 708, 709, 751, 758, 759, 764, 765, 766, 804, 819, 820, 824, 828, 833, 877, 881, 889, 891, 892, 894, 895, 896, 898, 899, 913, 914, 918, 963, 964, 977, 989, 997], "fmt": [11, 397, 563, 596, 631, 694], "floatfmt": 11, "mix": [11, 512, 514, 766, 947, 949, 989], "control": [11, 31, 55, 73, 125, 256, 619, 694], "how": [11, 30, 31, 56, 65, 73, 76, 94, 97, 106, 146, 175, 227, 228, 256, 287, 288, 318, 332, 398, 446, 456, 589, 596, 617, 633, 669, 694, 720, 721, 750, 767, 989], "float": [11, 31, 41, 42, 74, 120, 122, 123, 124, 127, 129, 143, 148, 151, 176, 192, 200, 206, 248, 256, 286, 287, 319, 320, 321, 322, 334, 335, 364, 375, 376, 377, 378, 379, 384, 389, 392, 393, 398, 401, 404, 405, 407, 408, 409, 414, 417, 421, 425, 436, 441, 442, 443, 449, 452, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 474, 531, 545, 571, 572, 576, 578, 583, 585, 588, 596, 622, 634, 648, 656, 657, 688, 694, 719, 720, 748, 751, 754, 755, 756, 765, 766, 768, 804, 816, 817, 818, 819, 820, 824, 828, 833, 843, 857, 860, 866, 867, 873, 874, 880, 881, 882, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 903, 904, 915, 919, 959, 979, 989, 997], "point": [11, 31, 41, 42, 127, 129, 151, 161, 177, 256, 319, 334, 335, 364, 384, 389, 405, 407, 469, 470, 596, 622, 628, 638, 650, 694, 751, 804, 824, 828, 843, 899, 900, 989], "full": [11, 38, 65, 71, 73, 104, 105, 107, 115, 116, 512, 513, 514, 516, 638, 694, 947, 948, 949, 951], "format": [11, 14, 18, 28, 31, 103, 104, 105, 115, 120, 149, 159, 173, 182, 199, 216, 254, 256, 363, 366, 369, 501, 512, 513, 514, 516, 540, 620, 626, 642, 675, 694, 806, 809, 936, 947, 948, 949, 951, 988], "number": [11, 12, 13, 15, 23, 24, 28, 31, 35, 65, 85, 91, 93, 95, 97, 101, 104, 105, 108, 115, 118, 125, 127, 128, 130, 131, 138, 139, 148, 149, 151, 152, 164, 173, 174, 177, 178, 185, 186, 200, 205, 206, 210, 212, 223, 227, 230, 239, 241, 250, 256, 281, 288, 293, 301, 305, 307, 309, 315, 325, 331, 332, 344, 347, 352, 354, 364, 371, 372, 374, 377, 378, 379, 383, 385, 391, 395, 405, 407, 415, 416, 448, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 473, 474, 476, 485, 497, 500, 502, 508, 509, 524, 530, 536, 550, 551, 566, 575, 579, 580, 582, 583, 586, 588, 596, 610, 612, 620, 621, 622, 623, 630, 637, 647, 655, 656, 659, 662, 664, 666, 670, 679, 681, 690, 694, 721, 726, 734, 738, 740, 747, 753, 764, 767, 780, 783, 792, 794, 804, 811, 812, 814, 817, 818, 819, 820, 823, 825, 832, 843, 859, 870, 871, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 907, 908, 911, 919, 932, 935, 937, 943, 944, 960, 974, 979, 989, 997], "plai": [12, 549], "sam": 12, "As": [12, 91, 93, 94, 95, 97, 108, 256, 694], "time": [12, 30, 38, 40, 50, 55, 71, 72, 75, 115, 132, 150, 161, 162, 176, 229, 256, 285, 286, 287, 307, 315, 336, 337, 338, 343, 359, 362, 366, 368, 369, 373, 512, 514, 516, 529, 530, 548, 549, 558, 564, 596, 614, 628, 629, 634, 647, 694, 702, 718, 720, 747, 772, 773, 774, 779, 799, 802, 806, 808, 809, 813, 947, 949, 951, 973, 974, 989, 997], "goe": 12, "By": [12, 13, 65, 104, 105, 108, 115, 176, 210, 230, 256, 485, 501, 536, 550, 568, 575, 582, 583, 588, 596, 634, 662, 670, 694, 919, 936, 971, 979, 989], "begin": [12, 377, 378, 379, 493, 596, 818, 819, 820, 928, 989], "beauti": 12, "friendship": 12, "len": [12, 31, 74, 125, 127, 174, 256, 326, 457, 498, 504, 518, 596, 765, 881, 887, 933, 939, 953, 989], "u32": [12, 50, 70, 161, 187, 234, 239, 247, 249, 256, 264, 271, 278, 279, 280, 281, 282, 283, 284, 287, 296, 325, 326, 341, 344, 348, 352, 354, 360, 361, 364, 371, 372, 415, 424, 440, 444, 453, 471, 488, 497, 500, 529, 533, 542, 544, 551, 574, 596, 628, 645, 674, 679, 687, 689, 694, 712, 713, 714, 729, 748, 777, 780, 787, 789, 792, 794, 797, 800, 801, 804, 811, 812, 833, 883, 923, 932, 935, 973, 976, 978, 989], "37": 12, "beaut": 12, "48": [12, 162, 256, 629, 694], "fmt_str_length": 12, "50": [12, 31, 150, 256, 320, 321, 322, 363, 370, 596, 754, 810, 989], "print": [12, 15, 17, 18, 23, 105, 121, 147, 159, 160, 174, 177, 218, 235, 256, 397, 558, 596, 631, 694, 844, 889, 969, 989, 997], "overwrit": [13, 29, 30, 91, 93, 94, 95, 97, 104, 105, 115, 136, 256, 621, 694], "chunk": [13, 101, 104, 105, 113, 115, 117, 118, 119, 127, 129, 150, 174, 185, 256, 269, 454, 596, 659, 694, 702, 752, 829, 870, 884, 966, 989], "stream": [13, 32, 72, 160, 225, 256, 614, 619, 621, 627, 638, 642, 647, 657, 658, 659, 667, 694], "engin": [13, 29, 106, 131, 137, 160, 225, 238, 256, 627, 638, 642, 667, 678, 694, 703, 989], "determin": [13, 31, 63, 65, 73, 94, 97, 102, 104, 105, 108, 113, 115, 119, 133, 137, 155, 161, 162, 173, 174, 224, 229, 256, 307, 318, 346, 362, 424, 432, 456, 460, 461, 462, 463, 464, 466, 467, 468, 480, 578, 596, 628, 629, 694, 740, 750, 782, 802, 833, 864, 915, 989], "schema": [13, 30, 50, 56, 66, 67, 68, 73, 76, 86, 87, 89, 91, 93, 94, 95, 97, 98, 104, 105, 110, 114, 115, 118, 125, 127, 137, 139, 140, 147, 148, 183, 186, 219, 256, 307, 432, 538, 584, 596, 612, 613, 618, 638, 643, 675, 678, 694, 757, 989], "thread": [13, 28, 101, 104, 105, 106, 131, 256, 270, 289, 596, 722], "pool": [13, 131], "For": [13, 30, 31, 106, 107, 108, 116, 150, 162, 175, 176, 238, 256, 307, 317, 377, 378, 379, 433, 455, 480, 487, 493, 494, 502, 553, 562, 563, 596, 629, 634, 678, 694, 702, 818, 819, 820, 885, 915, 922, 928, 929, 937, 971, 989], "some": [13, 26, 30, 31, 94, 104, 105, 115, 146, 256, 617, 694, 844, 989, 997], "dataset": [13, 104, 105, 115, 120, 412, 596, 607, 638, 694, 857, 989], "esp": 13, "when": [13, 15, 17, 21, 31, 35, 55, 56, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 99, 104, 105, 106, 109, 113, 115, 116, 117, 118, 127, 129, 137, 138, 147, 148, 150, 152, 155, 161, 189, 198, 202, 209, 217, 223, 225, 256, 307, 320, 321, 322, 362, 377, 378, 379, 385, 422, 424, 433, 448, 482, 483, 499, 505, 511, 512, 544, 553, 562, 596, 610, 623, 628, 638, 653, 659, 661, 666, 667, 694, 702, 754, 755, 756, 802, 817, 818, 819, 820, 825, 864, 903, 904, 934, 940, 946, 947, 967, 989], "have": [13, 26, 31, 65, 76, 92, 104, 105, 108, 127, 129, 150, 173, 193, 199, 216, 256, 316, 331, 377, 378, 379, 433, 453, 512, 514, 596, 642, 657, 674, 694, 702, 764, 818, 819, 820, 830, 883, 947, 949, 989, 997], "larg": [13, 65, 161, 162, 176, 229, 256, 359, 363, 370, 460, 461, 462, 463, 464, 466, 467, 468, 596, 628, 629, 634, 694, 799, 803, 810], "element": [13, 23, 126, 129, 138, 172, 190, 198, 210, 223, 230, 256, 270, 272, 273, 274, 275, 276, 277, 287, 289, 290, 315, 323, 324, 326, 327, 328, 329, 330, 331, 381, 394, 403, 418, 419, 447, 453, 456, 471, 477, 478, 479, 484, 485, 508, 509, 527, 528, 530, 536, 550, 575, 579, 580, 582, 583, 588, 596, 610, 662, 666, 670, 694, 703, 704, 705, 706, 707, 708, 709, 720, 722, 723, 747, 753, 758, 759, 760, 761, 762, 763, 764, 821, 826, 832, 844, 856, 859, 861, 862, 877, 883, 901, 912, 913, 914, 918, 919, 943, 944, 960, 963, 964, 969, 974, 975, 979, 989], "too": [13, 161, 162, 176, 229, 256, 359, 363, 370, 460, 461, 462, 463, 464, 466, 467, 468, 596, 628, 629, 634, 694, 799, 803, 810], "optimist": 13, "lead": [13, 98, 120, 256, 472, 499, 511, 518, 525, 535, 550, 582, 596, 638, 678, 694, 905, 934, 946, 953, 989], "out": [13, 98, 121, 162, 256, 292, 306, 311, 401, 404, 487, 489, 589, 596, 629, 658, 659, 694, 725, 739, 743, 922, 924], "memori": [13, 73, 91, 92, 95, 96, 97, 104, 105, 109, 113, 115, 117, 118, 119, 136, 137, 150, 207, 238, 256, 454, 475, 596, 659, 678, 694, 702, 703, 884, 909, 910, 989], "error": [13, 30, 77, 104, 105, 115, 161, 162, 176, 198, 229, 256, 294, 306, 311, 317, 359, 363, 370, 411, 460, 461, 462, 463, 464, 466, 467, 468, 487, 489, 493, 495, 496, 512, 513, 514, 516, 596, 628, 629, 634, 678, 694, 727, 739, 743, 748, 799, 803, 810, 922, 924, 928, 930, 931, 947, 948, 949, 951, 989], "row": [13, 18, 23, 28, 31, 33, 35, 65, 66, 68, 73, 83, 85, 90, 94, 95, 97, 98, 104, 105, 108, 109, 113, 115, 117, 118, 119, 122, 125, 127, 137, 138, 139, 146, 150, 153, 155, 159, 161, 163, 164, 169, 171, 172, 173, 174, 176, 177, 178, 182, 186, 200, 208, 212, 213, 216, 218, 223, 225, 227, 228, 234, 238, 241, 250, 256, 270, 281, 290, 307, 382, 395, 416, 447, 457, 481, 483, 492, 524, 544, 553, 554, 562, 566, 570, 573, 577, 586, 589, 596, 610, 612, 614, 617, 621, 624, 625, 628, 630, 634, 635, 637, 638, 642, 659, 660, 664, 665, 666, 667, 669, 674, 678, 681, 690, 694, 702, 723, 822, 832, 856, 877, 887, 916, 927, 960, 989, 997], "per": [13, 28, 31, 125, 127, 138, 159, 186, 187, 209, 223, 245, 247, 248, 256, 270, 289, 292, 306, 316, 483, 544, 596, 610, 661, 666, 685, 687, 688, 694, 722, 725, 739], "everi": [13, 104, 105, 115, 161, 213, 216, 229, 256, 283, 284, 288, 290, 292, 293, 302, 305, 326, 327, 328, 329, 330, 331, 363, 370, 382, 492, 526, 553, 554, 596, 621, 628, 665, 694, 716, 717, 721, 723, 725, 726, 735, 738, 760, 761, 762, 763, 764, 803, 810, 822, 927, 962, 989], "process": [13, 28, 131, 256, 658, 659, 694], "liter": [14, 18, 30, 50, 70, 75, 102, 108, 128, 129, 130, 133, 159, 173, 179, 180, 184, 185, 188, 198, 199, 202, 211, 215, 228, 233, 256, 266, 268, 310, 337, 376, 383, 390, 392, 393, 399, 411, 414, 421, 437, 439, 443, 449, 454, 487, 502, 503, 521, 531, 539, 540, 543, 546, 548, 549, 555, 556, 557, 568, 570, 573, 578, 584, 585, 587, 596, 623, 653, 669, 672, 694, 700, 701, 742, 773, 823, 837, 903, 904, 922, 937, 938, 989, 996], "left": [14, 52, 65, 75, 122, 123, 132, 161, 162, 175, 176, 228, 256, 377, 378, 379, 398, 399, 460, 461, 462, 463, 464, 466, 467, 468, 471, 498, 518, 529, 546, 553, 554, 562, 577, 589, 596, 628, 629, 633, 634, 669, 694, 818, 819, 820, 837, 901, 933, 953, 973, 989], "center": [14, 31, 256, 377, 378, 379, 459, 460, 461, 462, 463, 464, 466, 467, 468, 596, 818, 819, 820, 889, 890, 891, 892, 893, 894, 896, 897, 898, 989], "right": [14, 16, 31, 75, 104, 105, 122, 123, 132, 161, 162, 175, 176, 256, 377, 378, 379, 399, 460, 461, 462, 463, 464, 466, 467, 468, 471, 480, 504, 546, 596, 628, 629, 633, 634, 694, 818, 819, 820, 837, 901, 915, 939, 989], "cell": 14, "align": [14, 31, 65, 73, 256, 518, 953], "keyerror": [14, 18], "recognis": [14, 18, 124], "column_abc": 14, "column_xyz": 14, "visibl": [15, 148, 256, 817, 989], "eg": [15, 23, 31, 256, 363, 512, 514, 531, 596, 947, 949], "low": [15, 131], "rang": [15, 31, 74, 75, 106, 132, 143, 148, 161, 174, 256, 341, 354, 360, 361, 363, 370, 371, 398, 543, 548, 556, 557, 587, 596, 628, 694, 765, 766, 777, 794, 800, 801, 803, 810, 811, 817, 877, 881, 989], "100": [15, 31, 94, 97, 104, 105, 115, 118, 256, 518, 543, 694, 890, 891, 893, 989, 997], "98": [15, 167, 256, 315, 482, 525, 530, 596], "99": [15, 31, 151, 152, 167, 170, 256, 264, 315, 383, 385, 482, 525, 530, 596, 622, 623, 694, 816, 823, 989], "tbl_col": 15, "10": [15, 27, 28, 30, 31, 32, 35, 50, 65, 73, 74, 75, 98, 106, 115, 127, 129, 132, 140, 150, 158, 161, 162, 164, 166, 167, 168, 185, 189, 191, 195, 196, 202, 212, 233, 236, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 256, 269, 278, 279, 280, 282, 288, 293, 301, 302, 305, 320, 325, 327, 330, 332, 334, 335, 337, 355, 356, 362, 363, 370, 373, 394, 395, 398, 403, 411, 415, 416, 418, 447, 448, 461, 481, 518, 524, 538, 546, 553, 559, 562, 564, 566, 568, 569, 575, 582, 586, 596, 614, 628, 629, 630, 632, 637, 646, 647, 653, 659, 663, 664, 672, 676, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 694, 703, 721, 726, 734, 735, 738, 754, 765, 767, 773, 802, 810, 813, 816, 832, 844, 859, 861, 877, 903, 904, 960, 989, 997], "95": [15, 264, 596], "96": [15, 264, 596], "97": [15, 167, 256, 264, 596], "move": [16, 377, 378, 379, 460, 461, 463, 467, 596, 818, 819, 820, 890, 891, 893, 897, 989], "inlin": [16, 487, 493, 494, 502, 922, 928, 929, 937], "parenthes": 16, "below": [17, 31, 107, 116, 146, 256, 398, 589, 596, 617, 694], "ascii_ful": 18, "ascii_full_condens": 18, "ascii_no_bord": 18, "ascii_borders_onli": 18, "ascii_borders_only_condens": 18, "ascii_horizontal_onli": 18, "ascii_markdown": 18, "utf8_ful": [18, 65, 98], "utf8_full_condens": [18, 98], "utf8_no_bord": 18, "utf8_borders_onli": 18, "utf8_horizontal_onli": 18, "noth": [18, 488, 493, 496, 923, 928, 931], "none": [18, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 48, 50, 52, 53, 55, 65, 74, 75, 76, 91, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 113, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 137, 139, 143, 146, 151, 152, 159, 161, 162, 163, 168, 172, 175, 176, 177, 180, 182, 186, 187, 190, 198, 200, 202, 206, 208, 209, 215, 217, 220, 224, 225, 226, 227, 228, 229, 233, 236, 256, 265, 269, 270, 282, 292, 302, 307, 309, 320, 321, 322, 325, 327, 330, 334, 335, 362, 363, 370, 377, 378, 379, 380, 383, 384, 385, 391, 394, 398, 399, 405, 406, 407, 408, 409, 415, 422, 424, 444, 447, 453, 454, 459, 460, 461, 462, 463, 464, 466, 467, 468, 470, 474, 475, 476, 477, 481, 482, 486, 487, 490, 491, 495, 496, 497, 498, 499, 500, 501, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 516, 518, 519, 520, 529, 539, 541, 543, 546, 549, 551, 557, 558, 560, 561, 568, 569, 570, 573, 578, 579, 580, 581, 583, 584, 587, 588, 589, 596, 612, 613, 617, 622, 623, 628, 629, 632, 633, 634, 636, 638, 642, 645, 653, 656, 657, 658, 659, 660, 661, 667, 668, 669, 672, 673, 675, 676, 678, 694, 703, 710, 711, 725, 735, 740, 753, 754, 765, 766, 768, 784, 785, 786, 791, 802, 803, 810, 815, 816, 818, 819, 820, 823, 824, 825, 827, 830, 831, 833, 835, 836, 837, 846, 849, 850, 853, 856, 857, 864, 865, 866, 867, 868, 872, 881, 882, 883, 889, 890, 891, 892, 893, 894, 896, 897, 898, 900, 904, 906, 908, 911, 912, 915, 916, 919, 921, 922, 925, 926, 930, 931, 932, 933, 934, 935, 936, 939, 940, 941, 943, 944, 945, 946, 947, 948, 949, 951, 965, 968, 969, 972, 973, 979, 980, 989, 996], "rounded_corn": 18, "style": [18, 31, 190, 256], "border": 18, "line": [18, 31, 104, 105, 108, 115, 159, 169, 171, 256, 493, 928], "includ": [18, 26, 28, 30, 31, 71, 107, 116, 127, 138, 143, 148, 161, 223, 224, 227, 256, 364, 399, 507, 508, 553, 596, 610, 628, 666, 694, 766, 804, 817, 837, 942, 943, 980, 989], "divid": [18, 363, 370, 377, 378, 379, 412, 596, 803, 810, 818, 819, 820, 857, 989], "same": [18, 30, 31, 54, 56, 65, 72, 73, 76, 109, 115, 125, 137, 144, 160, 209, 225, 233, 236, 238, 256, 262, 269, 370, 382, 428, 431, 446, 459, 460, 461, 462, 463, 464, 466, 467, 468, 483, 520, 547, 596, 616, 627, 638, 661, 667, 672, 676, 678, 694, 698, 702, 703, 773, 822, 889, 890, 891, 892, 893, 894, 896, 897, 898, 981, 989], "dens": [18, 159, 256, 453, 596, 883, 989], "space": 18, "horizont": [18, 73, 155, 166, 227, 256, 539, 540, 548, 549, 553, 554, 555, 559, 562, 570, 573, 577, 585], "markdown": 18, "compat": [18, 31, 35, 106, 256, 487, 488, 493, 494, 502, 503, 659, 694, 922, 923, 928, 929, 937, 938], "No": 18, "appli": [18, 28, 31, 50, 73, 115, 124, 127, 129, 155, 189, 256, 341, 344, 346, 347, 348, 350, 352, 354, 357, 360, 361, 364, 371, 372, 374, 378, 379, 422, 448, 459, 460, 461, 463, 467, 502, 512, 513, 514, 516, 538, 543, 553, 554, 562, 569, 577, 596, 630, 637, 638, 646, 694, 775, 776, 777, 780, 782, 783, 787, 789, 792, 794, 797, 800, 801, 804, 807, 811, 812, 814, 819, 820, 889, 890, 891, 893, 897, 937, 947, 948, 949, 951, 989], "round": [18, 31, 67, 98, 256, 319, 389, 527, 596, 751, 828, 989], "corner": [18, 98], "op": [18, 129, 256, 456, 596, 694, 989], "one": [18, 29, 31, 55, 65, 83, 91, 93, 94, 95, 96, 97, 128, 129, 130, 134, 152, 153, 159, 160, 161, 162, 173, 182, 190, 198, 199, 203, 222, 237, 256, 264, 307, 385, 411, 419, 459, 482, 494, 525, 585, 589, 596, 623, 624, 627, 628, 629, 642, 654, 673, 677, 694, 702, 740, 825, 853, 862, 889, 929, 954, 989], "more": [18, 31, 33, 35, 55, 65, 73, 90, 91, 92, 93, 94, 95, 96, 97, 107, 113, 116, 127, 129, 134, 137, 142, 143, 173, 177, 182, 186, 198, 199, 200, 225, 238, 256, 267, 270, 308, 320, 321, 322, 411, 412, 419, 422, 445, 470, 480, 494, 532, 585, 589, 596, 642, 659, 667, 678, 694, 703, 741, 754, 755, 756, 766, 853, 857, 900, 915, 929, 975, 989, 997], "semigraph": 18, "box": [18, 137, 256], "draw": [18, 23, 24, 126, 997], "found": [18, 28, 52, 78, 87, 89, 94, 98, 147, 228, 256, 471, 496, 512, 514, 596, 669, 694, 901, 931, 947, 949, 989, 996], "unicod": 18, "block": [18, 160, 225, 256, 627, 650, 667, 674, 694, 903, 904, 989], "http": [18, 31, 92, 106, 136, 142, 256, 493, 928], "en": [18, 31, 256], "wikipedia": 18, "org": [18, 92, 106, 136, 142, 256], "wiki": 18, "drawing_charact": 18, "box_draw": 18, "mno": 18, "tbl_format": 18, "tbl_hide_column_data_typ": 18, "tbl_hide_dataframe_shap": 18, "hide": [19, 20, 21, 22, 31, 256], "etc": [19, 30, 31, 104, 107, 109, 113, 116, 117, 119, 256, 543, 903, 904, 989], "inform": [21, 71, 107, 116, 142, 256, 320, 321, 322, 412, 480, 487, 493, 494, 502, 596, 647, 694, 754, 755, 756, 857, 915, 922, 928, 929, 937, 989], "separ": [22, 28, 99, 101, 104, 105, 115, 188, 190, 217, 224, 226, 256, 270, 290, 294, 492, 549, 553, 554, 596, 668, 694, 723, 727, 927, 958, 967, 989], "between": [22, 73, 124, 125, 127, 129, 192, 248, 256, 294, 317, 333, 399, 447, 452, 464, 486, 550, 552, 575, 576, 579, 580, 582, 596, 648, 688, 694, 727, 748, 768, 837, 877, 882, 894, 921, 989], "set_tbl_column_data_type_inlin": 22, "max": [23, 31, 35, 50, 131, 143, 152, 160, 161, 162, 190, 256, 307, 320, 321, 327, 385, 446, 453, 460, 472, 509, 596, 623, 627, 628, 629, 659, 694, 740, 754, 755, 760, 766, 825, 883, 890, 905, 944, 989], "both": [23, 28, 56, 75, 106, 132, 161, 162, 175, 176, 183, 198, 256, 269, 399, 460, 461, 462, 463, 464, 466, 467, 468, 596, 628, 629, 633, 634, 643, 694, 837, 846, 989], "tbl_row": 23, "char": [24, 56, 76, 494, 500, 929, 935], "enabl": [25, 76, 202, 233, 256, 472, 596, 653, 672, 694, 905, 989], "addit": [25, 30, 31, 94, 107, 116, 125, 144, 149, 160, 188, 202, 203, 209, 226, 233, 236, 256, 263, 380, 383, 446, 483, 487, 493, 494, 502, 539, 540, 544, 546, 547, 548, 549, 555, 560, 570, 573, 581, 584, 585, 596, 616, 620, 627, 653, 654, 661, 668, 672, 676, 694, 823, 922, 928, 929, 937, 989], "verbos": [25, 134, 494, 929], "debug": [25, 614, 621, 638, 694, 997], "log": [25, 67, 315, 375, 419, 439, 449, 530, 596, 747, 816, 974, 989], "if_set": 26, "env_onli": 26, "dict": [26, 30, 31, 35, 53, 66, 68, 71, 91, 93, 94, 95, 96, 97, 104, 105, 107, 108, 109, 110, 113, 114, 115, 116, 117, 119, 127, 173, 188, 194, 198, 199, 201, 215, 216, 256, 424, 596, 650, 652, 694, 864, 989], "show": [26, 31, 54, 146, 159, 177, 187, 256, 617, 647, 657, 694], "variabl": [26, 52, 99, 128, 131, 182, 217, 256, 642, 694, 967, 989, 996], "restrict": [26, 509, 944], "dictionari": [26, 31, 91, 93, 94, 95, 97, 104, 105, 110, 114, 115, 173, 188, 198, 199, 215, 216, 256, 424, 596, 694, 766, 864, 989], "those": [26, 31, 104, 256, 453, 493, 596, 883, 928, 989], "been": [26, 31, 74, 99, 256, 453, 596, 883, 989], "set_fmt_float": 26, "directli": [26, 52, 127, 129, 134, 377, 378, 379, 578, 596, 694, 818, 819, 820, 989, 997], "via": [26, 104, 105, 108, 115, 117, 118, 119, 173, 199, 256, 270, 596], "set_stat": 26, "all_stat": 26, "file": [27, 28, 32, 33, 34, 35, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 150, 256, 621, 649, 658, 659, 675, 694, 702, 989], "binaryio": [27, 32, 103, 104, 108, 109, 110, 113, 114, 256], "bytesio": [27, 28, 31, 32, 35, 103, 104, 105, 108, 109, 113, 256], "path": [27, 28, 30, 31, 32, 33, 34, 35, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 256, 472, 496, 596, 649, 658, 659, 675, 694, 905, 931, 989], "compress": [27, 32, 35, 256, 658, 659, 694], "avrocompress": [27, 256], "uncompress": [27, 32, 35, 109, 117, 256, 659, 694], "write": [27, 28, 29, 30, 31, 32, 33, 35, 105, 109, 256, 320, 321, 322, 596, 636, 657, 659, 675, 694, 754, 755, 756, 989], "apach": [27, 35, 103, 106, 256], "avro": [27, 103, 256, 607], "should": [27, 28, 31, 32, 33, 34, 35, 73, 91, 93, 95, 97, 99, 107, 115, 124, 125, 129, 136, 137, 144, 161, 162, 173, 176, 198, 199, 216, 217, 226, 229, 238, 256, 264, 270, 289, 318, 331, 359, 363, 370, 373, 380, 405, 407, 459, 460, 461, 462, 463, 464, 466, 467, 468, 471, 480, 547, 560, 567, 568, 579, 580, 589, 596, 616, 628, 629, 633, 634, 638, 657, 658, 659, 668, 675, 678, 694, 703, 722, 750, 764, 799, 803, 810, 813, 889, 890, 891, 892, 893, 894, 896, 897, 898, 901, 915, 989], "written": [27, 28, 31, 32, 33, 34, 35, 256, 658, 659, 675, 694], "snappi": [27, 35, 256, 659, 694], "deflat": [27, 256], "import": [27, 28, 31, 32, 35, 38, 65, 75, 91, 95, 96, 115, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 143, 159, 161, 174, 176, 219, 220, 227, 229, 256, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 558, 628, 634, 638, 694, 758, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 841, 845, 847, 848, 853, 889, 913, 963, 989, 997], "pathlib": [27, 28, 32, 35, 115, 256], "foo": [27, 28, 30, 32, 33, 34, 35, 54, 99, 137, 141, 142, 144, 145, 146, 147, 150, 153, 154, 155, 156, 157, 158, 163, 164, 165, 166, 167, 168, 170, 175, 179, 180, 181, 184, 187, 190, 192, 194, 195, 196, 198, 200, 201, 202, 204, 205, 206, 208, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 224, 225, 226, 230, 231, 232, 235, 256, 265, 286, 291, 292, 295, 296, 320, 321, 322, 359, 395, 397, 416, 457, 473, 474, 486, 488, 490, 492, 494, 499, 505, 507, 509, 511, 515, 517, 524, 526, 539, 542, 543, 545, 547, 550, 551, 552, 561, 565, 566, 570, 571, 572, 573, 574, 575, 576, 581, 582, 583, 586, 588, 589, 596, 615, 616, 617, 618, 624, 631, 632, 633, 645, 650, 652, 653, 667, 668, 671, 673, 675, 694, 727, 754, 799, 887, 923, 925, 927, 929, 944, 989], "barham": [27, 28, 30, 32, 35, 99, 141, 142, 144, 145, 146, 147, 153, 154, 156, 163, 164, 166, 175, 179, 180, 181, 184, 187, 192, 194, 196, 198, 200, 201, 202, 205, 206, 208, 210, 211, 212, 217, 218, 219, 220, 221, 225, 230, 231, 256, 547, 615, 616, 617, 618, 624, 633, 645, 650, 652, 653, 667, 673, 694], "d": [27, 28, 30, 32, 35, 56, 76, 94, 120, 143, 159, 163, 164, 167, 175, 212, 214, 227, 231, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 256, 263, 343, 366, 369, 399, 448, 475, 488, 494, 508, 512, 513, 514, 546, 564, 596, 633, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 694, 779, 806, 809, 837, 923, 929, 943, 947, 948, 949, 989], "e": [27, 28, 30, 32, 35, 56, 76, 92, 104, 105, 108, 109, 113, 117, 119, 143, 159, 161, 162, 164, 176, 212, 214, 227, 229, 256, 263, 270, 359, 363, 370, 375, 380, 399, 417, 424, 460, 461, 462, 463, 464, 466, 467, 468, 475, 480, 560, 589, 596, 628, 629, 634, 636, 650, 694, 799, 803, 810, 816, 837, 902, 915, 971, 989], "dirpath": [27, 28, 32, 35, 115, 256], "new_fil": [27, 28, 32, 35, 256], "has_head": [28, 31, 104, 105, 108, 115, 256], "quot": [28, 104, 105, 115, 256], "batch_siz": [28, 104, 105, 118, 256], "1024": [28, 104, 105, 118, 256, 659, 694], "datetime_format": [28, 256], "date_format": [28, 256], "time_format": [28, 256], "float_precis": [28, 31, 256], "null_valu": [28, 104, 105, 115, 256], "comma": [28, 256], "csv": [28, 104, 105, 108, 115, 256, 607, 658, 659, 694], "result": [28, 33, 34, 65, 73, 95, 97, 102, 106, 107, 115, 117, 119, 120, 129, 133, 150, 161, 162, 186, 206, 220, 229, 236, 256, 307, 366, 369, 377, 378, 379, 383, 412, 446, 457, 459, 460, 461, 462, 463, 464, 466, 467, 468, 472, 474, 507, 508, 514, 531, 543, 553, 554, 569, 578, 579, 580, 596, 611, 628, 629, 638, 647, 656, 658, 659, 675, 676, 694, 702, 806, 809, 818, 819, 820, 857, 887, 889, 890, 891, 892, 893, 894, 896, 897, 898, 905, 908, 942, 943, 949, 971, 989, 996, 997], "If": [28, 30, 31, 32, 33, 34, 50, 56, 70, 71, 73, 74, 75, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 105, 107, 108, 109, 113, 115, 116, 117, 118, 119, 128, 132, 133, 136, 137, 138, 146, 150, 159, 161, 162, 164, 172, 173, 176, 178, 182, 186, 199, 200, 208, 212, 216, 217, 219, 223, 224, 225, 227, 228, 256, 270, 302, 307, 320, 321, 322, 337, 355, 356, 362, 386, 412, 422, 424, 453, 455, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 476, 480, 481, 495, 497, 499, 500, 505, 506, 507, 508, 509, 511, 512, 513, 514, 516, 539, 540, 541, 543, 550, 551, 553, 555, 562, 568, 570, 573, 578, 579, 580, 582, 584, 585, 589, 596, 610, 617, 619, 628, 629, 633, 634, 638, 642, 650, 659, 660, 666, 667, 669, 675, 678, 694, 702, 703, 735, 740, 754, 755, 756, 765, 773, 795, 796, 802, 830, 832, 833, 856, 857, 859, 881, 883, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 905, 911, 915, 916, 930, 932, 934, 935, 940, 941, 942, 943, 944, 946, 947, 948, 949, 951, 960, 966, 971, 980, 989, 996], "instead": [28, 33, 34, 50, 54, 65, 70, 73, 75, 102, 104, 113, 127, 132, 133, 137, 161, 162, 173, 176, 186, 188, 198, 199, 202, 220, 229, 233, 256, 280, 359, 363, 370, 460, 461, 462, 463, 464, 466, 467, 468, 497, 499, 505, 511, 543, 570, 573, 578, 584, 596, 622, 628, 629, 634, 653, 672, 675, 694, 712, 799, 803, 810, 903, 904, 932, 934, 940, 946, 972, 989, 996], "whether": [28, 75, 95, 97, 129, 132, 203, 256, 346, 362, 364, 429, 430, 472, 596, 638, 654, 694, 782, 802, 804, 996], "header": [28, 31, 35, 98, 104, 105, 108, 115, 147, 190, 224, 256, 659, 694], "field": [28, 57, 87, 89, 94, 219, 226, 256, 307, 424, 494, 495, 508, 509, 520, 553, 554, 569, 584, 596, 668, 694, 740, 943, 944, 956, 958], "symbol": [28, 256], "byte": [28, 104, 105, 108, 109, 110, 113, 114, 115, 148, 256, 310, 313, 314, 497, 500, 659, 694, 742, 745, 746, 817, 932, 935, 989], "specifi": [28, 31, 65, 75, 78, 87, 89, 108, 127, 138, 144, 148, 149, 152, 160, 188, 198, 202, 203, 209, 223, 226, 233, 236, 256, 377, 378, 379, 380, 385, 424, 446, 456, 483, 498, 504, 539, 540, 544, 546, 547, 548, 549, 555, 560, 570, 573, 581, 584, 585, 596, 610, 616, 620, 623, 627, 653, 654, 661, 666, 668, 672, 676, 694, 817, 818, 819, 820, 825, 933, 939, 989], "defin": [28, 31, 38, 75, 124, 125, 127, 132, 137, 161, 162, 186, 189, 238, 256, 270, 306, 399, 448, 460, 461, 462, 463, 464, 466, 467, 468, 541, 568, 584, 596, 628, 629, 646, 678, 694, 703, 739, 837, 989], "chrono": [28, 256, 366, 369, 512, 513, 514, 516, 806, 809, 947, 948, 949, 951], "rust": [28, 35, 84, 109, 113, 137, 238, 256, 678, 703, 989], "crate": [28, 256, 487, 488, 493, 494, 502, 503, 512, 513, 514, 516, 922, 923, 928, 929, 937, 938, 947, 948, 949, 951], "fraction": [28, 122, 123, 200, 256, 364, 447, 470, 512, 514, 596, 804, 877, 900, 947, 949, 989], "second": [28, 75, 126, 132, 161, 162, 176, 229, 256, 359, 363, 370, 460, 461, 462, 463, 464, 466, 467, 468, 512, 514, 557, 558, 587, 589, 596, 628, 629, 634, 694, 799, 803, 810, 947, 949, 997], "precis": [28, 31, 39, 173, 199, 216, 256, 336, 772], "infer": [28, 91, 93, 94, 95, 96, 97, 104, 105, 108, 115, 118, 137, 256, 457, 495, 512, 513, 514, 516, 578, 596, 694, 887, 930, 947, 948, 949, 951, 989], "maximum": [28, 104, 105, 115, 125, 126, 127, 129, 179, 256, 283, 425, 441, 453, 570, 596, 639, 694, 716, 754, 784, 865, 873, 878, 883, 989], "timeunit": [28, 38, 40, 75, 256, 336, 337, 368, 373, 514, 772, 773, 808, 813, 949], "frame": [28, 29, 31, 50, 51, 52, 53, 54, 55, 65, 73, 94, 122, 127, 137, 139, 173, 174, 183, 186, 189, 198, 199, 220, 227, 256, 612, 643, 646, 694, 753, 989, 996, 997], "datetim": [28, 31, 65, 75, 98, 127, 132, 143, 159, 161, 162, 174, 176, 229, 256, 286, 287, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 460, 461, 462, 463, 464, 466, 467, 468, 512, 514, 529, 558, 564, 568, 596, 628, 629, 634, 694, 719, 720, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 853, 873, 874, 904, 947, 949, 973, 989], "place": [28, 138, 145, 166, 167, 195, 205, 206, 209, 223, 231, 256, 280, 294, 301, 473, 474, 482, 596, 610, 655, 656, 661, 666, 694, 712, 727, 734, 884, 886, 907, 908, 917, 989], "float64": [28, 31, 94, 102, 104, 127, 133, 147, 148, 155, 201, 220, 233, 256, 272, 273, 274, 275, 276, 277, 317, 323, 324, 364, 380, 405, 407, 478, 479, 527, 528, 547, 560, 578, 596, 618, 652, 672, 694, 804, 972, 977, 989], "repres": [28, 48, 63, 75, 91, 93, 95, 96, 97, 132, 210, 230, 256, 405, 407, 485, 536, 539, 547, 550, 560, 568, 575, 579, 580, 582, 583, 588, 596, 662, 670, 694, 904, 919, 979, 989], "empti": [28, 82, 94, 104, 105, 108, 115, 139, 140, 170, 182, 256, 568, 581, 612, 613, 642, 694, 753, 757, 840, 989], "table_nam": [29, 31, 256], "connection_uri": [29, 106, 256], "if_exist": [29, 256], "dbwritemod": [29, 256], "fail": [29, 30, 92, 107, 109, 116, 136, 225, 256, 281, 307, 512, 513, 514, 516, 596, 667, 694, 703, 947, 948, 949, 951, 989], "dbwriteengin": [29, 256], "sqlalchemi": [29, 256], "databas": [29, 106, 256, 607], "append": [29, 30, 127, 150, 175, 176, 256, 454, 589, 596, 633, 634, 694, 989], "creat": [29, 31, 74, 75, 91, 95, 97, 116, 125, 126, 127, 128, 129, 130, 132, 139, 140, 161, 162, 187, 190, 229, 233, 256, 307, 337, 363, 370, 454, 506, 535, 543, 548, 556, 557, 558, 587, 596, 612, 613, 619, 628, 629, 672, 694, 753, 757, 765, 770, 773, 803, 810, 875, 881, 884, 941, 971, 989, 996, 997], "connect": [29, 104, 106, 109, 113, 117, 119, 120, 256, 608], "uri": [29, 30, 106, 107, 116, 256], "postgresql": [29, 106, 256, 446, 596], "usernam": [29, 104, 106, 109, 113, 117, 119, 256], "password": [29, 104, 106, 109, 113, 117, 119, 256], "server": [29, 106, 256], "port": [29, 104, 106, 109, 113, 117, 119, 256], "replac": [29, 30, 104, 105, 115, 151, 152, 196, 224, 233, 256, 337, 362, 424, 503, 596, 622, 672, 694, 773, 802, 864, 903, 904, 938, 989], "insert": [29, 104, 105, 109, 113, 115, 117, 118, 119, 167, 195, 224, 226, 256, 471, 486, 518, 596, 668, 694, 901, 921, 953, 989], "mode": [29, 30, 50, 102, 133, 256, 494, 578, 596, 694, 929, 989, 996], "new": [29, 30, 31, 115, 134, 137, 146, 166, 167, 186, 187, 194, 195, 213, 226, 227, 233, 256, 265, 337, 382, 398, 423, 502, 503, 508, 509, 519, 520, 526, 596, 607, 617, 650, 665, 668, 672, 678, 694, 699, 770, 773, 822, 875, 886, 937, 938, 943, 944, 954, 956, 962, 968, 981, 989, 996], "alreadi": [29, 30, 256, 289, 331, 596, 722, 764, 989], "adbc": [29, 106, 256], "deltalak": [30, 107, 116, 121, 256], "deltat": [30, 256], "ignor": [30, 126, 127, 129, 180, 211, 256, 288, 332, 362, 377, 378, 379, 441, 442, 596, 721, 767, 802, 818, 819, 820, 873, 874, 989], "overwrite_schema": [30, 256], "storage_opt": [30, 104, 107, 109, 113, 116, 117, 119, 256], "delta_write_opt": [30, 256], "delta": [30, 40, 107, 116, 210, 230, 256, 485, 536, 550, 575, 579, 580, 582, 583, 588, 596, 607, 662, 670, 694, 919, 979, 989], "like": [30, 75, 92, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 132, 169, 171, 175, 256, 289, 435, 453, 493, 585, 596, 621, 649, 694, 722, 883, 928, 989], "categor": [30, 56, 76, 99, 175, 217, 218, 256, 318, 424, 529, 596, 749, 750, 973, 989], "protocol": [30, 92, 106, 136, 256], "object": [30, 31, 32, 35, 55, 73, 75, 92, 93, 98, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 116, 125, 127, 129, 132, 136, 160, 161, 162, 177, 219, 220, 256, 568, 607, 613, 628, 629, 631, 636, 649, 694, 715, 749, 771, 920, 966, 989, 996], "handl": [30, 73, 98, 104, 105, 115, 120, 256, 288, 332, 518, 596, 721, 767, 953, 989], "throw": [30, 92, 256, 317, 495, 496, 596, 748, 930, 931, 989], "add": [30, 31, 105, 137, 150, 161, 233, 234, 256, 450, 522, 558, 562, 589, 596, 628, 633, 672, 673, 674, 694, 702, 989], "anyth": [30, 198, 256, 494, 929], "updat": [30, 256, 694], "extra": [30, 35, 104, 107, 108, 109, 113, 116, 117, 119, 150, 256, 659, 694, 702, 989], "storag": [30, 104, 107, 109, 113, 116, 117, 119, 256], "backend": [30, 106, 107, 116, 256], "cloud": [30, 107, 116, 120, 256], "configur": [30, 107, 116, 256], "authent": [30, 107, 116, 256], "see": [30, 31, 106, 107, 108, 116, 122, 123, 127, 129, 142, 175, 189, 256, 320, 321, 322, 385, 398, 412, 422, 480, 487, 493, 494, 502, 577, 596, 754, 755, 756, 857, 915, 922, 928, 929, 937, 989, 997], "here": [30, 31, 91, 93, 94, 95, 97, 106, 107, 116, 125, 127, 129, 256, 496, 694, 931], "gc": [30, 107, 116, 256], "azur": [30, 107, 116, 256], "keyword": [30, 53, 107, 113, 116, 142, 189, 198, 202, 233, 236, 256, 448, 581, 584, 596, 646, 653, 672, 676, 694, 989], "argument": [30, 35, 104, 107, 113, 116, 142, 144, 149, 160, 161, 162, 180, 188, 189, 190, 202, 203, 209, 211, 220, 226, 229, 233, 236, 256, 363, 370, 380, 399, 446, 448, 460, 461, 462, 463, 464, 466, 467, 468, 483, 499, 505, 511, 512, 539, 540, 544, 546, 547, 548, 549, 555, 560, 570, 573, 581, 584, 585, 596, 616, 620, 627, 628, 629, 646, 653, 654, 661, 668, 672, 676, 694, 803, 810, 837, 934, 940, 946, 947, 972, 989], "while": [30, 105, 107, 108, 116, 127, 129, 173, 182, 224, 256, 642, 694], "lake": [30, 107, 116, 256, 607], "instanti": [30, 31, 202, 233, 256, 653, 672, 694], "basic": [30, 31, 256, 997], "filesystem": [30, 107, 116, 256], "table_path": [30, 107, 116, 256], "doe": [30, 65, 73, 85, 91, 93, 94, 95, 97, 98, 104, 105, 107, 108, 115, 116, 120, 122, 123, 150, 174, 198, 199, 225, 233, 256, 307, 370, 373, 424, 533, 561, 596, 621, 638, 667, 672, 694, 702, 813, 830, 864, 910, 980, 989], "match": [30, 31, 73, 85, 91, 93, 94, 95, 97, 122, 123, 152, 176, 198, 256, 430, 487, 488, 491, 493, 494, 495, 496, 502, 503, 510, 512, 513, 514, 547, 623, 634, 694, 846, 853, 922, 923, 926, 928, 929, 930, 931, 937, 938, 945, 947, 948, 949, 989], "version": [30, 71, 74, 75, 99, 107, 116, 121, 256, 355, 356, 512, 567, 575, 577, 582, 795, 796, 947], "old": [30, 194, 256, 650, 694], "existing_table_path": [30, 256], "store": [30, 104, 113, 150, 173, 199, 256, 702, 989], "bucket": [30, 107, 116, 256, 363, 370, 803, 810, 833, 989], "prefix": [30, 134, 256, 265, 314, 423, 510, 518, 522, 596, 746, 945, 953], "aws_region": [30, 116, 256], "the_aws_region": [30, 256], "aws_access_key_id": [30, 107, 116, 256], "the_aws_access_key_id": [30, 107, 116, 256], "aws_secret_access_kei": [30, 107, 116, 256], "the_aws_secret_access_kei": [30, 107, 116, 256], "workbook": [31, 256], "worksheet": [31, 256], "posit": [31, 144, 149, 160, 188, 202, 203, 209, 226, 233, 236, 256, 377, 378, 379, 380, 446, 483, 501, 539, 540, 544, 546, 547, 548, 549, 555, 560, 570, 573, 581, 584, 585, 596, 616, 620, 627, 653, 654, 661, 668, 672, 676, 694, 818, 819, 820, 936, 989], "tupl": [31, 106, 137, 173, 198, 199, 204, 235, 256, 457, 596, 647, 657, 694, 887, 989], "a1": [31, 66, 68, 256], "table_styl": [31, 256], "column_format": [31, 256], "dtype_format": [31, 256], "oneormoredatatyp": [31, 125, 256, 853, 989], "conditional_format": [31, 256], "conditionalformatdict": [31, 256], "column_tot": [31, 256], "columntotalsdefinit": [31, 256], "column_width": [31, 256], "row_tot": [31, 256], "rowtotalsdefinit": [31, 256], "row_height": [31, 256], "sparklin": [31, 256], "sequenc": [31, 57, 65, 72, 91, 93, 94, 95, 97, 99, 101, 104, 105, 115, 125, 126, 127, 138, 143, 149, 150, 175, 176, 182, 186, 189, 190, 209, 217, 223, 225, 226, 227, 228, 229, 256, 307, 403, 422, 448, 483, 520, 541, 544, 553, 554, 562, 564, 569, 577, 596, 610, 620, 633, 634, 646, 661, 666, 667, 668, 669, 694, 702, 740, 766, 768, 904, 956, 989], "formula": [31, 256, 375, 596, 816, 989], "autofilt": [31, 256], "autofit": [31, 256], "hidden_column": [31, 256], "hide_gridlin": [31, 256], "sheet_zoom": [31, 256], "excel": [31, 108, 256, 607], "open": [31, 104, 105, 108, 109, 113, 117, 119, 256], "xlsxwriter": [31, 121, 256], "ha": [31, 65, 74, 99, 115, 136, 229, 256, 270, 315, 331, 411, 433, 530, 541, 596, 678, 747, 753, 764, 766, 830, 843, 974, 989], "close": [31, 75, 132, 161, 162, 256, 399, 419, 460, 461, 462, 463, 464, 466, 467, 468, 480, 596, 628, 629, 694, 837, 915, 989], "xlsx": [31, 108, 256], "work": [31, 39, 105, 108, 162, 195, 256, 270, 289, 308, 319, 320, 321, 322, 380, 389, 446, 500, 532, 596, 629, 694, 722, 741, 751, 754, 755, 756, 828, 935, 975, 989], "directori": [31, 113, 256], "sheet1": [31, 256], "valid": [31, 50, 109, 113, 129, 134, 148, 256, 331, 487, 488, 493, 494, 496, 502, 503, 596, 764, 817, 830, 922, 923, 928, 929, 931, 937, 938, 989], "notat": [31, 256], "integ": [31, 43, 44, 45, 46, 59, 60, 61, 62, 125, 127, 128, 130, 161, 162, 256, 319, 364, 389, 390, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 501, 538, 543, 564, 578, 596, 628, 629, 694, 710, 711, 751, 804, 828, 846, 885, 895, 904, 936, 989, 996, 997], "medium": [31, 256], "kei": [31, 65, 71, 73, 161, 176, 183, 188, 190, 194, 197, 256, 584, 628, 634, 643, 650, 651, 694], "contain": [31, 65, 71, 93, 96, 98, 107, 116, 122, 126, 138, 146, 174, 186, 190, 223, 256, 270, 403, 424, 488, 491, 493, 494, 496, 509, 510, 596, 610, 617, 647, 666, 694, 864, 870, 923, 926, 928, 929, 931, 944, 945, 966, 989], "follow": [31, 71, 104, 105, 107, 115, 116, 137, 161, 162, 176, 189, 229, 256, 270, 359, 363, 370, 448, 453, 460, 461, 462, 463, 464, 466, 467, 468, 520, 531, 541, 589, 590, 592, 596, 597, 598, 602, 603, 604, 628, 629, 634, 646, 694, 799, 803, 810, 883, 903, 904, 983, 985, 989, 990, 993, 994, 995, 997], "first_column": [31, 256], "last_column": [31, 256], "banded_column": [31, 256], "banded_row": [31, 256], "sheet": [31, 108, 256], "chart": [31, 256, 647, 694], "subsequ": [31, 55, 193, 220, 256, 307, 619, 694], "colnam": [31, 115, 127, 147, 256, 618, 694], "given": [31, 50, 51, 65, 74, 75, 91, 93, 94, 95, 97, 104, 105, 115, 124, 125, 127, 128, 129, 130, 132, 137, 138, 148, 149, 172, 188, 189, 198, 205, 206, 209, 223, 228, 256, 270, 286, 301, 307, 338, 366, 368, 369, 375, 399, 417, 446, 448, 453, 456, 457, 460, 461, 463, 466, 467, 468, 471, 473, 474, 494, 512, 514, 520, 560, 578, 596, 610, 620, 638, 646, 655, 656, 661, 666, 669, 678, 694, 703, 719, 734, 740, 765, 774, 806, 808, 809, 816, 817, 833, 837, 856, 860, 863, 875, 881, 883, 887, 890, 891, 893, 896, 897, 898, 901, 907, 908, 929, 947, 949, 977, 981, 989, 996, 997], "dd": [31, 256], "mm": [31, 256], "yyyi": [31, 256], "00": [31, 75, 127, 132, 161, 176, 229, 256, 336, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 512, 514, 516, 558, 628, 634, 694, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 810, 811, 812, 813, 814, 947, 949, 951], "dtype": [31, 68, 76, 91, 93, 95, 97, 98, 102, 104, 105, 115, 124, 125, 126, 127, 129, 133, 136, 161, 162, 176, 218, 219, 220, 256, 270, 272, 273, 274, 275, 276, 277, 280, 283, 284, 285, 294, 306, 317, 320, 321, 322, 323, 324, 329, 330, 342, 345, 349, 351, 353, 358, 365, 373, 380, 382, 420, 422, 424, 455, 456, 460, 461, 462, 463, 464, 466, 467, 468, 475, 478, 479, 486, 495, 506, 512, 523, 525, 527, 528, 529, 534, 535, 541, 543, 551, 560, 564, 568, 569, 578, 584, 596, 628, 629, 634, 694, 716, 717, 718, 727, 739, 748, 753, 754, 755, 756, 762, 763, 766, 767, 778, 781, 788, 790, 793, 798, 805, 813, 817, 822, 840, 846, 853, 863, 864, 888, 902, 909, 921, 930, 941, 947, 959, 969, 971, 972, 973, 977, 989, 997], "overridden": [31, 91, 93, 95, 97, 131, 256, 694], "basi": [31, 127, 256], "param": [31, 91, 93, 94, 95, 97, 104, 105, 115, 126, 127, 129, 198, 256, 694], "It": [31, 137, 183, 189, 238, 256, 270, 316, 432, 596, 638, 643, 678, 694, 903, 904, 989], "also": [31, 55, 75, 94, 115, 125, 126, 127, 128, 129, 147, 160, 161, 162, 183, 186, 202, 209, 233, 256, 327, 330, 362, 398, 399, 453, 460, 461, 462, 463, 464, 466, 467, 468, 483, 553, 554, 562, 564, 577, 589, 595, 596, 601, 627, 628, 629, 643, 653, 661, 672, 673, 694, 802, 837, 883, 989], "group": [31, 35, 50, 105, 160, 161, 162, 174, 186, 188, 190, 227, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 264, 270, 289, 388, 446, 482, 483, 487, 493, 494, 502, 525, 541, 596, 627, 628, 629, 659, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 722, 922, 928, 929, 937], "float_dtyp": [31, 256], "simplifi": [31, 72, 256, 614, 619, 621, 647, 657, 658, 659, 694], "uniform": [31, 256], "condit": [31, 70, 146, 153, 198, 256, 491, 510, 562, 589, 617, 624, 694], "suppli": [31, 91, 93, 94, 95, 97, 198, 256, 448, 596, 694], "typenam": [31, 256], "3_color_scal": [31, 256], "data_bar": [31, 256], "make": [31, 57, 73, 91, 96, 104, 105, 106, 109, 113, 117, 119, 161, 162, 183, 186, 193, 229, 256, 378, 379, 424, 456, 508, 518, 596, 628, 629, 643, 694, 819, 820, 833, 864, 943, 953, 989, 997], "icon": [31, 256], "multipl": [31, 53, 72, 73, 104, 105, 115, 117, 118, 119, 125, 129, 138, 144, 148, 150, 153, 160, 161, 166, 174, 188, 190, 202, 203, 209, 223, 233, 236, 256, 306, 429, 433, 438, 439, 446, 457, 460, 461, 462, 463, 464, 466, 467, 468, 483, 539, 540, 544, 547, 553, 554, 555, 562, 569, 570, 573, 577, 585, 589, 596, 610, 616, 624, 627, 628, 653, 654, 661, 666, 672, 676, 694, 702, 739, 817, 869, 887, 989], "singl": [31, 51, 65, 73, 104, 105, 106, 113, 115, 125, 144, 145, 146, 150, 157, 172, 188, 198, 209, 256, 270, 287, 306, 359, 386, 422, 454, 457, 483, 486, 537, 539, 540, 541, 544, 547, 548, 549, 555, 569, 570, 573, 585, 596, 616, 617, 661, 694, 702, 720, 739, 799, 884, 887, 921, 966, 989], "across": [31, 65, 256, 539, 540, 555, 570, 573, 585], "effect": [31, 136, 155, 256, 270, 596, 674, 694], "heatmap": [31, 256], "min": [31, 35, 132, 143, 152, 161, 162, 190, 256, 320, 322, 328, 385, 446, 453, 463, 581, 596, 623, 628, 629, 659, 694, 754, 756, 761, 766, 825, 883, 893, 989, 997], "entir": [31, 256], "final": [31, 65, 119, 256, 377, 378, 379, 596, 621, 694, 818, 819, 820, 989], "made": [31, 132, 256, 971, 989], "up": [31, 57, 106, 173, 176, 199, 216, 256, 270, 319, 518, 596, 633, 634, 638, 694, 751, 953, 989], "abov": [31, 256, 370, 589], "order": [31, 50, 52, 65, 94, 122, 137, 138, 160, 161, 162, 188, 189, 190, 200, 203, 209, 223, 225, 229, 256, 270, 280, 303, 308, 318, 453, 470, 471, 472, 482, 483, 520, 532, 533, 544, 596, 610, 627, 628, 629, 642, 654, 658, 659, 661, 666, 667, 694, 703, 712, 736, 741, 750, 765, 852, 881, 883, 888, 900, 901, 905, 917, 956, 975, 976, 989], "than": [31, 75, 90, 95, 97, 104, 105, 115, 120, 127, 129, 137, 159, 160, 173, 176, 188, 198, 199, 200, 227, 238, 256, 270, 392, 393, 411, 414, 421, 470, 480, 498, 504, 509, 518, 550, 582, 585, 596, 627, 634, 658, 659, 678, 694, 703, 900, 915, 933, 939, 944, 953, 989, 997], "total": [31, 148, 256, 817, 989], "export": [31, 173, 174, 199, 216, 219, 256], "numer": [31, 176, 256, 263, 320, 321, 322, 390, 399, 419, 437, 439, 449, 456, 475, 521, 531, 596, 607, 634, 694, 754, 755, 756, 766, 837, 851, 902, 909, 989, 997], "associ": [31, 51, 53, 65, 126, 256], "sum": [31, 50, 65, 148, 155, 160, 162, 172, 190, 236, 256, 270, 307, 329, 330, 375, 386, 460, 461, 463, 466, 467, 468, 537, 539, 553, 555, 562, 577, 596, 614, 619, 621, 627, 629, 645, 647, 657, 676, 694, 762, 763, 816, 817, 890, 891, 893, 896, 897, 898, 989], "pass": [31, 35, 53, 65, 75, 93, 108, 115, 125, 127, 129, 138, 142, 144, 160, 161, 162, 164, 178, 188, 189, 202, 209, 212, 223, 229, 233, 236, 256, 270, 343, 362, 383, 397, 446, 448, 483, 499, 505, 511, 539, 540, 544, 547, 555, 564, 570, 573, 584, 585, 596, 610, 616, 627, 628, 629, 631, 638, 646, 653, 657, 661, 666, 672, 676, 694, 703, 779, 802, 823, 832, 859, 934, 940, 946, 960, 989], "must": [31, 74, 92, 93, 107, 116, 143, 149, 161, 162, 176, 183, 198, 256, 307, 422, 460, 461, 462, 463, 464, 466, 467, 468, 596, 620, 628, 629, 634, 638, 643, 694, 765, 766, 881, 989], "funcnam": [31, 256], "averag": [31, 256, 377, 378, 379, 453, 596, 818, 819, 820, 883, 989], "count_num": [31, 256], "count": [31, 50, 104, 105, 109, 113, 115, 117, 118, 119, 143, 161, 162, 176, 186, 187, 190, 224, 228, 229, 234, 238, 247, 256, 271, 287, 326, 359, 415, 440, 444, 460, 461, 462, 463, 464, 466, 467, 468, 488, 533, 535, 542, 574, 596, 628, 629, 634, 645, 669, 674, 678, 687, 694, 720, 766, 799, 833, 871, 876, 923, 976, 978, 989], "std_dev": [31, 256], "var": [31, 130, 256, 596, 694, 989], "pixel": [31, 256], "unit": [31, 38, 40, 75, 127, 129, 148, 256, 336, 337, 343, 368, 373, 420, 433, 512, 514, 534, 564, 596, 647, 694, 772, 773, 779, 808, 813, 817, 863, 947, 949, 977, 989, 997], "hand": [31, 104, 105, 115, 256], "side": [31, 161, 162, 256, 399, 460, 461, 462, 463, 464, 466, 467, 468, 471, 596, 628, 629, 694, 837, 901, 989], "call": [31, 54, 105, 127, 129, 134, 137, 160, 161, 162, 177, 255, 256, 270, 327, 330, 570, 573, 596, 608, 627, 628, 629, 693, 694, 703, 989], "ad": [31, 94, 136, 161, 224, 233, 256, 269, 383, 553, 554, 596, 628, 672, 694, 823, 989], "end": [31, 75, 104, 105, 113, 115, 132, 161, 256, 302, 313, 359, 363, 364, 380, 399, 487, 491, 494, 506, 510, 543, 547, 560, 589, 596, 628, 630, 637, 647, 694, 735, 745, 799, 803, 837, 926, 929, 941, 945, 989], "wise": [31, 65, 155, 256, 272, 273, 274, 275, 276, 277, 323, 324, 381, 418, 477, 478, 479, 527, 528, 553, 554, 562, 570, 573, 577, 596, 704, 705, 706, 707, 708, 709, 758, 759, 821, 861, 862, 912, 913, 914, 963, 964, 989], "particip": [31, 256], "distinct": [31, 129, 188, 256, 308, 453, 558, 596, 741, 883, 989, 997], "referenc": [31, 256, 520], "differ": [31, 104, 120, 122, 150, 161, 162, 173, 199, 216, 224, 256, 288, 332, 341, 359, 360, 362, 371, 424, 441, 442, 512, 533, 561, 564, 596, 619, 628, 629, 694, 702, 703, 721, 767, 777, 799, 800, 802, 811, 873, 874, 902, 947, 989], "row_index": [31, 256], "height": [31, 146, 256], "provid": [31, 53, 104, 105, 106, 107, 115, 116, 127, 129, 172, 256, 307, 311, 312, 489, 490, 493, 495, 496, 564, 584, 607, 658, 659, 694, 743, 744, 833, 856, 924, 925, 928, 930, 931, 989, 996, 997], "intersect": [31, 256], "bodi": [31, 256], "start": [31, 75, 103, 104, 105, 109, 113, 115, 117, 118, 119, 131, 132, 160, 161, 177, 208, 229, 234, 256, 302, 314, 341, 343, 344, 346, 347, 352, 354, 360, 361, 363, 364, 368, 370, 371, 372, 374, 380, 399, 481, 487, 491, 494, 506, 510, 543, 547, 553, 560, 562, 589, 596, 627, 628, 647, 660, 674, 694, 735, 746, 772, 774, 777, 779, 780, 782, 787, 789, 792, 794, 797, 800, 801, 803, 804, 808, 810, 811, 812, 813, 814, 837, 916, 926, 929, 941, 945, 989, 997], "zero": [31, 91, 92, 103, 104, 105, 109, 113, 126, 136, 139, 152, 173, 198, 214, 219, 220, 256, 307, 384, 385, 419, 471, 480, 518, 531, 596, 612, 623, 694, 740, 753, 825, 915, 953, 966, 971, 972, 989], "unless": [31, 65, 93, 220, 256, 578, 694, 972, 980, 989], "marker": [31, 256], "compliant": [31, 256], "case": [31, 65, 91, 93, 94, 95, 97, 119, 131, 137, 150, 161, 162, 173, 256, 422, 423, 432, 433, 487, 494, 502, 596, 628, 629, 694, 702, 922, 929, 937, 989], "three": [31, 222, 256, 307, 471, 578, 596, 740], "avail": [31, 101, 107, 116, 125, 134, 255, 256, 453, 590, 592, 595, 596, 597, 598, 601, 602, 603, 604, 607, 608, 621, 693, 694, 883, 983, 985, 989, 990, 993, 994, 995], "insert_befor": [31, 256], "insert_aft": [31, 256], "respect": [31, 256], "direct": [31, 106, 113, 119, 227, 256], "far": [31, 256], "thei": [31, 94, 115, 122, 134, 177, 256, 459, 596, 889, 989], "strongli": [31, 131, 137, 198, 238, 256, 270, 596, 678, 703, 989], "advis": [31, 177, 256, 316, 596], "structur": [31, 82, 86, 88, 150, 189, 219, 256, 448, 596, 646, 694, 702, 989], "your": [31, 65, 104, 105, 122, 123, 137, 173, 202, 233, 236, 256, 270, 316, 596, 614, 630, 637, 638, 653, 672, 676, 694, 703, 989, 997], "wherev": [31, 137, 238, 256, 270, 596, 678, 703, 989], "possibl": [31, 104, 137, 160, 173, 199, 225, 238, 256, 270, 420, 432, 509, 534, 596, 627, 667, 678, 694, 703, 944, 989], "simpl": [31, 129, 186, 256], "colx": [31, 55, 256, 997], "coli": [31, 256, 997], "after": [31, 55, 73, 94, 103, 104, 105, 109, 113, 115, 117, 118, 119, 150, 226, 255, 256, 380, 424, 453, 518, 596, 668, 694, 702, 864, 883, 953, 989], "befor": [31, 104, 115, 131, 134, 150, 161, 176, 226, 256, 329, 330, 331, 424, 447, 459, 460, 461, 462, 463, 464, 466, 467, 468, 518, 523, 579, 580, 596, 628, 631, 634, 668, 694, 702, 762, 763, 764, 864, 877, 889, 890, 891, 892, 893, 894, 896, 897, 898, 953, 959, 989], "most": [31, 52, 91, 104, 105, 115, 256, 433, 438, 447, 509, 535, 596, 869, 877, 944, 978, 989, 996], "mandatori": [31, 256], "return_dtyp": [31, 137, 256, 270, 422, 424, 541, 569, 596, 703, 864, 989], "latter": [31, 150, 256, 702, 989], "appropri": [31, 256, 453, 596, 883, 989], "pure": [31, 256], "actual": [31, 94, 108, 127, 129, 256, 316, 596, 910, 989], "indic": [31, 70, 99, 103, 104, 105, 109, 113, 115, 124, 125, 129, 161, 162, 176, 203, 217, 229, 256, 281, 306, 359, 363, 370, 401, 404, 405, 407, 408, 409, 428, 431, 460, 461, 462, 463, 464, 466, 467, 468, 471, 477, 525, 544, 596, 628, 629, 634, 654, 694, 739, 799, 803, 810, 841, 845, 847, 848, 849, 850, 901, 912, 961, 967, 989, 997], "calcul": [31, 65, 161, 210, 230, 256, 288, 332, 377, 378, 379, 412, 420, 465, 480, 485, 534, 536, 539, 541, 550, 575, 579, 580, 582, 583, 588, 596, 628, 662, 670, 694, 721, 767, 818, 819, 820, 857, 895, 915, 919, 979, 989], "individu": [31, 127, 162, 219, 256, 270, 494, 596, 629, 659, 694, 752, 929, 989], "gridlin": [31, 256], "zoom": [31, 256], "level": [31, 35, 115, 117, 118, 119, 127, 137, 155, 186, 256, 386, 596, 630, 637, 659, 694], "definit": [31, 125, 256, 412, 596, 857, 989], "take": [31, 127, 134, 155, 183, 189, 213, 256, 359, 483, 526, 559, 561, 596, 643, 665, 694, 799, 962, 981, 989], "care": [31, 256, 270, 472, 596, 905, 989], "rel": [31, 107, 116, 122, 123, 256, 359, 377, 378, 379, 596, 799, 818, 819, 820, 989], "readthedoc": [31, 256], "io": [31, 256], "working_with_conditional_format": [31, 256], "html": [31, 92, 106, 136, 142, 256], "similarli": [31, 94, 256], "well": [31, 104, 105, 115, 149, 190, 256, 399, 596, 620, 694, 837, 989], "adjac": [31, 256], "two": [31, 55, 93, 95, 97, 106, 132, 155, 182, 183, 190, 222, 237, 238, 256, 264, 307, 333, 337, 482, 525, 550, 552, 575, 579, 580, 582, 596, 642, 643, 677, 678, 694, 740, 768, 773, 989], "help": [31, 256, 621, 694], "where": [31, 50, 65, 70, 106, 126, 146, 150, 173, 182, 199, 210, 230, 256, 281, 372, 375, 471, 480, 483, 485, 536, 550, 575, 579, 580, 582, 583, 588, 589, 596, 642, 662, 670, 694, 702, 713, 812, 816, 901, 915, 919, 979, 981, 989, 996], "appear": [31, 94, 122, 256, 533, 596, 976, 989], "working_with_sparklin": [31, 256], "inject": [31, 65, 256], "locat": [31, 150, 196, 221, 226, 256, 471, 596, 668, 694, 702, 901, 904, 961, 989], "syntax": [31, 137, 186, 256, 487, 493, 494, 502, 657, 694, 922, 928, 929, 937, 989], "ensur": [31, 76, 126, 127, 129, 160, 188, 198, 256, 399, 535, 596, 627, 638, 694, 971, 978, 989], "correctli": [31, 256], "microsoft": [31, 121, 256], "com": [31, 106, 256, 377, 378, 379, 493, 494, 596, 818, 819, 820, 928, 929, 989], "u": [31, 38, 40, 53, 75, 98, 173, 199, 216, 256, 336, 337, 343, 368, 373, 512, 514, 564, 772, 773, 779, 808, 813, 947, 949], "offic": [31, 256], "f5ed2452": [31, 256], "2337": [31, 256], "4f71": [31, 256], "bed3": [31, 256], "c8ae6d2b276": [31, 256], "random": [31, 125, 127, 129, 163, 200, 256, 394, 453, 470, 476, 596, 831, 883, 900, 911, 989], "date": [31, 38, 65, 75, 104, 105, 106, 115, 120, 127, 143, 159, 161, 162, 174, 176, 229, 256, 286, 287, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 460, 461, 462, 463, 464, 466, 467, 468, 512, 513, 529, 564, 568, 587, 596, 628, 629, 634, 694, 719, 720, 772, 773, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 853, 873, 874, 904, 947, 948, 973, 989], "dtm": [31, 256, 337, 773], "2023": [31, 98, 121, 174, 256, 337, 568, 773], "num": [31, 222, 256, 399, 402, 518, 596, 837, 989], "500": [31, 173, 228, 256, 621, 669, 694, 787, 789, 797, 804, 890, 891, 893, 989], "val": [31, 197, 256, 318, 448, 529, 589, 596, 651, 694, 750], "10_000": [31, 256], "20_000": [31, 256], "30_000": [31, 256], "increas": [31, 65, 104, 113, 256, 331, 596, 764, 989], "b4": [31, 256], "light": [31, 256], "twice": [31, 108, 256], "each": [31, 65, 105, 118, 122, 123, 125, 137, 159, 160, 161, 162, 174, 176, 188, 220, 226, 229, 235, 236, 238, 239, 241, 250, 256, 270, 293, 305, 359, 363, 370, 419, 453, 483, 494, 508, 509, 541, 544, 549, 584, 596, 628, 629, 634, 647, 668, 676, 678, 679, 681, 690, 694, 726, 738, 752, 799, 803, 810, 883, 929, 943, 944, 958, 989, 997], "titl": [31, 50, 256], "explicit": [31, 115, 125, 256, 543, 577], "integr": [31, 256, 997], "multi_fram": [31, 256], "wb": [31, 256], "coordin": [31, 256], "advanc": [31, 256, 307, 740, 997], "min_color": [31, 256], "76933c": [31, 256], "mid_color": [31, 256], "c4d79b": [31, 256], "max_color": [31, 256], "ebf1d": [31, 256], "data_bar_2010": [31, 256], "bar_color": [31, 256], "9bbb59": [31, 256], "bar_negative_color_sam": [31, 256], "bar_negative_border_color_sam": [31, 256], "000": [31, 256, 997], "white": [31, 256], "w": [31, 52, 53, 256, 493, 928], "get_worksheet_by_nam": [31, 256], "fmt_titl": [31, 256], "add_format": [31, 256], "font_color": [31, 256], "4f6228": [31, 256], "font_siz": [31, 256], "12": [31, 65, 74, 75, 98, 126, 127, 132, 161, 162, 176, 229, 256, 329, 337, 344, 347, 354, 355, 356, 361, 363, 370, 374, 447, 475, 554, 556, 557, 569, 596, 628, 629, 630, 634, 637, 657, 664, 694, 703, 765, 773, 794, 803, 810, 899, 989, 997], "ital": [31, 256], "bold": [31, 256], "customis": [31, 256], "trend": [31, 256], "win_loss": [31, 256], "subtl": [31, 256], "tone": [31, 256], "hidden": [31, 256], "id": [31, 73, 238, 256, 502, 503, 533, 535, 596, 678, 976, 989, 997], "q1": [31, 256], "55": [31, 67, 256], "20": [31, 127, 132, 150, 166, 167, 189, 191, 195, 196, 256, 278, 279, 280, 332, 363, 370, 394, 398, 448, 564, 568, 596, 646, 694, 767, 810, 989], "35": [31, 121, 256, 332, 596, 767, 989], "q2": [31, 256], "30": [31, 74, 132, 150, 161, 166, 189, 195, 196, 215, 233, 256, 278, 279, 280, 332, 337, 342, 347, 355, 361, 362, 363, 370, 374, 394, 475, 568, 596, 628, 646, 672, 694, 765, 767, 773, 778, 795, 802, 803, 810, 989, 997], "15": [31, 121, 126, 132, 137, 161, 162, 167, 256, 331, 332, 356, 363, 370, 448, 554, 596, 628, 629, 694, 764, 767, 803, 810, 989], "60": [31, 150, 256, 364, 365, 512, 800, 804, 805, 947], "q3": [31, 256], "40": [31, 150, 189, 256, 363, 370, 394, 596, 646, 694, 783, 810], "80": [31, 256], "q4": [31, 256], "75": [31, 143, 256, 267, 445, 596, 766, 833, 881, 989, 997], "account": [31, 98, 256, 359, 377, 378, 379, 596, 799, 818, 819, 820, 989], "flavour": [31, 256], "integer_dtyp": [31, 202, 256, 653, 694], "0_": [31, 256], "just": [31, 106, 115, 182, 256, 642, 694], "unifi": [31, 256], "multi": [31, 104, 105, 256, 380, 493, 570, 573, 596, 928], "2_color_scal": [31, 256], "95b3d7": [31, 256], "ffffff": [31, 256], "base": [31, 36, 146, 153, 161, 162, 256, 375, 377, 378, 379, 417, 418, 501, 596, 617, 624, 628, 629, 694, 816, 818, 819, 820, 833, 860, 861, 881, 936, 981, 989, 997], "standardis": [31, 256], "z": [31, 52, 73, 98, 125, 127, 148, 169, 171, 175, 182, 256, 263, 267, 285, 318, 394, 445, 456, 494, 512, 514, 578, 596, 633, 642, 660, 694, 750, 825, 929, 947, 949, 989, 996], "score": [31, 256], "conjunct": [31, 108, 256], "a123": [31, 256], "b345": [31, 256], "c567": [31, 256], "d789": [31, 256], "e101": [31, 256], "45": [31, 132, 162, 256, 337, 363, 370, 488, 494, 568, 629, 694, 773, 803, 810, 923, 929, 997], "85": [31, 256, 997], "font": [31, 256], "consola": [31, 256], "standard": [31, 121, 210, 219, 256, 347, 378, 466, 480, 485, 496, 583, 596, 662, 694, 783, 819, 915, 919, 931, 989, 997], "stdev": [31, 256], "ipccompress": [32, 256], "arrow": [32, 77, 91, 106, 109, 117, 214, 256, 658, 694, 966, 971, 989], "ipc": [32, 109, 110, 117, 120, 256, 607], "binari": [32, 256, 310, 312, 313, 314, 540, 742, 744, 745, 746], "feather": [32, 109, 117, 256, 607], "lz4": [32, 35, 256, 658, 659, 694], "zstd": [32, 35, 256, 658, 659, 694], "pretti": [33, 256], "row_ori": [33, 256], "iobas": [33, 34, 111, 112, 256, 649, 675, 694], "serial": [33, 34, 256], "represent": [33, 34, 218, 256, 318, 341, 344, 347, 348, 350, 352, 354, 357, 360, 361, 364, 371, 372, 374, 529, 596, 619, 636, 694, 750, 777, 780, 782, 783, 787, 789, 792, 794, 797, 800, 801, 804, 811, 812, 814, 969, 973, 989], "orient": [33, 66, 68, 95, 97, 256, 694], "slower": [33, 95, 97, 137, 160, 188, 229, 238, 256, 627, 678, 694, 703, 989], "common": [33, 65, 73, 256, 601], "write_ndjson": [33, 256], "newlin": [34, 112, 118, 256], "delimit": [34, 99, 104, 105, 112, 115, 118, 190, 217, 256, 486, 921, 967, 989], "parquetcompress": [35, 256], "compression_level": [35, 256, 659, 694], "statist": [35, 104, 105, 113, 119, 143, 256, 378, 379, 412, 460, 461, 462, 463, 464, 465, 466, 467, 468, 480, 596, 659, 694, 766, 819, 820, 857, 895, 915, 989], "row_group_s": [35, 256, 659, 694], "use_pyarrow": [35, 104, 109, 113, 256, 659, 694, 970, 971, 989], "pyarrow_opt": [35, 107, 113, 116, 256], "parquet": [35, 113, 114, 119, 256, 607, 659, 694], "gzip": [35, 256, 659, 694], "lzo": [35, 256, 659, 694], "brotli": [35, 256, 659, 694], "choos": [35, 256, 658, 659, 694], "good": [35, 173, 256, 658, 659, 694], "perform": [35, 65, 82, 92, 104, 105, 109, 113, 115, 117, 118, 119, 136, 137, 161, 162, 176, 193, 238, 256, 270, 316, 446, 596, 628, 629, 634, 658, 659, 674, 678, 694, 703, 989], "fast": [35, 128, 130, 256, 383, 472, 596, 658, 659, 694, 823, 905, 989, 997], "decompress": [35, 256, 658, 659, 694], "backward": [35, 152, 176, 256, 309, 356, 385, 596, 623, 634, 659, 694, 796, 825, 989], "guarante": [35, 92, 104, 105, 225, 256, 621, 659, 667, 694], "deal": [35, 173, 256, 362, 453, 512, 596, 659, 694, 802, 883, 947, 989], "older": [35, 256, 659, 694], "reader": [35, 101, 104, 105, 109, 113, 256, 608, 659, 694], "higher": [35, 192, 248, 256, 452, 464, 576, 596, 648, 659, 688, 694, 882, 894, 989], "mean": [35, 104, 105, 109, 113, 115, 143, 152, 160, 190, 236, 256, 382, 385, 461, 480, 493, 545, 596, 623, 627, 638, 659, 676, 694, 766, 822, 825, 830, 891, 915, 928, 989], "smaller": [35, 148, 256, 621, 659, 694, 817, 989], "disk": [35, 109, 256, 657, 658, 659, 694], "11": [35, 121, 127, 162, 256, 334, 335, 347, 355, 356, 359, 363, 370, 398, 447, 467, 481, 518, 538, 547, 585, 596, 614, 629, 630, 637, 647, 659, 664, 694, 703, 799, 803, 810, 889, 989], "22": [35, 126, 256, 363, 370, 373, 512, 547, 659, 694, 803, 810, 813, 947, 997], "comput": [35, 72, 73, 79, 148, 160, 176, 220, 225, 236, 248, 256, 262, 272, 273, 274, 275, 276, 277, 297, 298, 299, 323, 324, 326, 327, 328, 329, 330, 333, 375, 381, 412, 417, 418, 419, 438, 446, 447, 451, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 477, 478, 479, 480, 484, 527, 528, 539, 540, 544, 550, 552, 555, 559, 570, 573, 575, 579, 580, 582, 585, 596, 627, 631, 633, 634, 659, 667, 673, 676, 688, 694, 698, 704, 705, 706, 707, 708, 709, 730, 731, 732, 758, 759, 760, 761, 762, 763, 768, 816, 817, 821, 857, 860, 861, 862, 869, 877, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 912, 913, 914, 915, 918, 963, 964, 972, 989], "512": [35, 256, 449, 596, 877, 989], "implement": [35, 92, 136, 137, 238, 256, 270, 596, 678, 703, 903, 904, 989], "v": [35, 52, 53, 74, 148, 256, 471, 596, 765, 901, 989], "At": [35, 256], "moment": [35, 142, 256, 412, 480, 596, 857, 915, 989], "pyarrow": [35, 91, 96, 104, 107, 109, 113, 116, 120, 121, 174, 214, 219, 220, 256, 608, 966, 970, 971, 972, 989], "write_t": [35, 256], "calendar": [37, 38, 161, 162, 176, 229, 256, 347, 359, 363, 370, 374, 460, 461, 462, 463, 464, 466, 467, 468, 596, 628, 629, 634, 694, 783, 799, 803, 810, 814], "time_unit": [38, 40, 75, 98, 336, 337, 343, 368, 373, 514, 564, 772, 773, 779, 808, 813, 949], "time_zon": [38, 75, 98, 338, 362, 514, 774, 802, 949], "timezon": [38, 75], "m": [38, 40, 53, 75, 336, 337, 343, 366, 368, 369, 373, 493, 512, 513, 514, 516, 564, 772, 773, 779, 806, 808, 809, 813, 928, 947, 948, 949, 951], "zone": [38, 75, 338, 362, 512, 514, 774, 802, 947, 949], "zoneinfo": 38, "run": [38, 72, 128, 130, 137, 160, 177, 190, 225, 238, 256, 270, 289, 331, 581, 596, 614, 619, 621, 627, 638, 642, 647, 657, 658, 659, 667, 678, 694, 703, 722, 764, 989, 996, 997], "available_timezon": 38, "128": [39, 67, 877, 989], "bit": [39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 455, 487, 596, 885, 922, 989], "neg": [39, 161, 164, 178, 205, 206, 208, 212, 256, 301, 302, 448, 473, 474, 481, 506, 596, 628, 655, 656, 660, 674, 694, 734, 735, 832, 859, 907, 908, 916, 941, 960, 989], "scale": [39, 148, 256, 448, 596, 817, 989], "experiment": [39, 74, 120, 202, 227, 228, 233, 256, 331, 363, 460, 461, 462, 463, 464, 466, 467, 468, 596, 653, 669, 672, 694, 764, 803, 833, 881, 989], "progress": 39, "expect": [39, 83, 85, 90, 270, 541, 568, 596, 636, 638, 694, 881, 989], "32": [41, 44, 60, 67, 162, 172, 256, 439, 475, 596, 629, 694, 768, 800, 877, 894, 989], "sign": [43, 44, 45, 46, 359, 455, 518, 596, 799, 846, 885, 953, 989], "arrai": [47, 91, 95, 104, 105, 113, 148, 214, 219, 220, 256, 285, 296, 297, 298, 299, 300, 303, 304, 312, 320, 321, 322, 326, 327, 328, 329, 330, 418, 460, 461, 463, 466, 467, 468, 472, 488, 490, 493, 496, 559, 596, 694, 718, 729, 730, 731, 732, 733, 736, 737, 744, 754, 755, 756, 760, 761, 762, 763, 768, 817, 861, 862, 890, 891, 893, 896, 897, 898, 905, 910, 923, 925, 928, 931, 966, 971, 972, 980, 989], "wrap": [49, 98, 399, 596], "arbitrari": [49, 127], "python": [49, 75, 104, 105, 121, 132, 137, 173, 199, 216, 238, 256, 270, 337, 422, 541, 589, 596, 601, 678, 703, 773, 784, 785, 786, 791, 970, 989], "queri": [50, 52, 72, 106, 109, 115, 117, 118, 119, 150, 177, 189, 256, 424, 496, 596, 614, 619, 621, 630, 637, 647, 657, 674, 678, 694, 702, 931, 989, 996], "eager": [50, 51, 52, 53, 54, 55, 70, 75, 102, 132, 133, 161, 227, 256, 336, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 368, 370, 371, 372, 373, 374, 543, 564, 578, 584, 595, 607, 628, 694, 772, 774, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 810, 811, 812, 813, 814, 996], "pars": [50, 104, 105, 108, 115, 117, 118, 138, 160, 202, 209, 223, 233, 236, 256, 399, 446, 483, 495, 501, 512, 514, 539, 540, 544, 546, 548, 549, 555, 564, 570, 573, 584, 585, 596, 610, 627, 653, 661, 666, 672, 676, 694, 837, 930, 936, 947, 949, 989], "against": [50, 289, 694, 722, 996, 997], "eagerli": [50, 307], "unset": [50, 126, 307, 362, 802], "init": [50, 134], "eager_execut": [50, 996], "itself": [50, 125, 636, 694, 996], "alwai": [50, 104, 126, 137, 238, 256, 432, 512, 589, 638, 678, 694, 703, 947, 989, 996, 997], "impact": [50, 161, 256, 628, 694, 996], "declar": [50, 91, 93, 94, 95, 97, 256, 694], "godfath": 50, "1972": 50, "6_000_000": 50, "134_821_952": 50, "dark": 50, "knight": 50, "2008": 50, "185_000_000": 50, "533_316_061": 50, "schindler": 50, "1993": 50, "22_000_000": 50, "96_067_179": 50, "pulp": 50, "fiction": 50, "1994": 50, "8_000_000": 50, "107_930_000": 50, "shawshank": 50, "redempt": 50, "25_000_000": 50, "28_341_469": 50, "release_year": 50, "budget": 50, "gross": 50, "imdb_scor": 50, "ctx": [50, 51, 52, 53, 54, 55], "film": 50, "1990": 50, "BY": [50, 52], "desc": [50, 52], "AS": [50, 996], "decad": 50, "total_gross": 50, "n_film": 50, "2000": [50, 346, 348, 355, 356, 359, 782, 795, 796, 799], "533316061": 50, "232338648": 50, "1970": [50, 120], "134821952": 50, "register_glob": [51, 53, 996], "register_mani": [51, 52, 55], "frame_data": [51, 54], "execut": [51, 52, 54, 73, 177, 256, 289, 316, 596, 611, 638, 647, 694, 722, 996], "collect": [51, 52, 55, 68, 72, 115, 116, 120, 127, 129, 132, 144, 146, 177, 214, 256, 270, 403, 543, 548, 564, 584, 596, 610, 616, 617, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 644, 645, 646, 648, 650, 651, 653, 655, 656, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 694, 844, 989, 996, 997], "global": [52, 56, 76, 127, 424, 596, 996], "scope": [52, 55, 134, 996], "automat": [52, 55, 91, 93, 94, 95, 97, 98, 104, 105, 106, 115, 127, 129, 131, 202, 233, 256, 424, 499, 505, 511, 512, 596, 653, 672, 694, 864, 934, 940, 946, 947, 989, 996], "map": [52, 53, 93, 94, 104, 105, 109, 110, 113, 114, 115, 117, 137, 147, 173, 194, 198, 199, 215, 256, 363, 370, 423, 424, 535, 541, 596, 618, 650, 694, 803, 810, 864, 989, 996], "recent": [52, 447, 596, 877, 989, 996], "df1": [52, 54, 55, 56, 65, 73, 76, 122, 150, 156, 220, 231, 256], "x": [52, 53, 65, 73, 98, 104, 105, 106, 115, 125, 127, 148, 166, 169, 171, 175, 182, 190, 256, 263, 267, 270, 285, 294, 376, 390, 392, 393, 394, 414, 419, 421, 422, 437, 439, 443, 445, 449, 456, 477, 480, 508, 521, 529, 531, 538, 541, 553, 554, 562, 568, 569, 577, 596, 633, 638, 642, 660, 694, 699, 703, 825, 855, 912, 915, 943, 973, 989, 996], "df2": [52, 54, 55, 56, 65, 73, 76, 122, 150, 156, 220, 231, 256], "t": [52, 53, 73, 108, 115, 137, 189, 225, 227, 256, 270, 289, 331, 362, 375, 377, 378, 379, 448, 493, 499, 505, 511, 512, 514, 541, 589, 596, 646, 667, 694, 703, 722, 764, 802, 816, 818, 819, 820, 902, 928, 934, 940, 946, 947, 949, 980, 989], "join": [52, 56, 65, 72, 73, 76, 176, 228, 256, 398, 446, 596, 614, 619, 621, 634, 647, 657, 669, 673, 694], "named_fram": [53, 996], "lf1": [53, 55], "o": [53, 109, 117, 315, 331, 492, 530, 596, 747, 764, 927, 974, 989], "lf2": [53, 55, 694], "p": [53, 67, 189, 256, 448, 584, 596, 646, 694], "q": [53, 584], "r": [53, 448, 488, 492, 493, 494, 502, 596, 923, 927, 928, 929, 937], "lf3": [53, 694], "lf4": [53, 694], "either": [53, 127, 162, 172, 177, 180, 188, 198, 211, 256, 512, 539, 544, 584, 629, 636, 694, 947], "tbl1": [53, 55], "tbl2": [53, 55], "tbl3": 53, "tbl4": 53, "statement": [54, 589], "hello_world": 54, "baz": [54, 167, 168, 190, 226, 256, 507, 509, 632, 668, 694, 944], "hello_data": 54, "foo_bar": [54, 568], "registr": [55, 607], "lifetim": [55, 134], "context": [55, 56, 131, 132, 186, 239, 256, 264, 270, 289, 316, 325, 386, 432, 482, 483, 535, 541, 551, 561, 564, 578, 581, 595, 596, 607, 673, 679, 694, 722, 996], "manag": [55, 56, 607, 996], "often": [55, 161, 162, 256, 287, 456, 596, 628, 629, 694, 720], "want": [55, 94, 102, 133, 137, 150, 186, 256, 270, 320, 321, 322, 386, 422, 424, 460, 461, 462, 463, 464, 466, 467, 468, 553, 562, 578, 596, 614, 630, 637, 694, 702, 703, 754, 755, 756, 971, 989], "df0": 55, "exit": [55, 56, 134, 996], "construct": [55, 91, 93, 94, 95, 96, 97, 102, 133, 256, 424, 578, 596, 626, 649, 694, 989], "persist": [55, 658, 659, 694], "through": [55, 989], "tbl0": 55, "remain": [55, 104, 105, 115, 148, 256, 508, 509, 638, 694, 817, 943, 944, 989], "text": [55, 500, 502, 503, 935, 997], "misc": 55, "testing1234": 55, "test1": 55, "test2": 55, "test3": 55, "temporarili": [56, 131, 161, 162, 256, 628, 629, 694], "cach": [56, 72, 76, 109, 115, 117, 119, 424, 460, 461, 462, 463, 464, 466, 467, 468, 512, 513, 514, 516, 596, 614, 619, 621, 647, 657, 694, 947, 948, 949, 951], "categori": [56, 74, 76, 318, 750, 765, 833, 881, 989], "until": [56, 177, 256, 316, 596], "finish": [56, 79, 150, 256, 702, 989], "invalid": [56, 104, 105, 115, 495, 496, 501, 531, 596, 930, 931, 936], "outermost": 56, "color": [56, 76, 238, 678], "red": [56, 76, 238, 678], "green": [56, 76, 238, 678], "blue": [56, 76], "orang": [56, 76, 141, 239, 240, 242, 243, 244, 246, 248, 249, 256, 679, 680, 682, 683, 684, 686, 688, 689], "uint8": [56, 76, 124, 126, 218, 219, 256, 329, 330, 424, 523, 538, 596, 762, 763, 959, 989, 997], "yellow": [56, 76], "black": [56, 76, 137, 256], "succe": [56, 104, 105, 115], "df_join": [56, 76], "cat": [56, 74, 76, 218, 256, 487, 515, 517, 529, 549, 592, 596, 765, 833, 881, 922, 985, 989], "u8": [56, 76, 99, 217, 218, 256, 424, 538, 596, 967, 989, 997], "schemadict": [57, 91, 93, 94, 95, 96, 97, 115, 201, 256, 584, 638, 652, 678, 694], "composit": [57, 126, 997], "dai": [58, 75, 161, 162, 174, 176, 229, 256, 343, 347, 354, 355, 356, 359, 360, 361, 363, 368, 370, 371, 372, 374, 460, 461, 462, 463, 464, 466, 467, 468, 556, 557, 558, 596, 628, 629, 634, 694, 795, 796, 799, 800, 803, 810, 812], "unsign": [59, 60, 61, 62, 455, 596, 846, 885, 989], "could": [63, 79, 146, 161, 256, 317, 553, 562, 596, 617, 628, 694, 748, 989], "static": [63, 678], "utf": 64, "frametyp": [65, 996], "joinstrategi": [65, 175, 256, 633, 694], "outer": [65, 73, 175, 256, 633, 694], "descend": [65, 138, 203, 209, 223, 256, 280, 303, 453, 472, 482, 483, 544, 596, 610, 654, 661, 666, 694, 712, 736, 852, 883, 905, 917, 989], "fill": [65, 73, 102, 133, 151, 152, 206, 227, 256, 309, 327, 330, 384, 385, 391, 398, 460, 461, 463, 466, 467, 468, 474, 498, 504, 518, 563, 578, 596, 622, 623, 656, 673, 694, 824, 825, 875, 890, 891, 893, 896, 897, 898, 908, 933, 939, 953, 989], "sort": [65, 66, 122, 126, 138, 161, 162, 176, 183, 189, 190, 203, 223, 229, 241, 250, 256, 280, 318, 386, 472, 483, 535, 537, 544, 596, 610, 619, 628, 629, 634, 643, 646, 647, 654, 657, 666, 681, 690, 694, 712, 750, 852, 905, 975, 978, 989, 997], "origin": [65, 104, 105, 225, 256, 362, 411, 424, 446, 455, 488, 493, 494, 496, 498, 504, 518, 596, 667, 694, 765, 802, 864, 881, 923, 928, 929, 931, 933, 939, 953, 989], "In": [65, 107, 116, 119, 127, 129, 137, 148, 150, 161, 162, 186, 256, 270, 596, 628, 629, 694, 702, 817, 884, 989], "duplic": [65, 80, 169, 175, 176, 225, 256, 400, 596, 633, 634, 667, 694, 839, 989], "behaviour": [65, 73, 487, 493, 494, 502, 531, 596, 922, 928, 929, 937], "strategi": [65, 73, 104, 124, 125, 126, 127, 129, 152, 161, 175, 176, 185, 256, 270, 307, 385, 596, 623, 628, 633, 634, 694, 740, 825, 989], "suitabl": [65, 73, 125, 137, 256, 270, 471, 596, 703, 901, 989, 997], "get": [65, 75, 100, 110, 114, 131, 138, 141, 147, 157, 158, 161, 162, 164, 165, 169, 171, 172, 178, 185, 198, 201, 204, 208, 212, 223, 232, 241, 250, 256, 264, 278, 279, 280, 282, 291, 295, 296, 308, 326, 327, 328, 329, 330, 343, 359, 387, 395, 400, 402, 410, 413, 416, 425, 426, 427, 432, 434, 436, 441, 442, 452, 481, 485, 497, 500, 523, 524, 532, 536, 561, 566, 570, 571, 572, 573, 583, 586, 588, 596, 610, 615, 618, 625, 628, 629, 630, 635, 637, 652, 660, 664, 666, 671, 681, 690, 694, 710, 711, 712, 713, 714, 724, 728, 729, 741, 752, 760, 761, 762, 763, 779, 799, 829, 832, 837, 839, 842, 854, 859, 865, 867, 868, 870, 873, 874, 878, 879, 882, 916, 919, 932, 935, 960, 966, 967, 975, 979, 980, 989], "speedup": [65, 137, 173, 256, 270, 596, 703, 989], "receiv": [65, 115, 137, 189, 256, 448, 596, 646, 694, 997], "now": [65, 162, 256, 512, 629, 694, 947], "One": [65, 143, 186, 190, 256, 267, 445, 596, 766, 989], "whose": [65, 176, 190, 256, 380, 560, 596, 634, 694], "uniqu": [65, 124, 125, 126, 129, 171, 186, 247, 256, 271, 282, 402, 410, 440, 512, 513, 514, 516, 533, 535, 542, 574, 596, 687, 694, 714, 766, 842, 854, 871, 947, 948, 949, 951, 976, 978, 989], "post": 65, "constrain": 65, "newli": 65, "boolean": [65, 70, 138, 153, 155, 209, 223, 256, 266, 267, 268, 286, 310, 346, 386, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 445, 483, 495, 537, 538, 544, 584, 596, 610, 624, 661, 666, 694, 700, 701, 713, 719, 742, 782, 826, 837, 838, 839, 841, 842, 844, 845, 847, 848, 849, 850, 854, 878, 879, 903, 922, 981, 989], "know": [65, 307, 500, 935, 971, 980, 989], "first": [65, 104, 105, 108, 115, 118, 126, 137, 159, 161, 164, 176, 178, 185, 189, 190, 212, 218, 224, 225, 229, 241, 256, 280, 282, 289, 292, 293, 307, 331, 356, 359, 363, 395, 402, 416, 424, 448, 471, 483, 493, 495, 496, 502, 503, 546, 553, 562, 566, 589, 596, 614, 628, 630, 634, 637, 646, 667, 673, 681, 694, 712, 722, 725, 726, 740, 764, 766, 796, 799, 803, 832, 842, 859, 864, 901, 928, 930, 931, 937, 938, 960, 969, 989, 997], "2022": [65, 75, 143, 159, 161, 162, 176, 229, 256, 337, 359, 363, 370, 460, 461, 462, 463, 464, 466, 467, 468, 512, 558, 564, 596, 628, 629, 634, 694, 773, 783, 799, 803, 810, 947], "y": [65, 73, 98, 125, 127, 148, 169, 171, 175, 182, 190, 256, 263, 267, 285, 294, 366, 369, 376, 392, 393, 414, 421, 443, 445, 456, 512, 513, 514, 531, 538, 568, 596, 633, 642, 660, 694, 699, 806, 809, 947, 948, 949, 989], "df3": [65, 256], "set_tbl_format": 65, "09": [65, 127, 162, 256, 337, 347, 355, 356, 629, 694, 777], "01": [65, 75, 127, 132, 143, 159, 161, 162, 229, 256, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 512, 513, 514, 516, 558, 628, 629, 694, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 947, 948, 949, 951], "02": [65, 75, 132, 159, 161, 162, 176, 229, 256, 336, 337, 343, 344, 345, 352, 353, 354, 355, 356, 359, 362, 363, 364, 365, 368, 370, 371, 373, 460, 461, 462, 463, 464, 466, 467, 468, 469, 512, 513, 514, 516, 558, 596, 628, 629, 634, 694, 740, 772, 773, 775, 776, 779, 780, 781, 784, 785, 786, 787, 789, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 807, 808, 810, 811, 812, 813, 947, 948, 949, 951], "03": [65, 75, 98, 161, 162, 229, 256, 336, 337, 338, 342, 343, 345, 353, 354, 355, 356, 362, 363, 364, 365, 366, 368, 369, 370, 371, 373, 513, 516, 628, 629, 694, 772, 773, 774, 777, 778, 779, 780, 781, 784, 785, 786, 787, 789, 791, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 808, 809, 811, 812, 813, 948, 951], "af1": 65, "af2": 65, "af3": 65, "keep": [65, 104, 105, 115, 225, 228, 229, 256, 411, 424, 546, 596, 667, 669, 694, 765, 864, 881, 989], "easili": [65, 202, 233, 236, 256, 547, 584, 653, 672, 676, 694], "dot": [65, 596, 657, 694, 989], "product": [65, 142, 256, 329, 333, 541, 596, 762, 768, 989], "fill_nul": [65, 151, 256, 596, 622, 673, 694, 989], "167": 65, "47": 65, "callabl": [66, 67, 68, 69, 115, 137, 155, 189, 238, 256, 270, 307, 422, 423, 448, 459, 541, 553, 554, 562, 569, 577, 596, 638, 646, 678, 694, 703, 740, 889, 989], "decor": [66, 67, 68, 69, 127, 129, 137, 256, 270, 596, 703, 989], "under": [66, 67, 68, 69, 590, 592, 597, 598, 602, 603, 604, 983, 985, 990, 993, 994, 995], "access": [66, 67, 68, 69, 173, 198, 199, 256, 424, 596, 673, 694, 997], "by_first_letter_of_column_nam": 66, "f": [66, 105, 143, 159, 174, 214, 224, 227, 256, 263, 270, 307, 475, 492, 512, 514, 541, 548, 569, 596, 740, 927, 947, 949], "fromkei": [66, 68], "by_first_letter_of_column_valu": 66, "starts_with": [66, 487, 491, 926], "slice": [66, 72, 148, 164, 174, 212, 256, 293, 305, 459, 460, 461, 462, 463, 464, 466, 467, 468, 596, 614, 619, 621, 638, 647, 657, 658, 659, 694, 726, 738, 817, 832, 889, 890, 891, 892, 893, 894, 896, 897, 898, 960, 989], "to_seri": [66, 70, 157, 256, 512, 578, 947], "xx": [66, 68, 126, 129], "xy": [66, 68], "yy": [66, 68, 126, 129], "yz": [66, 68], "a2": [66, 68], "b1": [66, 68], "b2": [66, 68], "pow_n": 67, "powersofn": 67, "next": [67, 309, 453, 596, 883, 989], "ceil": [67, 596, 989], "previou": [67, 134, 447, 520, 596, 877, 989], "floor": [67, 596, 989], "nearest": [67, 176, 192, 248, 256, 319, 389, 452, 464, 576, 596, 634, 648, 688, 694, 751, 828, 836, 882, 894, 989], "24": [67, 121, 137, 148, 162, 256, 329, 331, 345, 439, 596, 629, 694, 764, 781, 856, 989], "001": [67, 348, 349, 351, 358, 558, 788, 790, 798], "next_pow2": 67, "prev_pow2": 67, "nearest_pow2": 67, "split_by_column_dtyp": 68, "collect_al": 68, "31": [69, 75, 127, 337, 341, 342, 354, 355, 359, 371, 512, 556, 557, 564, 568, 773, 777, 778, 795, 799, 947, 997], "42": [69, 162, 163, 256, 629, 694, 831, 989], "961": 69, "1764": 69, "4160": 69, "evalu": [70, 75, 102, 132, 133, 151, 153, 176, 256, 267, 281, 307, 331, 397, 399, 403, 424, 445, 539, 540, 543, 559, 578, 584, 589, 596, 624, 631, 633, 634, 694, 713, 764, 981, 989], "immedi": [70, 75, 102, 132, 133, 453, 543, 578, 584, 596, 883, 989], "arg_tru": [70, 596, 989], "build": [71, 92, 997], "wa": 71, "compil": [71, 283, 284, 716, 717], "gate": 71, "info": [71, 107, 116, 121, 346, 782], "otherwis": [71, 126, 131, 183, 202, 256, 307, 311, 320, 321, 322, 362, 377, 378, 379, 448, 455, 487, 489, 539, 540, 555, 570, 573, 585, 589, 596, 643, 653, 694, 703, 740, 743, 754, 755, 756, 802, 818, 819, 820, 885, 903, 904, 922, 924, 989], "depend": [71, 121, 270, 283, 284, 432, 453, 541, 561, 564, 596, 716, 717, 883, 989, 997], "host": [71, 104, 109, 113, 117, 119], "git": 71, "lazy_fram": 72, "type_coercion": [72, 614, 619, 621, 647, 657, 658, 659, 694], "predicate_pushdown": [72, 614, 619, 621, 638, 647, 657, 658, 659, 694], "projection_pushdown": [72, 614, 619, 621, 638, 647, 657, 658, 659, 694], "simplify_express": [72, 614, 619, 621, 647, 657, 658, 659, 694], "no_optim": [72, 614, 621, 638, 647, 658, 659, 694], "slice_pushdown": [72, 614, 619, 621, 638, 647, 657, 658, 659, 694], "common_subplan_elimin": [72, 614, 619, 621, 647, 657, 694], "graph": [72, 177, 256, 631, 673, 694], "parallel": [72, 73, 101, 106, 113, 119, 161, 176, 177, 189, 256, 289, 331, 596, 607, 628, 633, 634, 694, 722, 764, 989], "threadpool": [72, 131], "coercion": [72, 456, 596, 614, 619, 621, 647, 657, 658, 659, 694], "optim": [72, 113, 115, 117, 118, 119, 173, 177, 189, 193, 199, 225, 256, 614, 619, 621, 638, 647, 657, 658, 659, 667, 674, 694], "predic": [72, 115, 117, 118, 119, 120, 153, 172, 198, 256, 386, 537, 562, 596, 614, 619, 621, 624, 638, 647, 650, 657, 658, 659, 674, 694, 826, 903, 904, 989], "pushdown": [72, 614, 619, 621, 638, 647, 650, 657, 658, 659, 674, 694, 903, 904, 989], "project": [72, 115, 117, 118, 119, 270, 482, 483, 596, 614, 619, 621, 638, 647, 650, 657, 658, 659, 675, 694], "turn": [72, 104, 105, 115, 535, 596, 614, 619, 621, 638, 647, 658, 659, 694], "off": [72, 104, 105, 115, 535, 596, 614, 619, 621, 638, 647, 658, 659, 694], "Will": [72, 224, 256, 614, 619, 621, 647, 657, 694, 989], "try": [72, 86, 88, 104, 105, 108, 109, 113, 115, 117, 119, 614, 619, 621, 647, 657, 694], "branch": [72, 614, 619, 621, 647, 657, 694], "subplan": [72, 614, 619, 621, 647, 657, 694], "occur": [72, 287, 438, 453, 596, 614, 619, 621, 647, 657, 694, 720, 869, 883, 989], "union": [72, 73, 614, 619, 621, 647, 657, 694], "part": [72, 91, 127, 494, 508, 509, 614, 619, 621, 647, 657, 673, 694, 777, 780, 787, 789, 792, 794, 797, 804, 814, 929, 943, 944], "fashion": [72, 175, 256, 614, 619, 621, 647, 657, 694], "item": [73, 105, 198, 200, 256, 286, 292, 294, 382, 470, 509, 596, 719, 725, 727, 822, 900, 944, 989], "iter": [73, 128, 130, 138, 160, 161, 162, 173, 174, 188, 198, 199, 202, 203, 209, 223, 224, 233, 235, 236, 256, 331, 380, 446, 483, 539, 540, 544, 546, 547, 548, 549, 555, 560, 570, 573, 581, 584, 585, 589, 596, 610, 627, 628, 629, 653, 654, 661, 666, 672, 676, 694, 764, 989, 997], "polarstyp": 73, "concatmethod": 73, "vertic": [73, 150, 227, 231, 256, 486, 921], "rechunk": [73, 91, 96, 104, 105, 109, 113, 115, 117, 118, 119, 150, 256, 596, 702, 752, 870, 989], "combin": [73, 75, 86, 88, 161, 162, 163, 176, 229, 256, 267, 281, 359, 370, 445, 499, 505, 511, 596, 628, 629, 634, 657, 694, 799, 810, 934, 940, 946], "concaten": [73, 155, 189, 256, 448, 548, 549, 596, 646, 694, 752, 870, 989], "diagon": [73, 224, 256], "vstack": [73, 150, 256], "find": [73, 154, 256, 471, 596, 901, 989], "miss": [73, 104, 105, 115, 151, 256, 309, 377, 378, 379, 391, 398, 405, 407, 582, 596, 622, 694, 818, 819, 820, 980, 989], "stack": [73, 166, 231, 256], "don": [73, 137, 225, 227, 256, 270, 289, 331, 541, 596, 667, 694, 703, 722, 764, 902, 980, 989], "auto": [73, 91, 93, 94, 95, 97, 113, 119, 224, 256, 512, 694, 947, 997], "logic": [73, 137, 238, 256, 267, 445, 529, 538, 596, 626, 633, 649, 675, 678, 694, 703, 973, 989], "align_fram": 73, "pattern": [73, 104, 105, 115, 117, 118, 119, 173, 256, 430, 487, 488, 493, 494, 502, 503, 903, 904, 922, 923, 928, 929, 937, 938, 989], "collis": 73, "need": [73, 98, 102, 104, 105, 108, 122, 123, 133, 161, 162, 207, 219, 256, 307, 424, 475, 497, 578, 596, 628, 629, 694, 909, 932, 989], "sure": [73, 91, 96, 104, 105, 106, 109, 113, 193, 256, 543], "contigu": [73, 91, 96, 104, 105, 109, 113, 115, 117, 118, 119, 193, 256], "relev": 73, "df_h1": 73, "l1": 73, "l2": 73, "df_h2": 73, "r1": 73, "r2": 73, "r3": 73, "df_d1": 73, "df_d2": 73, "df_a1": 73, "df_a2": 73, "df_a3": 73, "bin": [74, 501, 538, 590, 596, 765, 833, 881, 936, 983, 989], "label": [74, 459, 460, 461, 462, 463, 464, 466, 467, 468, 596, 647, 694, 765, 881, 889, 890, 891, 892, 893, 894, 896, 897, 898, 989], "break_point_label": [74, 765, 881, 989], "break_point": [74, 765, 833, 881, 989], "category_label": [74, 765, 881, 989], "discret": [74, 288, 332, 375, 596, 721, 765, 767, 816, 833, 881, 989], "deprec": [74, 75, 99, 512, 567, 575, 582, 694, 947], "sinc": [74, 75, 99, 107, 116, 343, 512, 564, 567, 575, 582, 779, 947], "assign": [74, 125, 161, 256, 307, 453, 508, 509, 596, 628, 694, 740, 765, 864, 881, 883, 943, 944, 989], "breakpoint": [74, 765, 881, 989], "inf": [74, 127, 129, 277, 401, 404, 531, 596, 709, 765, 833, 841, 845, 863, 877, 881, 977, 989], "interv": [75, 132, 161, 162, 229, 256, 346, 363, 364, 370, 399, 460, 461, 462, 463, 464, 466, 467, 468, 596, 628, 629, 694, 777, 779, 780, 782, 787, 789, 792, 794, 797, 800, 801, 803, 804, 808, 810, 811, 812, 814, 837, 989], "timedelta": [75, 132, 161, 162, 229, 256, 341, 343, 344, 347, 352, 354, 359, 360, 361, 363, 364, 368, 370, 371, 372, 374, 460, 461, 462, 463, 464, 466, 467, 468, 596, 628, 629, 694, 784, 786, 791, 799, 803, 810, 873, 874, 989], "1d": [75, 161, 162, 176, 229, 256, 336, 345, 353, 359, 363, 370, 373, 460, 461, 462, 463, 464, 466, 467, 468, 568, 596, 628, 629, 634, 694, 772, 779, 781, 784, 785, 786, 791, 793, 799, 803, 808, 810, 812, 813], "_nodefault": [75, 102, 133, 190, 256, 512, 947], "no_default": [75, 102, 133, 190, 256, 512, 947], "closedinterv": [75, 132, 161, 162, 256, 399, 460, 461, 462, 463, 464, 466, 467, 468, 596, 628, 629, 694, 837, 989], "lower": [75, 115, 132, 161, 192, 248, 256, 320, 322, 399, 420, 423, 452, 455, 464, 543, 576, 596, 621, 628, 648, 688, 694, 756, 837, 863, 882, 885, 894, 977, 989], "bound": [75, 104, 105, 132, 148, 161, 256, 292, 306, 307, 320, 321, 322, 399, 420, 534, 543, 596, 628, 694, 725, 739, 755, 756, 817, 837, 863, 977, 989], "upper": [75, 104, 105, 132, 148, 161, 256, 307, 320, 321, 399, 534, 543, 596, 628, 694, 755, 817, 837, 863, 977, 989], "period": [75, 132, 161, 162, 205, 206, 256, 301, 363, 370, 377, 378, 379, 447, 473, 474, 596, 628, 629, 655, 656, 694, 734, 803, 810, 818, 819, 820, 877, 907, 908, 989], "durat": [75, 132, 176, 229, 256, 342, 345, 349, 351, 353, 358, 365, 373, 529, 596, 634, 694, 778, 781, 788, 790, 793, 798, 805, 813, 973, 989], "3d12h4m25": [75, 161, 162, 176, 229, 256, 363, 370, 628, 629, 634, 694, 803, 810], "hour": [75, 132, 161, 162, 176, 229, 256, 359, 363, 370, 460, 461, 462, 463, 464, 466, 467, 468, 557, 558, 587, 596, 628, 629, 634, 694, 799, 803, 810], "minut": [75, 132, 161, 162, 176, 229, 256, 359, 363, 370, 460, 461, 462, 463, 464, 466, 467, 468, 557, 558, 587, 596, 628, 629, 634, 694, 799, 803, 810], "17": [75, 121, 127, 132, 236, 469, 512, 564, 567, 596, 676, 758, 803, 947, 989, 997], "tempor": [75, 132, 161, 162, 173, 199, 216, 256, 399, 460, 461, 462, 463, 464, 466, 467, 468, 596, 607, 628, 629, 694, 837, 853, 989], "window": [75, 132, 161, 162, 256, 331, 363, 370, 377, 378, 379, 446, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 548, 579, 580, 596, 628, 629, 694, 764, 803, 810, 818, 819, 820, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 989], "granular": 75, "finer": 75, "permut": 75, "1mo": [75, 161, 162, 176, 229, 256, 338, 342, 355, 356, 359, 362, 363, 370, 460, 461, 462, 463, 464, 466, 467, 468, 596, 628, 629, 634, 694, 774, 778, 794, 795, 796, 799, 800, 801, 802, 803, 810, 811], "dtrang": 75, "1985": 75, "04": [75, 120, 161, 229, 256, 337, 338, 341, 342, 345, 352, 353, 354, 355, 356, 360, 362, 363, 364, 365, 366, 369, 371, 372, 373, 512, 558, 628, 694, 774, 778, 781, 787, 789, 792, 793, 794, 795, 796, 797, 801, 802, 804, 805, 806, 809, 811, 812, 813, 947], "05": [75, 120, 122, 123, 127, 176, 229, 256, 337, 338, 342, 362, 364, 366, 369, 634, 694, 773, 774, 775, 776, 777, 778, 802, 803, 806, 807, 809, 810, 812], "07": [75, 132, 337, 341, 360, 362, 363, 370, 372, 512, 564, 773, 777, 802, 812, 947], "08": [75, 122, 123, 127, 132, 162, 256, 337, 363, 512, 558, 629, 694, 803, 810, 947], "america": 75, "new_york": 75, "\u03bc": [75, 98, 127, 161, 162, 176, 229, 256, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 512, 514, 558, 564, 628, 629, 634, 694, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 810, 811, 812, 813, 814, 947, 949], "est": 75, "month_end": 75, "last": [75, 138, 164, 176, 178, 190, 209, 212, 223, 225, 250, 256, 280, 292, 305, 331, 341, 355, 360, 370, 371, 482, 509, 524, 586, 596, 610, 634, 661, 664, 666, 667, 690, 694, 712, 725, 738, 764, 777, 795, 800, 811, 832, 859, 944, 960, 989], "month": [75, 161, 162, 176, 229, 256, 341, 355, 356, 359, 363, 370, 460, 461, 462, 463, 464, 466, 467, 468, 556, 557, 596, 628, 629, 634, 694, 777, 795, 796, 799, 803, 810], "28": [75, 161, 162, 176, 215, 229, 256, 263, 359, 362, 363, 370, 373, 460, 461, 462, 463, 464, 466, 467, 468, 596, 628, 629, 634, 694, 799, 802, 803, 810, 813, 997], "disabl": [76, 173, 256], "equal": [76, 104, 105, 115, 122, 123, 156, 161, 176, 183, 256, 307, 376, 392, 414, 459, 460, 461, 462, 463, 464, 466, 467, 468, 497, 498, 504, 518, 543, 579, 580, 596, 628, 634, 643, 694, 740, 889, 890, 891, 892, 893, 894, 896, 897, 898, 902, 932, 933, 939, 953, 989, 997], "encount": [77, 161, 256, 441, 442, 495, 496, 550, 553, 562, 582, 596, 628, 694, 873, 874, 930, 931, 989], "certain": [81, 107, 116, 167, 229, 256, 547, 614, 647, 658, 659, 694, 989], "least": [83, 127, 447, 535, 596, 877, 978, 989], "unexpect": [84, 256], "caus": [84, 92, 104, 105, 115, 136, 150, 256, 702, 989], "panic": 84, "mismatch": 86, "incompat": 88, "pa": [91, 120], "chunkedarrai": [91, 185, 256, 768, 989], "recordbatch": [91, 174, 256], "schemadefinit": [91, 93, 94, 95, 97, 256, 694], "schema_overrid": [91, 93, 94, 95, 96, 97, 174, 219, 256, 694], "copi": [91, 92, 136, 139, 140, 174, 214, 219, 220, 233, 256, 383, 518, 596, 612, 613, 672, 694, 699, 753, 757, 770, 823, 953, 966, 971, 972, 989], "closest": 91, "pair": [91, 93, 94, 95, 97, 126, 194, 256, 650, 694, 997], "sever": [91, 93, 94, 95, 97, 256, 694, 997], "wai": [91, 93, 94, 95, 97, 144, 160, 174, 189, 209, 236, 256, 446, 448, 483, 493, 547, 596, 616, 627, 646, 661, 676, 694, 928], "equival": [91, 93, 94, 95, 97, 107, 172, 186, 256, 263, 267, 376, 390, 392, 393, 414, 421, 437, 439, 443, 445, 449, 500, 521, 531, 538, 596, 694, 856, 935, 950, 952, 989], "form": [91, 93, 94, 95, 97, 173, 199, 227, 256, 447, 596, 694, 877, 989], "them": [91, 93, 94, 95, 97, 115, 150, 161, 162, 176, 183, 229, 256, 294, 399, 441, 442, 548, 596, 628, 629, 634, 643, 694, 702, 727, 873, 874, 989], "dimens": [91, 93, 95, 97, 256, 457, 596, 694, 887, 989], "allow_copi": [92, 136], "interchang": [92, 136], "__dataframe__": 92, "convers": [92, 136, 174, 220, 256, 512, 513, 514, 516, 607, 947, 948, 949, 951, 970, 971, 972, 989], "detail": [92, 106, 122, 123, 136, 256, 694, 997], "latest": [92, 107, 116, 136, 391, 433, 596], "index": [92, 96, 100, 106, 121, 136, 154, 161, 162, 167, 172, 176, 190, 196, 198, 208, 221, 229, 234, 256, 264, 278, 279, 280, 282, 283, 284, 292, 302, 306, 307, 359, 460, 461, 462, 463, 464, 466, 467, 468, 471, 481, 493, 506, 525, 596, 628, 629, 634, 660, 674, 694, 710, 711, 712, 713, 714, 716, 717, 725, 735, 739, 740, 799, 856, 875, 901, 904, 916, 928, 941, 961, 989], "runtimeerror": 92, "from_panda": [92, 108], "from_arrow": 92, "effici": [92, 174, 256], "clone": [93, 94, 95, 96, 97, 139, 219, 220, 256, 612, 694, 753, 970, 971, 972, 980, 989], "dimension": [93, 95, 97, 256, 694, 989], "infer_schema_length": [94, 97, 104, 105, 108, 115, 118, 256, 694], "NOT": [94, 122, 123, 431, 996], "typic": [94, 137, 256, 703, 989], "clearer": 94, "load": [94, 96, 107, 116, 128, 130, 256, 607, 630, 637, 694, 997], "_partial_": [94, 256, 694], "omit": [94, 98, 125, 127, 129, 132, 134, 186, 256], "mani": [94, 97, 106, 150, 256, 702, 989], "scan": [94, 97, 104, 105, 113, 115, 116, 117, 118, 119, 120, 621, 630, 637, 694], "slow": [94, 97, 104, 105, 115, 270, 331, 596, 764, 989], "partial": 94, "present": [94, 122, 127, 403, 596, 980, 989], "np": [95, 153, 219, 256, 525, 596, 694, 841, 845, 847, 848, 889, 961, 989], "ndarrai": [95, 153, 219, 256, 525, 596, 694, 768, 901, 904, 961, 971, 989], "numpi": [95, 121, 142, 219, 220, 256, 441, 442, 596, 694, 841, 845, 847, 848, 873, 874, 889, 971, 972, 980, 989], "columnar": [95, 97, 173, 199, 256], "interpret": [95, 97, 104, 105, 115, 256, 694], "yield": [95, 97, 104, 105, 115, 148, 150, 224, 256, 694, 702, 817, 989], "conclus": [95, 97, 256, 694], "nan_to_nul": [96, 256, 694, 989], "include_index": 96, "datetimeindex": [96, 768, 989], "panda": [96, 108, 121, 220, 256, 355, 356, 529, 596, 694, 795, 796, 972, 973, 989], "instal": [96, 104, 105, 106, 109, 113, 121, 142, 219, 220, 256, 657, 694, 972, 989], "nan": [96, 122, 123, 127, 136, 151, 220, 256, 334, 335, 376, 384, 392, 393, 398, 405, 407, 408, 409, 414, 421, 425, 436, 441, 442, 443, 531, 550, 582, 596, 622, 694, 705, 709, 769, 824, 847, 848, 873, 874, 889, 972, 989, 997], "convert": [96, 99, 107, 108, 116, 136, 215, 216, 217, 218, 219, 222, 256, 307, 338, 366, 369, 423, 501, 512, 513, 514, 516, 596, 694, 740, 774, 806, 809, 936, 947, 948, 949, 951, 958, 969, 970, 971, 972, 980, 989], "pd": [96, 108, 529, 596, 973, 989], "pd_df": 96, "pd_seri": 96, "tbl": [98, 101, 105], "reconstruct": 98, "repr": [98, 127, 129], "trim": 98, "whitespac": [98, 499, 505, 511, 934, 940, 946], "prompt": 98, "extract": [98, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 357, 358, 360, 361, 364, 365, 371, 372, 374, 448, 494, 495, 496, 596, 775, 776, 777, 778, 780, 781, 783, 787, 788, 789, 790, 792, 793, 794, 797, 798, 800, 801, 804, 805, 807, 811, 812, 814, 929, 930, 931], "to_init_repr": [98, 256, 989], "truncat": [98, 161, 256, 359, 628, 647, 694, 799], "identifi": [98, 182, 188, 225, 256, 642, 667, 694], "compound": 98, "struct": [98, 186, 202, 222, 226, 233, 256, 307, 424, 495, 508, 509, 535, 553, 554, 555, 569, 596, 653, 668, 672, 694, 740, 930, 943, 944], "neither": [98, 108, 200, 256, 307, 740], "source_ac": 98, "source_cha": 98, "ident": [98, 139, 140, 256, 366, 612, 613, 694, 753, 757, 806, 989], "timestamp": [98, 362, 564, 802], "tor_id": 98, "nnel_id": 98, "asia": [98, 775, 776, 807], "tokyo": 98, "123456780": 98, "9876543210": 98, "56": [98, 132, 527, 596], "59": [98, 126, 132, 337, 352, 364, 557, 587, 773, 792, 804], "663053": 98, "jst": 98, "803065983": 98, "2055938745": 98, "38": [98, 127], "18": [98, 132, 162, 256, 330, 363, 370, 373, 398, 411, 596, 629, 647, 694, 813], "050545": 98, "source_actor_id": 98, "source_channel_id": 98, "sr": [98, 699, 989], "to_list": [98, 162, 256, 629, 694, 922, 989], "dummi": [99, 217, 256, 967, 989], "to_dummi": [99, 256, 989], "foo_1": [99, 217, 256], "foo_2": [99, 217, 256], "bar_3": [99, 217, 256], "bar_4": [99, 217, 256], "ham_a": [99, 217, 256], "ham_b": [99, 217, 256], "datatypeclass": 100, "uint32": [100, 121, 148, 256, 280, 283, 284, 296, 341, 344, 348, 350, 352, 354, 357, 360, 361, 364, 371, 372, 456, 488, 497, 500, 525, 529, 596, 713, 716, 717, 729, 748, 777, 780, 787, 789, 792, 794, 797, 800, 801, 804, 811, 812, 817, 846, 902, 923, 973, 989], "regular": [100, 173, 198, 199, 229, 256, 380, 487, 488, 493, 494, 502, 503, 547, 560, 570, 573, 585, 596, 922, 923, 928, 929, 937, 938], "uint64": [100, 163, 256, 283, 284, 394, 455, 596, 716, 717, 831, 885, 989], "bigidx": 100, "read": [101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 150, 256, 422, 589, 596, 621, 626, 649, 694, 702, 989], "batch": [101, 105, 118, 638, 694], "over": [101, 104, 105, 107, 115, 127, 137, 150, 173, 174, 198, 199, 224, 235, 238, 256, 270, 331, 385, 398, 422, 423, 459, 460, 461, 462, 463, 464, 466, 467, 468, 541, 553, 554, 562, 569, 577, 596, 678, 702, 703, 764, 889, 890, 891, 893, 897, 989], "fetch": [101, 115, 177, 256, 612, 614, 630, 637, 694], "ideal": 101, "read_csv_batch": [101, 608], "tpch": [101, 105], "tables_scale_100": [101, 105], "lineitem": [101, 105, 106], "try_parse_d": [101, 104, 105, 115], "syntact": [102, 133, 228, 256, 560, 561, 565, 576, 581, 669, 694, 918, 989], "sugar": [102, 133, 228, 256, 560, 561, 565, 576, 581, 669, 694, 918, 989], "repeat": [102, 109, 117, 133, 454, 456, 596], "pre": [102, 133, 307, 578], "i8": [102, 133, 475, 578, 596, 767, 888, 977, 989], "n_row": [103, 104, 105, 109, 113, 115, 117, 118, 119, 174, 256, 621, 694], "accept": [103, 104, 105, 107, 109, 113, 138, 149, 160, 202, 209, 223, 233, 236, 256, 263, 380, 399, 446, 483, 538, 539, 540, 544, 546, 547, 548, 549, 555, 560, 570, 573, 584, 585, 596, 610, 620, 627, 653, 661, 666, 672, 676, 694, 837, 989], "stop": [103, 104, 105, 109, 113, 115, 117, 118, 119, 132, 341, 343, 344, 346, 347, 352, 354, 360, 361, 363, 364, 368, 370, 371, 372, 374, 772, 774, 777, 779, 780, 782, 787, 789, 792, 794, 797, 800, 801, 803, 804, 808, 810, 811, 812, 813, 814], "textio": 104, "new_column": [104, 105, 108, 115, 195, 256], "comment_char": [104, 105, 115], "quote_char": [104, 105, 115], "skip_row": [104, 105, 115], "missing_utf8_is_empty_str": [104, 105, 115], "ignore_error": [104, 105, 115], "n_thread": [104, 105], "8192": 104, "csvencod": [104, 105, 115], "low_memori": [104, 105, 113, 115, 118, 119], "skip_rows_after_head": [104, 105, 115], "row_count_nam": [104, 105, 109, 113, 115, 117, 118, 119], "row_count_offset": [104, 105, 109, 113, 115, 117, 118, 119], "sample_s": [104, 105], "eol_char": [104, 105, 115], "we": [104, 105, 108, 115, 176, 256, 289, 501, 568, 589, 634, 638, 694, 703, 722, 833, 881, 936, 989], "handler": [104, 105, 108], "g": [104, 105, 107, 108, 109, 113, 116, 117, 119, 161, 162, 176, 227, 229, 256, 263, 270, 359, 363, 370, 380, 460, 461, 462, 463, 464, 466, 467, 468, 475, 560, 596, 628, 629, 634, 650, 694, 799, 803, 810, 902, 971, 989], "builtin": [104, 105, 108], "stringio": [104, 105], "fsspec": [104, 105, 109, 113, 116, 117, 119, 121], "remot": [104, 105, 109, 113], "autogener": [104, 105, 115], "column_x": [104, 105, 115], "enumer": [104, 105, 115, 174, 256], "shorter": [104, 105], "comment": [104, 105, 115], "instanc": [104, 105, 115, 127, 129, 134, 150, 155, 256, 317, 433, 460, 461, 462, 463, 464, 466, 467, 468, 553, 562, 596, 638, 674, 694, 702, 748, 989], "special": [104, 105, 115, 494, 703, 929, 989], "escap": [104, 105, 115], "dure": [104, 105, 115, 134, 150, 256, 702, 989], "would": [104, 105, 115, 280, 292, 432, 453, 544, 596, 712, 725, 883, 971, 989], "prefer": [104, 105, 107, 115, 130, 137, 150, 173, 198, 199, 238, 256, 270, 459, 596, 678, 694, 702, 703, 889, 989, 997], "treat": [104, 105, 115, 487, 502, 503, 922, 937, 938], "10000": [104, 174, 256, 518], "check": [104, 105, 115, 122, 123, 156, 170, 172, 256, 266, 268, 286, 310, 313, 314, 399, 403, 487, 491, 510, 596, 638, 694, 700, 701, 719, 742, 745, 746, 838, 840, 843, 844, 846, 851, 852, 853, 855, 856, 902, 922, 926, 945, 989], "might": [104, 105, 115, 131, 270, 533, 596, 972, 989], "issu": [104, 105, 108, 115, 329, 330, 523, 596, 762, 763, 959, 989], "iso8601": [104, 105, 115], "physic": [104, 105, 176, 256, 318, 529, 596, 611, 633, 634, 694, 750, 973, 989], "cpu": [104, 105], "system": [104, 105], "wrongli": 104, "done": [104, 105, 115, 120, 159, 176, 256, 269, 271, 317, 498, 504, 542, 596, 634, 694, 748, 933, 939, 989], "buffer": [104, 105, 148, 173, 256, 817, 989], "modifi": [104, 105, 115, 131, 134, 166, 173, 231, 256, 281, 362, 373, 487, 493, 494, 502, 596, 802, 813, 886, 922, 928, 929, 937, 950, 952, 989], "lossi": [104, 105, 115], "decod": [104, 105], "reduc": [104, 105, 113, 115, 117, 118, 119, 243, 244, 246, 249, 475, 562, 596, 659, 683, 684, 686, 689, 694, 866, 880, 909, 959, 989], "usag": [104, 105, 115, 127, 129, 207, 256, 910, 989], "expens": [104, 105, 113, 115, 118, 119, 128, 130, 137, 173, 198, 199, 224, 225, 256, 270, 596, 667, 694, 702, 703, 989, 997], "aggreg": [104, 105, 113, 155, 161, 162, 179, 180, 181, 184, 186, 190, 191, 192, 210, 211, 227, 230, 236, 237, 240, 242, 256, 264, 386, 396, 422, 446, 459, 460, 461, 462, 463, 464, 466, 467, 468, 535, 539, 540, 553, 554, 555, 562, 567, 570, 573, 577, 585, 596, 628, 629, 638, 639, 640, 641, 644, 645, 648, 662, 663, 670, 676, 677, 680, 682, 694, 834, 889, 890, 891, 893, 896, 897, 898, 989], "nativ": [104, 109, 113, 125, 137, 173, 199, 216, 238, 256, 270, 596, 601, 678, 703, 989, 997], "parser": 104, "even": [104, 448, 596], "regard": [104, 550, 582], "sens": [104, 109, 113, 117, 119, 161, 162, 183, 229, 256, 628, 629, 643, 694], "particular": [104, 109, 113, 117, 119, 148, 256, 817, 989], "skip": [104, 105, 108, 113, 115, 119, 227, 256, 703, 989], "offset": [104, 105, 109, 113, 115, 117, 118, 119, 161, 162, 208, 229, 234, 256, 302, 355, 356, 359, 363, 370, 481, 506, 512, 514, 596, 628, 629, 660, 674, 694, 735, 795, 796, 799, 803, 810, 916, 941, 947, 949, 989], "row_count": [104, 105, 109, 113, 115, 117, 118, 119], "sampl": [104, 105, 238, 256, 480, 596, 678, 915, 989], "estim": [104, 105, 148, 256, 271, 378, 379, 412, 542, 596, 694, 817, 819, 820, 857, 989], "alloc": [104, 105, 148, 193, 256, 817, 989], "scan_csv": [104, 105, 658, 659, 694], "lazili": [104, 105, 115, 116, 117, 118, 119, 424, 596], "glob": [104, 105, 115, 117, 118, 119], "continu": [104, 113, 480, 596, 915, 989], "benchmark": [104, 113, 316, 596], "50000": 105, "batchedcsvread": [105, 607], "upon": 105, "creation": 105, "gather": 105, "next_batch": 105, "big": 105, "interest": 105, "seen_group": 105, "big_fil": 105, "df_current_batch": 105, "concat": [105, 752, 870, 989], "partition_df": 105, "partition_bi": [105, 174, 256], "as_dict": [105, 188, 256], "fh": 105, "write_csv": [105, 115, 256], "els": [105, 589], "partition_on": 106, "partition_rang": 106, "partition_num": 106, "dbreadengin": 106, "connectorx": [106, 121], "raw": 106, "partit": [106, 107, 113, 116, 120, 174, 188, 256], "transfer": 106, "document": [106, 108, 366, 369, 496, 512, 513, 514, 516, 806, 809, 931, 947, 948, 949, 951], "redshift": 106, "mysql": 106, "mariadb": 106, "clickhous": 106, "oracl": 106, "bigqueri": 106, "pleas": 106, "doc": [106, 142, 256], "github": 106, "sfu": 106, "db": 106, "connector": 106, "destin": 106, "sqlite": 106, "develop": [106, 127, 129], "flight_sql": 106, "further": [106, 972, 989], "wide": [106, 159, 182, 227, 256, 642, 694], "adopt": 106, "significantli": [106, 997], "better": [106, 137, 219, 238, 256, 270, 535, 596, 678, 903, 904, 989], "driver": 106, "cpp": 106, "partition_col": 106, "explicitli": [106, 125, 127, 134, 424, 584, 596], "delta_table_opt": [107, 116], "root": [107, 116, 411, 423, 434, 450, 484, 522, 595, 596, 918, 989], "absolut": [107, 116, 122, 123, 262, 377, 378, 379, 596, 698, 818, 819, 820, 989], "avoid": 107, "year": [107, 116, 161, 162, 176, 229, 256, 346, 347, 359, 360, 363, 370, 371, 460, 461, 462, 463, 464, 466, 467, 468, 556, 557, 596, 628, 629, 634, 694, 782, 783, 799, 800, 803, 810, 811], "2021": [107, 116, 143, 159, 161, 229, 256, 512, 568, 628, 694, 775, 776, 783, 807, 853, 947, 989], "aw": [107, 116], "googl": [107, 116], "service_account": [107, 116], "service_account_json_absolute_path": [107, 116], "az": [107, 116], "adl": [107, 116], "abf": [107, 116], "azure_storage_account_nam": [107, 116], "azure_storage_account_kei": [107, 116], "without_fil": [107, 116], "track": [107, 116, 137, 256, 307, 996], "sheet_id": 108, "sheet_nam": 108, "xlsx2csv_option": 108, "read_csv_opt": 108, "noreturn": [108, 578], "xlsx2csv": [108, 121], "read_csv": [108, 115], "nor": [108, 200, 256], "skip_empty_lin": 108, "my": [108, 120], "datasheet": 108, "correct": [108, 378, 379, 412, 465, 480, 596, 638, 694, 819, 820, 857, 895, 915, 989], "look": [108, 307, 310, 742], "whole": [108, 482, 483, 493, 596, 694, 928], "With": [108, 137, 172, 256, 270, 596, 703, 856, 989], "1000": [108, 148, 218, 256, 348, 349, 518, 788, 969, 989, 997], "spreadsheet": [108, 190, 256], "xl": 108, "xlsm": 108, "xlsb": 108, "odf": 108, "od": [108, 511, 946], "odt": 108, "memory_map": [109, 113, 117], "v2": [109, 117], "greatli": [109, 117], "improv": [109, 117, 659, 694], "page": [109, 113, 117, 119, 256, 596, 607, 659, 694, 989], "give": [109, 113, 117, 118, 119, 182, 225, 256, 343, 412, 456, 531, 596, 607, 642, 667, 694, 779, 857, 989], "That": [109, 638, 694], "filenam": 109, "my_fil": 109, "write_ipc": [109, 256], "read_ndjson": 111, "parallelstrategi": [113, 119], "use_statist": [113, 119], "awar": [113, 173, 199, 216, 256, 512, 514, 947, 949], "stabl": [113, 142, 200, 256, 419, 596, 642, 694], "row_group": [113, 119], "pressur": [113, 118, 119, 475, 596, 659, 694, 909, 989], "read_tabl": 113, "with_column_nam": 115, "push": [115, 117, 118, 119, 120], "down": [115, 117, 118, 119, 120, 389, 596, 828, 989], "therebi": [115, 117, 118, 119], "potenti": [115, 117, 118, 119], "overhead": [115, 117, 118, 119], "realloc": [115, 117, 118, 150, 256, 702, 989], "headerless": 115, "unlik": 115, "fewer": 115, "my_long_fil": 115, "doesn": [115, 375, 596, 816, 980, 989], "thing": [115, 561], "less": [115, 176, 256, 414, 421, 498, 504, 509, 518, 596, 634, 694, 933, 939, 944, 953, 997], "limit": [115, 152, 256, 309, 320, 321, 322, 385, 391, 596, 623, 630, 659, 694, 754, 755, 756, 825, 989], "breezah": 115, "languag": [115, 161, 162, 176, 229, 256, 359, 363, 370, 460, 461, 462, 463, 464, 466, 467, 468, 596, 628, 629, 634, 694, 799, 803, 810], "hard": [115, 638, 694], "mydf": 115, "lambda": [115, 137, 155, 189, 238, 256, 270, 307, 377, 378, 379, 422, 423, 459, 541, 553, 554, 562, 569, 577, 596, 638, 646, 678, 694, 703, 740, 818, 819, 820, 989], "simpli": [115, 553, 562], "idx": [115, 161, 174, 256, 307, 628, 694, 740, 904, 989], "uint16": [115, 329, 330, 523, 596, 762, 763, 959, 989], "u16": [115, 127, 997], "eu": 116, "central": [116, 412, 480, 596, 857, 915, 989], "allow_pyarrow_filt": 120, "comparison": 120, "dset": 120, "folder": 120, "stdout": [121, 159, 256], "platform": 121, "linux": 121, "90": 121, "wsl2": 121, "x86_64": 121, "glibc2": 121, "main": 121, "apr": 121, "14": [121, 127, 132, 137, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 256, 347, 398, 596, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 803], "44": [121, 333, 596], "51": 121, "gcc": 121, "matplotlib": [121, 647, 657, 694], "check_dtyp": [122, 123], "check_exact": [122, 123], "rtol": [122, 123], "1e": [122, 123], "atol": [122, 123], "nans_compare_equ": [122, 123], "check_column_ord": 122, "check_row_ord": 122, "assertionerror": [122, 123], "compar": [122, 123, 156, 256, 376, 392, 393, 414, 421, 443, 540, 596, 902, 989], "exactli": [122, 123, 126, 127, 129, 508, 509, 910, 943, 944, 989], "toler": [122, 123, 176, 256, 634, 694], "inexact": [122, 123], "assert": [122, 123, 125, 127, 129, 162, 256, 607, 629, 694, 830, 989], "irrespect": 122, "unsort": 122, "check_nam": 123, "s1": [123, 155, 256, 740, 856, 972, 981, 989], "searchstrategi": [124, 126, 127, 129], "null_prob": [124, 127, 129], "percentag": [124, 127, 129, 447, 596, 877, 989], "chanc": [124, 127, 129, 997], "independ": [124, 125, 127, 129], "flag": [124, 472, 487, 493, 494, 502, 596, 619, 638, 694, 905, 922, 928, 929, 937, 989], "hypothesi": [124, 125, 126, 127, 128, 129, 997], "sampled_from": [124, 997], "unique_small_int": 124, "ccy": [124, 997], "gbp": [124, 997], "eur": [124, 143, 159, 256, 997], "jpy": [124, 997], "min_col": [125, 127], "max_col": [125, 127], "standalon": [125, 127], "mincol": 125, "exact": [125, 127, 129, 207, 256, 512, 513, 514, 531, 596, 947, 948, 949], "minimum": [125, 126, 127, 129, 155, 184, 256, 377, 378, 379, 436, 442, 453, 573, 596, 644, 659, 694, 754, 791, 818, 819, 820, 874, 879, 883, 989, 997], "especi": 125, "test_unique_xyz": 125, "assert_someth": 125, "punctuat": 125, "test_special_char_colname_init": 125, "inner_dtyp": [126, 129], "select_from": [126, 129], "min_siz": [126, 127, 129, 997], "max_siz": [126, 127, 129, 997], "anoth": [126, 160, 256, 306, 331, 336, 428, 431, 596, 627, 673, 694, 739, 764, 772, 902, 989], "randomli": 126, "innermost": 126, "2x": 126, "lst": 126, "11330": 126, "24030": 126, "116": 126, "zz": [126, 129], "small": [126, 177, 256, 363, 621, 694, 997], "uint8_pair": [126, 997], "uint": [126, 997], "zip": [126, 997], "131": 126, "176": 126, "149": [126, 997], "include_col": 127, "allow_infin": [127, 129], "allowed_dtyp": [127, 129, 997], "excluded_dtyp": [127, 129], "describ": [127, 159, 256, 989], "desir": [127, 307, 740], "n_chunk": [127, 129, 256, 989], "randomis": 127, "onto": 127, "pct": 127, "preced": 127, "disallow": [127, 129], "exclud": [127, 129, 327, 330, 399, 547, 582, 596, 837, 853, 989], "deploi": [127, 129], "characterist": [127, 129], "concret": [127, 129], "test_repr": 127, "isinst": [127, 129, 256], "0x11f561580": 127, "known": [127, 307, 678, 740], "0565": 127, "34715": 127, "5844": 127, "33": [127, 464, 469, 547, 596, 894, 989], "076854": 127, "3382": 127, "48662": 127, "7540": 127, "29": [127, 132, 161, 162, 176, 229, 256, 355, 359, 363, 370, 460, 461, 462, 463, 464, 466, 467, 468, 596, 628, 629, 634, 694, 795, 799, 803, 810], "836271": 127, "4063": 127, "06": [127, 132, 229, 256, 337, 347, 361, 362, 374, 802, 803, 812], "39092": 127, "1889": 127, "13": [127, 132, 139, 140, 151, 152, 158, 162, 167, 177, 185, 233, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 256, 459, 461, 548, 553, 562, 588, 596, 612, 613, 622, 623, 629, 636, 672, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 694, 703, 803, 810, 811, 989], "41": [127, 997], "874455": 127, "15836": 127, "1755e": 127, "575050513": 127, "profil": [128, 130, 694], "balanc": [128, 130, 997], "set_environ": 128, "polars_hypothesis_profil": [128, 130], "1500": 128, "constructor": 129, "max_data_s": 129, "normal": [129, 161, 256, 375, 412, 480, 596, 628, 694, 816, 857, 915, 989], "test_repr_is_valid_str": 129, "experi": 129, "create_list_strategi": [129, 997], "polars_max_thread": 131, "behind": 131, "lock": 131, "reason": 131, "pyspark": 131, "udf": [131, 137, 189, 238, 256, 270, 448, 541, 596, 646, 678, 694, 703, 989], "similar": [131, 155, 176, 256, 366, 369, 446, 589, 596, 634, 694, 806, 809], "recommend": [131, 173, 189, 256], "1h": [132, 161, 162, 176, 229, 256, 359, 363, 370, 460, 461, 462, 463, 464, 466, 467, 468, 596, 628, 629, 634, 694, 780, 799, 803, 810], "23": [132, 161, 162, 256, 337, 344, 363, 557, 587, 628, 629, 694, 773, 780, 997], "999999": [132, 557, 587], "1h30m25": 132, "tm": [132, 337], "third": [132, 422, 596], "lf": [132, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 694, 996, 997], "6h": 132, "5h59m": 132, "1h29m": 132, "58": 132, "57": [132, 899, 989, 997], "19": [132, 162, 176, 256, 363, 629, 634, 694, 803, 810], "initi": [134, 553, 562, 589], "whatev": 134, "were": 134, "enter": 134, "advantag": [134, 189, 256], "initialis": [134, 694, 996], "set_": 134, "set_verbos": 134, "do_various_th": 134, "restor": 134, "breviti": 134, "nan_as_nul": 136, "_pyarrowdatafram": 136, "nullabl": 136, "extens": [136, 220, 256, 972, 989], "propag": [136, 180, 211, 256, 441, 442, 596, 873, 874, 989], "inference_s": [137, 256], "256": [137, 256, 877, 989], "user": [137, 189, 238, 256, 270, 448, 472, 541, 596, 646, 678, 694, 703, 905, 989], "almost": [137, 238, 256, 678, 703, 989], "_significantly_": [137, 238, 256, 678, 703, 989], "intens": [137, 238, 256, 678, 703, 989], "becaus": [137, 148, 161, 177, 227, 238, 256, 289, 628, 678, 694, 703, 722, 817, 989], "forc": [137, 176, 238, 256, 633, 634, 678, 694, 703, 989], "materi": [137, 238, 256, 647, 678, 694, 703, 989], "parallelis": [137, 238, 256, 678, 703, 989], "optimis": [137, 238, 256, 678, 694, 703, 903, 904, 989], "achiev": [137, 238, 256, 270, 596, 678, 703, 989], "best": [137, 238, 256, 270, 596, 678, 703, 989], "tri": [137, 256], "arbitrarili": [137, 256], "rearrang": [137, 256], "transform": [137, 256, 422, 515, 517, 596], "preserv": [137, 219, 220, 256, 477, 596, 912, 972, 989], "lru_cach": [137, 256, 270, 596, 703, 989], "magnitud": [137, 256, 270, 596, 703, 989], "column_1": [137, 224, 256], "scalar": [137, 172, 198, 256, 471, 541, 568, 596, 856, 901, 989], "k": [138, 223, 256, 315, 318, 412, 530, 596, 610, 666, 694, 747, 750, 857, 974, 989], "intoexpr": [138, 160, 161, 162, 202, 209, 223, 233, 236, 256, 399, 446, 483, 539, 540, 544, 546, 548, 549, 553, 555, 562, 570, 573, 581, 584, 585, 589, 596, 610, 627, 628, 629, 653, 661, 666, 672, 676, 694, 837, 989], "nulls_last": [138, 209, 223, 256, 280, 482, 596, 610, 661, 666, 694, 712, 989], "smallest": [138, 223, 256, 315, 596, 610, 666, 694, 747, 989], "largest": [138, 161, 162, 176, 223, 229, 256, 359, 363, 370, 460, 461, 462, 463, 464, 466, 467, 468, 530, 596, 610, 628, 629, 634, 666, 694, 799, 803, 810, 974, 989], "top": [138, 223, 256, 610, 666, 694], "top_k": [138, 256, 315, 596, 610, 694, 747, 989], "cheap": [139, 140, 256, 612, 613, 694, 702, 753, 757, 989], "deepcopi": [139, 140, 256, 612, 613, 694, 753, 757, 989], "clear": [140, 256, 613, 694, 757, 989], "properti": [141, 147, 165, 201, 204, 232, 256, 615, 618, 652, 671, 694, 997], "appl": [141, 166, 175, 194, 196, 215, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 256, 450, 458, 491, 510, 522, 596, 633, 650, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 694, 926, 945], "banana": [141, 215, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 256, 450, 458, 522, 596, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689], "pearson": [142, 256, 412, 480, 550, 575, 596, 857, 915, 989], "correl": [142, 256, 550, 575, 579, 582], "coeffici": [142, 256, 480, 596, 915, 989], "corrcoef": [142, 256], "percentil": [143, 256, 766, 989], "summari": [143, 256, 766, 989], "glimps": [143, 164, 256], "usd": [143, 159, 256, 997], "2020": [143, 159, 162, 256, 338, 342, 345, 348, 349, 351, 353, 358, 362, 365, 366, 369, 512, 513, 514, 629, 694, 774, 778, 781, 788, 790, 793, 798, 802, 805, 806, 809, 947, 948, 949], "null_count": [143, 146, 256, 331, 596, 694, 764, 766, 989], "266667": [143, 256], "666667": [143, 180, 230, 244, 256, 377, 596, 670, 684, 694], "std": [143, 256, 459, 596, 694, 766, 896, 989], "101514": [143, 256], "707107": [143, 256, 378, 596, 819, 989], "57735": [143, 256], "median": [143, 190, 256, 462, 596, 673, 694, 766, 892, 989], "more_column": [144, 149, 203, 226, 256, 380, 560, 596, 616, 620, 654, 668, 694], "Or": [144, 160, 161, 162, 176, 209, 229, 236, 256, 446, 483, 547, 589, 596, 616, 627, 628, 629, 634, 661, 676, 694], "subset": [146, 186, 225, 256, 617, 667, 694], "snippet": [146, 256, 617, 694], "is_nul": [146, 256, 596, 617, 694, 989], "sizeunit": [148, 256, 817, 989], "heap": [148, 256, 817, 989], "its": [148, 256, 337, 363, 370, 483, 596, 773, 803, 810, 817, 989], "bitmap": [148, 256, 817, 989], "therefor": [148, 256, 589, 817, 989], "structarrai": [148, 256, 817, 989], "constant": [148, 162, 256, 383, 596, 629, 694, 817, 823, 989], "unchang": [148, 256, 529, 596, 638, 678, 694, 817, 973, 989], "capac": [148, 207, 256, 817, 910, 989], "ffi": [148, 256, 817, 989], "kb": [148, 256, 817, 989], "mb": [148, 256, 817, 989], "gb": [148, 256, 817, 989], "tb": [148, 256, 817, 989], "revers": [148, 256, 326, 327, 328, 329, 330, 423, 450, 522, 596, 694, 760, 761, 762, 763, 989], "1_000_000": [148, 256, 817, 989], "25888898": [148, 256], "689577102661133": [148, 256], "long": [149, 182, 227, 256, 620, 642, 694], "letter": [149, 241, 250, 256, 380, 494, 560, 596, 620, 681, 690, 694, 929], "thu": [150, 256, 550, 582, 702, 989], "faster": [150, 227, 256, 270, 459, 500, 533, 596, 658, 659, 694, 702, 703, 889, 935, 989], "onlin": [150, 256, 702, 989], "rerun": [150, 256, 702, 989], "fill_valu": [151, 206, 227, 256, 474, 596, 656, 694, 908, 989], "Not": [151, 256, 405, 407, 424, 596, 622, 694], "To": [151, 256, 334, 335, 359, 385, 487, 493, 494, 502, 585, 596, 622, 694, 799, 922, 928, 929, 937], "fillnullstrategi": [152, 256, 385, 596, 623, 694, 825, 989], "matches_supertyp": [152, 256, 623, 694], "forward": [152, 176, 256, 355, 385, 391, 596, 623, 634, 694, 795, 825, 989], "consecut": [152, 256, 309, 385, 391, 486, 596, 623, 694, 825, 921, 989], "supertyp": [152, 256, 269, 596, 623, 694], "fill_nan": [152, 256, 596, 694, 989], "OR": [153, 256, 540, 624, 694], "reduct": [155, 256], "supercast": [155, 256], "parent": [155, 256], "rule": [155, 256], "arithmet": [155, 256], "zip_with": [155, 256, 989], "foo11": [155, 256], "bar22": [155, 256], "null_equ": [156, 256, 902, 989], "retriev": [157, 256, 283, 284, 519, 716, 717, 954], "return_as_str": [159, 256], "preview": [159, 256], "nice": [159, 256], "few": [159, 256], "rather": [159, 176, 256, 518, 634, 694, 953], "head": [159, 178, 212, 256, 269, 416, 596, 637, 694, 859, 960, 989], "tail": [159, 164, 256, 269, 480, 596, 694, 832, 915, 989], "more_bi": [160, 188, 209, 256, 483, 596, 627, 661, 694], "maintain_ord": [160, 188, 190, 225, 229, 237, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 256, 264, 270, 308, 525, 532, 551, 596, 614, 619, 621, 627, 647, 657, 658, 659, 667, 677, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 694, 741, 765, 881, 975, 989], "consist": [160, 188, 256, 512, 627, 694, 947], "agg": [160, 161, 162, 256, 264, 270, 386, 388, 482, 483, 525, 537, 551, 596, 614, 619, 621, 627, 628, 629, 647, 657, 694], "index_column": [161, 162, 256, 628, 629, 694], "include_boundari": [161, 256, 628, 694], "start_bi": [161, 256, 628, 694], "startbi": [161, 256, 628, 694], "dynamicgroupbi": [161, 256], "groupbi": [161, 162, 186, 256, 264, 270, 289, 331, 386, 388, 446, 482, 483, 525, 537, 541, 551, 596, 614, 619, 621, 628, 629, 647, 657, 694, 722, 764, 989], "member": [161, 256, 628, 694, 844, 989], "seen": [161, 256, 309, 391, 596, 628, 694], "roll": [161, 162, 256, 355, 356, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 548, 579, 580, 596, 628, 629, 694, 795, 796, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 989], "slot": [161, 256, 288, 331, 332, 596, 628, 694, 721, 764, 767, 989], "1n": [161, 162, 176, 229, 256, 359, 363, 370, 460, 461, 462, 463, 464, 466, 467, 468, 596, 628, 629, 634, 694, 799, 803, 810], "nanosecond": [161, 162, 176, 229, 256, 359, 363, 364, 370, 460, 461, 462, 463, 464, 466, 467, 468, 558, 596, 628, 629, 634, 694, 799, 803, 804, 810], "1u": [161, 162, 176, 229, 256, 359, 363, 370, 460, 461, 462, 463, 464, 466, 467, 468, 596, 628, 629, 634, 694, 799, 803, 810], "microsecond": [161, 162, 176, 229, 256, 359, 363, 364, 370, 460, 461, 462, 463, 464, 466, 467, 468, 557, 558, 587, 596, 628, 629, 634, 647, 694, 799, 803, 810], "1m": [161, 162, 176, 229, 256, 348, 349, 351, 358, 359, 363, 365, 370, 460, 461, 462, 463, 464, 466, 467, 468, 596, 628, 629, 634, 694, 788, 790, 798, 799, 803, 805, 810], "millisecond": [161, 162, 176, 229, 256, 359, 363, 370, 460, 461, 462, 463, 464, 466, 467, 468, 558, 596, 628, 629, 634, 694, 799, 803, 810], "1w": [161, 162, 176, 229, 256, 359, 363, 370, 460, 461, 462, 463, 464, 466, 467, 468, 596, 628, 629, 634, 694, 799, 803, 810], "week": [161, 162, 176, 229, 256, 359, 363, 370, 372, 460, 461, 462, 463, 464, 466, 467, 468, 558, 596, 628, 629, 634, 694, 799, 803, 810, 812], "1y": [161, 162, 176, 229, 256, 346, 359, 363, 370, 460, 461, 462, 463, 464, 466, 467, 468, 596, 628, 629, 634, 694, 782, 799, 803, 810, 814], "1i": [161, 162, 176, 229, 256, 359, 460, 461, 462, 463, 464, 466, 467, 468, 596, 628, 629, 634, 694, 799], "suffix": [161, 162, 175, 176, 202, 229, 233, 236, 256, 265, 313, 359, 363, 370, 405, 407, 408, 409, 423, 446, 450, 458, 460, 461, 462, 463, 464, 466, 467, 468, 491, 596, 628, 629, 633, 634, 653, 672, 673, 676, 694, 745, 799, 803, 810, 926], "_satur": [161, 162, 176, 229, 256, 359, 363, 370, 460, 461, 462, 463, 464, 466, 467, 468, 596, 628, 629, 634, 694, 799, 803, 810], "satur": [161, 162, 176, 229, 256, 359, 363, 370, 460, 461, 462, 463, 464, 466, 467, 468, 596, 628, 629, 634, 694, 799, 803, 810], "10i": [161, 162, 256, 628, 629, 694], "ascend": [161, 162, 256, 628, 629, 694], "dynam": [161, 256, 307, 460, 461, 462, 463, 464, 466, 467, 468, 596, 628, 694, 740], "matter": [161, 162, 173, 199, 216, 256, 628, 629, 694], "_lower_bound": [161, 256, 628, 694], "_upper_bound": [161, 256, 628, 694], "harder": [161, 256, 628, 694], "inclus": [161, 162, 256, 399, 460, 461, 462, 463, 464, 466, 467, 468, 507, 508, 596, 628, 629, 694, 837, 942, 943, 989], "datapoint": [161, 256, 628, 694], "mondai": [161, 256, 372, 628, 694, 812], "tuesdai": [161, 256, 628, 694], "wednesdai": [161, 256, 628, 694], "thursdai": [161, 256, 628, 694], "fridai": [161, 256, 628, 694], "saturdai": [161, 256, 628, 694], "sundai": [161, 256, 372, 628, 694, 812], "date_rang": [161, 229, 256, 336, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 368, 370, 371, 372, 373, 374, 628, 694, 772, 774, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 810, 811, 812, 813, 814], "30m": [161, 256, 363, 370, 628, 694, 803, 810], "time_min": [161, 256, 628, 694], "time_max": [161, 256, 628, 694], "boundari": [161, 256, 320, 321, 322, 596, 628, 694, 754, 755, 756, 833, 989], "time_count": [161, 256, 628, 694], "_lower_boundari": [161, 256, 628, 694], "_upper_boundari": [161, 256, 628, 694], "lower_bound": [161, 256, 320, 322, 399, 596, 628, 694, 754, 756, 837, 977, 989], "upper_bound": [161, 256, 307, 320, 321, 399, 596, 628, 694, 754, 755, 837, 863, 989], "time_agg_list": [161, 256, 628, 694], "arang": [161, 227, 238, 256, 628, 678, 694], "2i": [161, 256, 628, 694], "3i": [161, 256, 628, 694], "a_agg_list": [161, 256, 628, 694], "rollinggroupbi": [162, 256], "dynamic_groupbi": [162, 256, 629, 694], "groupby_dynam": [162, 256, 629, 694], "43": [162, 256, 330, 596, 629, 694], "strptime": [162, 256, 362, 629, 694, 802], "set_sort": [162, 176, 229, 256, 596, 629, 634, 694, 989], "2d": [162, 219, 256, 568, 629, 694, 777], "sum_a": [162, 256, 629, 694], "min_a": [162, 256, 629, 694], "max_a": [162, 256, 629, 694], "seed": [163, 200, 256, 394, 453, 470, 476, 596, 831, 883, 900, 911, 989], "seed_1": [163, 256, 394, 596, 831, 989], "seed_2": [163, 256, 394, 596, 831, 989], "seed_3": [163, 256, 394, 596, 831, 989], "hash": [163, 256, 596, 989], "u64": [163, 256, 394, 455, 596, 647, 694, 831, 989], "10783150408545073287": [163, 256], "1438741209321515184": [163, 256], "10047419486152048166": [163, 256], "2047317070637311557": [163, 256], "ab": [164, 178, 212, 233, 256, 519, 520, 596, 672, 694, 832, 859, 960, 989], "grown": [166, 256], "intermedi": [168, 256, 632, 694, 836, 989, 997], "linear": [168, 192, 248, 256, 285, 398, 427, 452, 464, 548, 549, 576, 596, 632, 648, 688, 694, 718, 836, 882, 894, 989], "mask": [169, 171, 256, 286, 310, 311, 400, 402, 410, 487, 489, 596, 719, 742, 743, 826, 837, 839, 842, 854, 878, 879, 903, 922, 924, 981, 989], "visual": [169, 171, 256], "buffer_s": [173, 256], "intern": [173, 256], "veri": [173, 224, 256, 270, 596, 613, 694, 757, 989], "fit": [173, 207, 227, 256, 475, 578, 596, 909, 910, 989], "signific": [173, 256, 270, 596], "4x": [173, 256], "materialis": [173, 174, 198, 199, 256], "iter_row": [174, 198, 199, 256], "17_500": [174, 256], "klmnoopqrstuvwxyz": [174, 256], "__name__": [174, 256], "7500": [174, 256], "15_000": [174, 256], "record_batch": [174, 256], "to_arrow": [174, 256, 989], "to_batch": [174, 256], "date32": [174, 256], "large_str": [174, 214, 220, 256], "15000": [174, 256], "2500": [174, 256], "left_on": [175, 176, 256, 633, 634, 694], "right_on": [175, 176, 256, 633, 634, 694], "_right": [175, 176, 256, 633, 634, 694], "semi": [175, 256, 633, 694], "anti": [175, 256, 633, 694, 903, 904, 989], "cross": [175, 256, 633, 694], "join_asof": [175, 256, 633, 694], "stringcach": [175, 256, 607], "other_df": [175, 256], "by_left": [176, 256, 634, 694], "by_right": [176, 256, 634, 694], "asofjoinstrategi": [176, 256, 634, 694], "allow_parallel": [176, 256, 633, 634, 694], "force_parallel": [176, 256, 633, 634, 694], "asof": [176, 256, 634, 694], "asof_join": [176, 256], "search": [176, 256, 634, 694], "greater": [176, 256, 392, 393, 480, 509, 596, 634, 694, 915, 944, 989], "distanc": [176, 256, 634, 694, 833, 989], "plan": [176, 177, 256, 611, 619, 626, 633, 634, 649, 657, 675, 694], "gdp": [176, 256, 634, 694], "2016": [176, 256, 634, 694], "2017": [176, 256, 634, 694], "2018": [176, 256, 362, 634, 694, 802], "2019": [176, 256, 634, 694], "record": [176, 219, 256, 634, 694], "jan": [176, 256, 634, 694], "1st": [176, 256, 634, 694], "4164": [176, 256, 634, 694], "4411": [176, 256, 634, 694], "4566": [176, 256, 634, 694], "4696": [176, 256, 634, 694], "popul": [176, 256, 634, 694], "12th": [176, 256, 634, 694], "82": [176, 256, 634, 694], "66": [176, 256, 538, 596, 634, 694, 894, 989], "83": [176, 256, 634, 694], "52": [176, 233, 256, 469, 596, 634, 672, 694], "request": [177, 256], "describe_plan": [177, 256, 694], "unoptim": [177, 256, 694], "describe_optimized_plan": [177, 256, 694], "show_graph": [177, 256, 694], "un": [177, 256], "graphviz": [177, 256, 657, 694], "axi": [179, 180, 182, 184, 211, 256, 642, 694], "null_strategi": [180, 211, 256], "nullstrategi": [180, 211, 256], "spam": [180, 256, 494, 929], "id_var": [182, 256, 642, 694], "value_var": [182, 256, 642, 694], "variable_nam": [182, 256, 642, 694], "value_nam": [182, 256, 642, 694], "unpivot": [182, 256, 642, 694], "leav": [182, 256, 307, 642, 694], "massag": [182, 256, 642, 694], "measur": [182, 256, 642, 694], "merg": [183, 256, 643, 694], "caller": [183, 256, 307, 638, 643, 678, 694], "respons": [183, 256, 643, 694], "what": [186, 256, 971, 980, 989], "pack": [186, 256], "expr_unique_subset": [186, 256], "df_nuniqu": [186, 256], "df_agg_nuniqu": [186, 256], "offer": [189, 256, 448, 596, 646, 694], "fulli": [189, 200, 256], "cast_str_to_int": [189, 256, 646, 694], "col_nam": [189, 256, 423, 596, 646, 694], "tdf": [189, 256, 646, 694], "aggregate_funct": [190, 256], "pivotagg": [190, 256], "nodefault": [190, 256, 512, 947], "sort_column": [190, 256], "predefin": [190, 256], "predict": [190, 193, 229, 256], "transpos": [190, 256], "discoveri": [190, 256], "col1": [190, 227, 256, 694, 997], "col2": [190, 227, 256, 694, 997], "col3": [190, 256, 997], "tanh": [190, 256, 596, 989], "998347": [190, 256], "964028": [190, 256], "999954": [190, 256], "interpol": [192, 248, 256, 385, 427, 452, 464, 576, 596, 648, 688, 694, 882, 894, 989], "rollinginterpolationmethod": [192, 248, 256, 452, 464, 576, 596, 648, 688, 694, 882, 894, 989], "midpoint": [192, 248, 256, 452, 464, 576, 596, 648, 688, 694, 882, 894, 989], "by_pred": [198, 256], "accord": [198, 256, 424, 596, 783], "never": [198, 256], "mutual": [198, 256], "exclus": [198, 256, 538, 596], "addition": [198, 256], "clariti": [198, 256], "toomanyrowsreturnederror": [198, 256, 607], "norowsreturnederror": [198, 256, 607], "inherit": [198, 256], "rowserror": [198, 256, 607], "with_replac": [200, 256, 470, 596, 900, 989], "shuffl": [200, 238, 256, 470, 596, 678, 900, 989], "modul": [200, 256, 470, 476, 595, 596, 900, 911, 989], "more_expr": [202, 233, 256, 446, 539, 540, 544, 546, 548, 549, 555, 570, 573, 581, 584, 585, 596, 653, 672, 694], "named_expr": [202, 233, 256, 581, 584, 653, 672, 694], "threshold": [202, 256, 653, 694], "set_auto_structifi": [202, 233, 256, 653, 672, 694], "auto_structifi": [202, 233, 256, 653, 672, 694], "is_odd": [202, 256, 653, 694], "_is_odd": [202, 256, 653, 694], "shift_and_fil": [205, 256, 596, 694, 989], "shift": [206, 256, 288, 332, 447, 474, 548, 596, 656, 694, 721, 767, 877, 908, 989], "shrink": [207, 256, 475, 596, 909, 910, 989], "hold": [207, 256], "ddof": [210, 230, 256, 485, 536, 550, 575, 579, 580, 582, 583, 588, 596, 662, 670, 694, 919, 979, 989], "deviat": [210, 256, 378, 466, 485, 583, 596, 662, 694, 819, 919, 989], "degre": [210, 230, 256, 485, 536, 550, 575, 579, 580, 582, 583, 588, 596, 662, 670, 694, 919, 979, 989], "freedom": [210, 230, 256, 485, 536, 550, 575, 579, 580, 582, 583, 588, 596, 662, 670, 694, 919, 979, 989], "divisor": [210, 230, 256, 485, 536, 550, 575, 579, 580, 582, 583, 588, 596, 662, 670, 694, 919, 979, 989], "816497": [210, 256], "21": [211, 256, 564], "16a": [211, 256], "27b": [211, 256], "38c": [211, 256], "nth": [213, 256, 509, 526, 596, 665, 694, 944, 962, 989], "mostli": [214, 256, 386, 596], "categoricaltyp": [214, 256], "as_seri": [215, 256], "fruit": [215, 256, 450, 458, 491, 510, 522, 596, 926, 945], "car": [215, 256, 450, 458, 522, 596], "beetl": [215, 256, 450, 458, 522, 596], "audi": [215, 256, 450, 458, 522, 596], "300": [215, 256, 890, 891, 893, 989], "instantiat": [218, 256, 969, 989], "from_repr": [218, 256, 969, 989], "df_from_str_repr": [218, 256], "eval": [218, 256, 559, 969, 989], "correspond": [219, 256, 347, 453, 596, 783, 883, 989], "re": [219, 256, 355, 356, 795, 796, 996], "ll": [219, 256], "u1": [219, 256], "f4": [219, 256], "view": [219, 256, 971, 989], "recarrai": [219, 256], "rec": [219, 256], "use_pyarrow_extension_arrai": [220, 256, 972, 989], "trigger": [220, 256, 972, 989], "sent": [220, 256, 971, 972, 989], "pandas_df1": [220, 256], "pandas_df2": [220, 256], "pandas_df2_pa": [220, 256], "na": [220, 256, 972, 989], "get_column": [221, 256, 585], "four": [222, 256], "five": [222, 256, 997], "bottom_k": [223, 256, 530, 596, 666, 694, 974, 989], "include_head": [224, 256], "header_nam": [224, 256], "column_nam": [224, 256], "perhap": [224, 256], "column_2": [224, 256], "name_gener": [224, 256], "base_nam": [224, 256], "my_column_": [224, 256], "my_column_0": [224, 256], "my_column_1": [224, 256], "my_column_2": [224, 256], "uniquekeepstrategi": [225, 256, 667, 694], "kept": [225, 256, 667, 694], "decompos": [226, 256, 668, 694], "t_a": [226, 256, 668, 694], "t_b": [226, 256, 668, 694], "t_c": [226, 256, 668, 694], "t_d": [226, 256, 668, 694], "womp": [226, 256, 668, 694], "t_": [226, 256, 668, 694], "t_struct": [226, 256, 668, 694], "step": [227, 256, 543], "unstackdirect": [227, 256], "much": [227, 256, 306, 331, 596, 739, 764, 989], "pivot": [227, 256], "phase": [227, 256], "subject": [227, 256], "ascii_uppercas": [227, 256], "h": [227, 256, 263, 366, 369, 475, 512, 514, 516, 596, 947, 949, 951], "col1_0": [227, 256], "col1_1": [227, 256], "col1_2": [227, 256], "col2_0": [227, 256], "col2_1": [227, 256], "col2_2": [227, 256], "coalesc": [228, 256, 512, 669, 694, 947], "400": [228, 256, 669, 694, 890, 891, 893, 989], "600": [228, 256, 669, 694], "700": [228, 256, 669, 694], "new_df": [228, 256, 669, 694], "time_column": [229, 256], "frequenc": [229, 256], "forward_fil": [229, 256, 327, 330, 596], "varianc": [230, 256, 379, 412, 468, 536, 588, 596, 670, 694, 820, 857, 898, 979, 989], "grow": [231, 256], "is_not": [233, 256, 596, 672, 694], "not_c": [233, 256, 672, 694], "diff": [233, 256, 342, 345, 349, 351, 353, 358, 365, 596, 672, 694, 778, 781, 788, 790, 793, 798, 805, 989], "_diff": [233, 256, 672, 694], "row_nr": [234, 256, 424, 596, 674, 694, 904, 989], "more_agg": [236, 676], "named_agg": [236, 676], "_sum": [236, 676], "_mean_squar": [236, 676], "b_sum": [236, 676], "c_mean_squar": [236, 676], "sub": [238, 596], "triangl": [238, 678], "group_df": [238, 678], "deem": [239, 325, 551, 596, 679], "nr": [241, 250, 681, 690], "maxim": [243, 278, 596, 683, 710, 989], "833333": [244, 684], "minim": [246, 279, 284, 475, 483, 596, 686, 711, 717, 868, 909, 989], "overview": [256, 596, 607, 694, 989, 997], "public": [256, 596, 607, 694, 989], "frameinittyp": [256, 694], "variou": [256, 596, 694, 989], "entri": [256, 694, 996], "prevent": [256, 329, 330, 411, 523, 596, 694, 762, 763, 959, 989], "come": [256, 355, 356, 412, 596, 608, 693, 694, 795, 796, 857, 989], "behavior": [256, 270, 306, 541, 596, 739], "mydatafram": 256, "notic": [256, 694, 989], "df4": 256, "df5": 256, "df6": 256, "corr": [256, 575, 582], "drop_in_plac": 256, "drop_nul": [256, 334, 596, 694, 989], "estimated_s": [256, 989], "explod": [256, 388, 457, 596, 694, 887, 989], "find_idx_by_nam": 256, "fold": [256, 433, 546, 553, 554, 577], "frame_equ": [256, 363, 370], "groupby_rol": [256, 460, 461, 462, 463, 464, 466, 467, 468, 596, 628, 694], "hash_row": 256, "hstack": 256, "insert_at_idx": 256, "is_dupl": [256, 596, 989], "is_empti": [256, 989], "is_uniqu": [256, 596, 989], "iter_slic": 256, "melt": [256, 694], "merge_sort": [256, 694], "n_uniqu": [256, 596, 989], "pipe": [256, 596, 694], "quantil": [256, 464, 596, 694, 881, 894, 989], "replace_at_idx": 256, "shrink_to_fit": [256, 989], "take_everi": [256, 596, 694, 989], "to_dict": 256, "to_numpi": [256, 422, 596, 989], "to_panda": [256, 989], "to_struct": [256, 494], "unnest": [256, 494, 508, 509, 520, 694, 740, 943, 944], "unstack": 256, "upsampl": 256, "write_avro": 256, "write_databas": 256, "write_delta": 256, "write_excel": 256, "write_json": [256, 649, 694], "write_parquet": 256, "cumprod": [263, 596, 989], "ghi": [263, 494, 596, 929], "94": [264, 596], "map_alia": [265, 450, 522, 596], "confus": [266, 405, 407, 596], "tt": [266, 596], "tf": [266, 268, 596], "ff": [266, 268, 596], "upcast": [269, 596], "skip_nul": [270, 596, 703, 989], "pass_nam": [270, 596], "applystrategi": [270, 596], "thread_loc": [270, 596], "unknown": [270, 424, 493, 568, 596, 928], "stage": [270, 596], "speed": [270, 596, 659, 694], "code": [270, 472, 596, 636, 694, 905, 989], "amount": [270, 596], "releas": [270, 596, 997], "gil": [270, 596], "discourag": [270, 596], "loop": [270, 596], "a_times_2": [270, 596], "approx": [271, 542, 596, 694], "hyperloglog": [271, 542, 596, 694], "algorithm": [271, 542, 596, 694], "cardin": [271, 542, 596, 694], "invers": [272, 273, 274, 275, 276, 277, 596, 704, 705, 706, 707, 708, 709, 989], "cosin": [272, 273, 323, 324, 422, 596, 704, 705, 758, 759, 989], "570796": [272, 274, 596, 704, 706, 989], "hyperbol": [273, 275, 277, 324, 479, 528, 596, 705, 707, 709, 759, 914, 964, 989], "sine": [274, 275, 422, 478, 479, 596, 706, 707, 913, 914, 989], "881374": [275, 596, 707, 989], "tangent": [276, 277, 527, 528, 596, 708, 709, 963, 964, 989], "785398": [276, 596, 708, 989], "arg_wher": [281, 596], "sublist": [283, 284, 286, 288, 291, 292, 293, 294, 295, 302, 305, 306, 307, 716, 717, 719, 721, 724, 725, 726, 727, 728, 735, 738, 739, 740, 844, 989], "membership": [286, 719], "listcol": 287, "number_of_two": 287, "null_behavior": [288, 332, 596, 721, 767, 989], "nullbehavior": [288, 332, 596, 721, 767, 989], "th": [288, 332, 480, 596, 721, 767, 915, 989], "blindli": [289, 722], "worth": [289, 722], "enough": [289, 480, 596, 722, 915, 989], "concat_list": [289, 559, 722], "rank": [289, 550, 559, 582, 596, 722, 989], "exprnamespac": 290, "reshap": [290, 596, 723, 989], "flat": [290, 457, 596, 723, 887, 989], "taken": [302, 506, 525, 596, 735, 941], "null_on_oob": [306, 739], "cheaper": [306, 739], "n_field_strategi": [307, 740], "tostructstrategi": [307, 740], "first_non_nul": [307, 740], "max_width": [307, 740], "field_0": [307, 740], "field_1": [307, 740], "field_n": [307, 740], "incorrectli": 307, "n0": 307, "n1": 307, "maintain": [308, 471, 532, 596, 658, 659, 694, 741, 901, 975, 989], "substr": [310, 313, 314, 487, 491, 502, 503, 507, 508, 509, 510, 742, 745, 746, 922, 926, 937, 938, 942, 943, 944, 945], "transferencod": [311, 312, 489, 490, 743, 744, 924, 925], "strict": [311, 317, 487, 489, 501, 512, 513, 514, 516, 596, 743, 748, 902, 922, 924, 936, 947, 948, 949, 951, 989], "hex": [311, 312, 489, 490, 501, 743, 744, 924, 925, 936], "base64": [311, 312, 489, 490, 743, 744, 924, 925], "complex": [315, 331, 530, 596, 747, 764, 974, 989], "frac": [315, 377, 378, 379, 480, 530, 596, 747, 818, 819, 820, 915, 974, 989], "hurt": [316, 596], "lot": [316, 596], "content": [316, 476, 535, 596, 911, 989], "problem": [316, 596], "due": [317, 362, 596, 748, 802, 989], "overflow": [317, 329, 330, 501, 523, 596, 748, 762, 763, 936, 959, 989], "categoricalord": [318, 750], "lexic": [318, 750], "foo_clip": [320, 321, 322, 596], "clip": [321, 322, 596, 755, 756, 989], "543081": [324, 596, 759, 989], "cumul": [326, 327, 328, 329, 330, 553, 554, 555, 596, 760, 761, 762, 763, 989], "a_revers": [326, 327, 328, 329, 330, 423, 458, 522, 596], "value_cummax": [327, 596], "value_cummax_all_fil": [327, 596], "value_cumsum": [330, 596], "value_cumsum_all_fil": [330, 596], "min_period": [331, 377, 378, 379, 459, 460, 461, 462, 463, 464, 466, 467, 468, 579, 580, 596, 764, 818, 819, 820, 889, 890, 891, 892, 893, 894, 896, 897, 898, 989], "slide": [331, 596, 764, 989], "realli": [331, 596, 764, 989], "visit": [331, 596, 764, 989], "drop_nan": [335, 596, 989], "lose": [336, 772], "2001": [336, 341, 343, 344, 346, 347, 352, 354, 359, 360, 361, 363, 364, 368, 370, 371, 372, 373, 374, 512, 772, 777, 779, 780, 782, 784, 785, 786, 787, 789, 791, 792, 794, 797, 799, 800, 801, 803, 804, 808, 810, 811, 812, 813, 814, 947], "time_unit_m": [336, 772], "time_unit_n": [336, 772], "naiv": [337, 773], "compon": [337, 364, 512, 514, 558, 773, 804, 947, 949], "resolv": 337, "456000": [337, 773], "101000": 337, "456": [337, 773, 968, 989], "101": [337, 501, 936, 997], "d1": 337, "d2": 337, "d3": 337, "utc": [338, 362, 512, 514, 774, 802, 947, 949], "europ": [338, 362, 774, 802], "london": [338, 362, 774, 802], "gmt": [338, 362, 774, 802], "bst": [338, 362, 774, 802], "weekdai": [341, 360], "day_of_month": [341, 360, 372], "ordinal_dai": [341, 372], "day_of_year": [341, 360, 372], "days_diff": 342, "epochtimeunit": [343, 564, 779], "unix": [343, 564, 779], "epoch_n": [343, 779], "epoch_": [343, 779], "978307200000000": [343, 368, 779, 808], "978307200": [343, 779], "978393600000000": [343, 368, 779, 808], "978393600": [343, 779], "978480000000000": [343, 368, 779, 808], "978480000": [343, 779], "hours_diff": 345, "leap": [346, 359, 782, 799], "2002": [346, 347, 359, 361, 374, 782, 799, 814], "iso": [347, 371, 372, 783, 811, 812], "2006": [347, 359, 799], "180": [347, 361, 374], "2004": [347, 359, 799], "2005": [347, 359, 799], "1_001": [348, 349, 351, 358], "002": [348, 349, 351, 358, 558, 788, 790, 798], "003": [348, 349, 351, 358], "3000": 348, "997": [348, 349, 351, 358], "997000": 348, "998": [348, 349, 351, 358], "998000": 348, "999": [348, 349, 351, 358, 997], "999000": 348, "microseconds_diff": 349, "milliseconds_diff": 351, "minutes_diff": 353, "1440": [353, 793], "think": [355, 356, 795, 796], "vectoris": [355, 356, 795, 796], "tseri": [355, 356, 795, 796], "monthend": [355, 795], "rollforward": [355, 795], "monthbegin": [356, 796], "rollback": [356, 796], "nanoseconds_diff": 358, "1000000": [358, 518, 798], "minu": [359, 799], "dictat": [359, 799], "date_plus_1i": [359, 799], "1y2mo": [359, 799], "date_min": 359, "1998": [359, 799], "1999": [359, 799], "2003": [359, 564, 799], "ordin": [360, 453, 596, 800, 883, 989], "366": [360, 800], "use_earliest": [362, 802], "convert_time_zon": [362, 802], "ambigu": [362, 802], "sai": [362, 802], "daylight": [362, 802], "earliest": [362, 802], "london_timezon": [362, 802], "amsterdam": [362, 802], "london_to_amsterdam": [362, 802], "cet": [362, 802], "cest": [362, 802], "dst": [362, 802], "ts_local": [362, 802], "brussel": [362, 802], "half": [363, 377, 378, 379, 596, 803, 818, 819, 820, 989], "225": [363, 370], "to_fram": [363, 370, 512, 903, 904, 943, 944, 947, 989], "10m": [363, 370, 803, 810], "milli": [364, 804], "micro": [364, 804], "456789": 364, "654321": 364, "111110": 364, "765431": 364, "sec": [364, 997], "11111": 364, "seconds_diff": 365, "to_str": [366, 806], "datetime_str": [366, 369], "timestamp_n": [368, 808], "timestamp_m": 368, "978307200000": 368, "978393600000": 368, "978480000000": 368, "strftime": [369, 809], "1mo_satur": 370, "53": [371, 811], "incorrect": [373, 472, 596, 678, 813, 905, 989], "time_unit_u": [373, 813], "32971": [373, 813], "32974": [373, 813], "32976": [373, 813], "718281828459045": [375, 417, 596, 816, 860, 989], "pk": [375, 596, 816, 989], "probabl": [375, 596, 816, 989], "459148": [375, 596], "754888": [375, 596], "span": [377, 378, 379, 596, 818, 819, 820, 989], "half_lif": [377, 378, 379, 596, 818, 819, 820, 989], "adjust": [377, 378, 379, 480, 596, 818, 819, 820, 915, 989], "ignore_nul": [377, 378, 379, 596, 818, 819, 820, 980, 989], "exponenti": [377, 378, 379, 381, 449, 596, 818, 819, 820, 821, 989], "weight": [377, 378, 379, 459, 460, 461, 462, 463, 464, 466, 467, 468, 480, 596, 818, 819, 820, 889, 890, 891, 892, 893, 894, 896, 897, 898, 915, 989], "decai": [377, 378, 379, 596, 818, 819, 820, 989], "term": [377, 378, 379, 497, 500, 596, 818, 819, 820, 932, 935, 989], "mass": [377, 378, 379, 596, 818, 819, 820, 989], "gamma": [377, 378, 379, 596, 818, 819, 820, 989], "foral": [377, 378, 379, 596, 818, 819, 820, 989], "geq": [377, 378, 379, 596, 818, 819, 820, 989], "theta": [377, 378, 379, 596, 818, 819, 820, 989], "life": [377, 378, 379, 596, 818, 819, 820, 989], "exp": [377, 378, 379, 596, 818, 819, 820, 989], "ln": [377, 378, 379, 596, 818, 819, 820, 989], "smooth": [377, 378, 379, 596, 818, 819, 820, 989], "factor": [377, 378, 379, 529, 596, 818, 819, 820, 973, 989], "leq": [377, 378, 379, 596, 818, 819, 820, 989], "imbal": [377, 378, 379, 596, 818, 819, 820, 989], "ew": [377, 378, 379, 596, 818, 819, 820, 989], "w_i": [377, 378, 379, 596, 818, 819, 820, 989], "recurs": [377, 378, 379, 596, 818, 819, 820, 989], "y_0": [377, 378, 379, 596, 818, 819, 820, 989], "x_0": [377, 378, 379, 596, 818, 819, 820, 989], "y_t": [377, 378, 379, 596, 818, 819, 820, 989], "y_": [377, 378, 379, 596, 818, 819, 820, 989], "x_t": [377, 378, 379, 596, 818, 819, 820, 989], "observ": [377, 378, 379, 596, 818, 819, 820, 989], "x_2": [377, 378, 379, 596, 818, 819, 820, 989], "428571": [377, 596], "bia": [378, 379, 412, 465, 480, 596, 819, 820, 857, 895, 915, 989], "unbias": [378, 379, 596, 819, 820, 989], "963624": [378, 596, 819, 989], "928571": [379, 596, 820, 989], "wildcard": [380, 547, 553, 554, 562, 577, 596], "regex": [380, 430, 487, 488, 491, 493, 494, 502, 503, 510, 560, 585, 596, 922, 923, 926, 928, 929, 937, 938, 945], "aa": [380, 487, 560, 596, 922], "ba": [380, 560, 596], "cc": [380, 560, 596], "718282": [381, 596], "389056": [381, 596], "54": [381, 596, 997], "59815": [381, 596], "expand": [382, 429, 430, 456, 596, 822, 989], "exprlistnamespac": [382, 388, 457, 596], "exprstringnamespac": [382, 596], "pythonliter": [383, 570, 573, 578, 596, 823, 865, 868, 989], "extrem": [383, 596, 823, 989], "group_col": [386, 537, 596], "g1": [386, 537, 596], "g2": [386, 537, 596], "lt": [386, 537, 596, 989], "gte": [386, 537, 596], "divis": [390, 531, 596], "truediv": [390, 596], "9774092659964970114": [394, 596], "13614470193936745724": [394, 596], "1101441246220388612": [394, 596], "11638928888656214026": [394, 596], "13382926553367784577": [394, 596], "cumsum": [397, 521, 596, 631, 694, 856, 989], "interpolationmethod": [398, 596, 836, 989], "regrid": [398, 596], "grid": [398, 596], "df_original_grid": [398, 596], "grid_point": [398, 596], "df_new_grid": [398, 596], "conflat": [399, 596], "finit": [401, 531, 550, 582, 596, 841, 989], "primit": [403, 596, 971, 989], "optional_memb": [403, 596, 844, 989], "infinit": [404, 531, 596, 845, 989], "_isnan": [405, 596], "b_isnan": [405, 596], "negat": [406, 596], "_is_not_nan": [407, 596], "b_is_not_nan": [407, 596], "_not_nul": [408, 596], "a_not_nul": [408, 596], "b_not_nul": [408, 596], "_isnul": [409, 596], "a_isnul": [409, 596], "b_isnul": [409, 596], "undo": [411, 435, 596], "duplicateerror": [411, 596, 607], "occurr": [411, 596, 833, 989], "333333": [411, 468, 596, 877, 898, 989], "fisher": [412, 480, 596, 857, 915, 989], "fourth": [412, 596, 857, 989], "subtract": [412, 521, 596, 857, 989], "distribut": [412, 480, 596, 857, 915, 989], "elimin": [412, 596, 857, 989], "bias": [412, 480, 596, 857, 915, 989], "scipi": [412, 480, 596, 857, 915, 989], "stat": [412, 480, 596, 857, 915, 989], "153061": [412, 596], "logarithm": [417, 418, 419, 596, 860, 861, 862, 989], "584963": [417, 596], "30103": [418, 596], "60206": [418, 596], "natur": [419, 596, 862, 989], "plu": [419, 596, 862, 989], "693147": [419, 596], "098612": [419, 596], "386294": [419, 596], "lowest": [420, 596], "9223372036854775808": [420, 596], "agg_list": [422, 596], "elementwis": [422, 459, 460, 461, 462, 463, 464, 466, 467, 468, 596, 889, 890, 891, 892, 893, 894, 896, 897, 898, 989], "parti": [422, 596], "book": [422, 596], "map_dict": [422, 596, 989], "argmax": [422, 596], "_revers": [423, 458, 522, 596], "rsplit": [423, 596], "b_revers": [423, 458, 522, 596], "remap": [424, 596, 864, 989], "lookup": [424, 596, 864, 989], "country_code_dict": [424, 596], "ca": [424, 596], "canada": [424, 596], "de": [424, 596], "germani": [424, 596], "fr": [424, 596], "franc": [424, 596], "country_cod": [424, 596], "rest": [424, 596], "exprmetanamespac": [428, 431], "computeerror": [432, 501, 607, 936], "keep_nam": [435, 596], "modulu": [437, 596], "xlog2": [439, 449, 596], "poison": [441, 442, 596, 873, 874, 989], "nanmax": [441, 442, 596, 873, 874, 989], "wherea": [441, 442, 596, 630, 637, 694, 873, 874, 989], "inequ": [443, 596], "outcom": [446, 596], "_max": [446, 596], "c_max": [446, 596], "_min": [446, 596], "c_min": [446, 596], "percent": [447, 596, 877, 989], "090909": [447, 596], "extract_numb": [448, 596], "digit": [448, 469, 494, 518, 596, 899, 923, 929, 953, 989, 997], "scale_negative_even": [448, 596], "expon": [449, 596, 989], "reverse_": [450, 596], "reverse_a": [450, 596], "reverse_fruit": [450, 596], "reverse_b": [450, 596], "reverse_car": [450, 596], "rankmethod": [453, 596, 883, 989], "ti": [453, 596, 883, 989], "competit": [453, 596, 883, 989], "highest": [453, 534, 550, 582, 596, 694, 883, 989], "64bit": [455, 596, 885, 989], "safe": [455, 512, 596, 885, 947, 971, 989], "coerc": [456, 596], "fruits_revers": [458, 522, 596], "cars_revers": [458, 522, 596], "window_s": [459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 579, 580, 596, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 989], "rolling_min": [459, 596, 889, 989], "rolling_max": [459, 596, 889, 989], "rolling_mean": [459, 596, 889, 989], "rolling_sum": [459, 596, 889, 989], "multipli": [459, 460, 461, 462, 463, 464, 466, 467, 468, 596, 889, 890, 891, 892, 893, 894, 896, 897, 898, 989], "358899": [459, 596], "041452": [459, 596], "567764": [459, 596], "travers": [460, 461, 463, 466, 467, 468, 596, 890, 891, 893, 896, 897, 898, 989], "vector": [460, 461, 463, 466, 467, 468, 596, 890, 891, 893, 896, 897, 898, 989], "5h": [460, 461, 462, 463, 464, 466, 467, 468, 596], "skew": [465, 596, 895, 989], "527525": [466, 596, 896, 989], "searchsortedsid": [471, 596, 901, 989], "leftmost": [471, 596, 901, 989], "rightmost": [471, 596, 901, 989], "six": [471, 596], "downstream": [472, 596, 905, 989], "extrema": [475, 596, 909, 989], "112": [475, 596, 997], "129": [475, 596], "8589934592": [475, 596], "1073741824": [475, 596], "175201": [479, 596, 914, 989], "about": [480, 487, 493, 494, 502, 596, 915, 922, 928, 929, 937, 989, 997], "unimod": [480, 596, 915, 989], "skewtest": [480, 596, 915, 989], "speak": [480, 596, 915, 989], "g_1": [480, 596, 915, 989], "m_3": [480, 596, 915, 989], "m_2": [480, 596, 915, 989], "m_i": [480, 596, 915, 989], "sum_": [480, 596, 915, 989], "texttt": [480, 596, 915, 989], "k_3": [480, 596, 915, 989], "k_2": [480, 596, 915, 989], "sqrt": [480, 596, 915, 989], "343622": [480, 596], "value1": [483, 596], "value2": [483, 596], "attain": [483, 596], "414214": [484, 596, 918, 989], "ends_with": [487, 510, 945], "sensit": [487, 494, 502, 922, 929, 937], "ilmsuxu": [487, 493, 494, 502, 922, 928, 929, 937], "default_match": 487, "insensitive_match": 487, "section": [487, 493, 494, 502, 922, 928, 929, 937], "crab": [487, 922], "dog": [487, 515, 517, 549, 922], "rab": [487, 922], "success": [488, 494, 923, 929], "overlap": [488, 494, 923, 929], "captur": [488, 493, 494, 923, 928, 929], "123": [488, 494, 503, 923, 929, 938, 968, 989], "bla": [488, 494, 923, 929], "asd": [488, 494, 923, 929], "678": [488, 494, 923, 929], "910t": [488, 494, 923, 929], "count_digit": 488, "666f6f": [490, 925], "626172": [490, 925], "mango": [491, 510, 926, 945], "go": [491, 926], "has_suffix": 491, "group_index": [493, 928], "nthose": [493, 928], "nodd": [493, 928], "nthe": [493, 928], "url": [493, 928], "vote": [493, 928], "ballon_dor": [493, 928], "404": [493, 928], "ref": [493, 928], "candid": [493, 928], "messi": [493, 928], "ronaldo": [493, 928], "did": [494, 929], "email": [494, 929], "real": [494, 929], "some_account": [494, 929], "somewher": [494, 929], "net": [494, 929], "jkl": [494, 929], "uvw": [494, 929], "co": [494, 596, 929, 989], "uk": [494, 929], "address": 494, "xi": [494, 929], "insensit": [494, 502, 922, 929, 937], "quantifi": [494, 929], "arr": [494, 559, 597, 971, 989, 990], "email_part": [494, 929], "extracted_nr": 494, "910": [494, 929], "json_path_match": [495, 930], "jsonpath": [495, 496, 930, 931], "json_path": [496, 931], "regardless": [496, 931], "json_val": [496, 931], "n_char": [497, 932], "caf\u00e9": [497, 500, 932, 935], "345": [497, 500, 932, 935], "\u6771\u4eac": [497, 500, 932, 935], "nchar": [497, 500], "fill_char": [498, 504, 933, 939], "justifi": [498, 504, 933, 939], "pad": [498, 504, 518, 933, 939, 953], "cow": [498, 504, 933, 939], "monkei": [498, 504, 933, 939], "hippopotamu": [498, 504, 933, 939], "strip": [499, 505, 934, 940], "tworld": [499, 511, 934, 946], "wod": [499, 505, 934, 940], "rld": [499, 934], "radix": [501, 936], "parseerror": [501, 936], "becom": [501, 936], "silent": [501, 936], "110": [501, 936], "010": [501, 936], "fa1e": [501, 936], "ff00": [501, 936], "cafe": [501, 936], "64030": [501, 936], "65280": [501, 936], "51966": [501, 936], "replace_al": [502, 937], "citi": 502, "philadelphia": 502, "season": 502, "spring": 502, "summer": 502, "autumn": 502, "winter": 502, "weather": [502, 937], "raini": [502, 937], "sunni": [502, 937], "cloudi": 502, "snowi": 502, "foggi": [502, 937], "123abc": [502, 937], "abc456": [502, 937], "abcabc": [503, 938], "123a123": [503, 938], "bc": [503, 585, 938], "trail": [505, 511, 940, 946], "worl": [505, 511, 940, 946], "subslic": [506, 941], "pear": [506, 941], "papaya": [506, 941], "dragonfruit": [506, 941], "s_slice": 506, "ear": [506, 941], "aya": [506, 941], "uit": [506, 941], "ya": [506, 941], "onf": [506, 941], "a_1": [508, 943, 967, 989], "d_4": [508, 943], "rename_field": [508, 509, 943, 944], "first_part": [508, 509, 943, 944], "second_part": [508, 509, 943, 944], "remaind": [509, 944], "app": [510, 945], "has_prefix": 510, "polarstemporaltyp": [512, 947], "tz_awar": [512, 947], "anywher": [512, 513, 514, 947, 948, 949], "toggl": [512, 947], "futur": [512, 947], "3f": [512, 514, 947, 949], "00z": [512, 514, 947, 949], "sun": [512, 947], "jul": [512, 947], "34": [512, 947], "_tz_awar": 514, "lowercas": [515, 950], "variant": [515, 517], "uppercas": [517, 952], "100000": 518, "0010": 518, "0001": 518, "00000": 518, "00001": 518, "cd": [519, 520], "struct_col": [519, 520], "www": 520, "xxx": 520, "yyi": 520, "zzz": 520, "obvious": 520, "structfieldnotfounderror": [520, 607], "761594": [528, 596, 964, 989], "replic": [529, 596, 973, 989], "vals_phys": [529, 596], "floordiv": [531, 596], "ieee": [531, 596], "754": [531, 596], "mathemat": [531, 559, 596], "undefin": [531, 596], "On": [531, 596], "operand": [531, 596], "infin": [531, 596], "value_count": [533, 596, 989], "9223372036854775807": [534, 596], "multithread": [535, 596], "binary_str": [538, 596], "zfill": [538, 596], "250": [538, 596, 891, 989, 997], "bin_x": [538, 596], "bin_i": [538, 596], "xor_xi": [538, 596], "bin_xor_xi": [538, 596], "00001010": [538, 596], "00000001": [538, 596], "00001011": [538, 596], "00001000": [538, 596], "00000010": [538, 596], "11111010": [538, 596], "00000011": [538, 596], "249": [538, 596], "11111001": [538, 596], "01000010": [538, 596], "00000100": [538, 596], "70": [538, 596], "01000110": [538, 596], "bitwis": [539, 540], "AND": 539, "returns_scalar": 541, "product_a": 541, "49": 541, "Be": 543, "more_nam": 547, "hamburg": 547, "lag": 548, "mimic": 548, "a_lag_": 548, "a_rol": 548, "swim": 549, "walk": 549, "full_sent": 549, "correlationmethod": 550, "propagate_nan": [550, 582], "spearman": [550, 582], "larger": [550, 582, 658, 659, 694], "544705": [550, 575], "covari": [552, 580], "acc": [553, 554, 562, 577], "include_init": 553, "accumul": [553, 554, 562, 577], "fn": [553, 554, 562, 577], "new_valu": [553, 554, 562, 577], "cumreduc": 553, "tbl_width_char": 558, "120": 558, "add_week": 558, "add_dai": 558, "add_second": 558, "add_milli": 558, "add_hour": 558, "a_b_doubl": 559, "f_string": 563, "placehold": 563, "hello_": 563, "_world": 563, "foo_": 563, "_bar_": 563, "foo_a_bar_1": 563, "foo_b_bar_2": 563, "foo_c_bar_3": 563, "epoch": 564, "timestep": 564, "1666683077": 564, "1666683099": 564, "39": 564, "12345": [564, 751, 828, 899, 989], "12346": 564, "agg_group": [565, 596], "favor": [567, 575, 582], "implod": [567, 596, 989], "allow_object": 568, "valueexcept": 568, "test_func": 569, "605551": 583, "605551275463989": 583, "my_struct": 584, "selector": 585, "chain": 589, "isn": 589, "thens": 589, "elif": 589, "pick": 589, "sometim": 595, "and_": 596, "approx_uniqu": [596, 694], "arcco": [596, 989], "arccosh": [596, 989], "arcsin": [596, 989], "arcsinh": [596, 989], "arctan": [596, 989], "arctanh": [596, 989], "arg_max": [596, 989], "arg_min": [596, 989], "arg_sort": [596, 989], "arg_uniqu": [596, 989], "backward_fil": 596, "clip_max": [596, 989], "clip_min": [596, 989], "cosh": [596, 989], "cumcount": 596, "cummax": [596, 989], "cummin": [596, 989], "cumulative_ev": [596, 989], "entropi": [596, 989], "eq": [596, 989], "ewm_mean": [596, 989], "ewm_std": [596, 989], "ewm_var": [596, 989], "extend_const": [596, 989], "flatten": 596, "ge": [596, 989], "gt": [596, 989], "inspect": [596, 694], "is_between": [596, 989], "is_finit": [596, 989], "is_first": [596, 989], "is_in": [596, 989], "is_infinit": [596, 989], "is_nan": [596, 989], "is_not_nan": [596, 989], "is_not_nul": [596, 989], "kurtosi": [596, 989], "le": [596, 989], "log10": [596, 989], "log1p": [596, 989], "mod": 596, "mul": 596, "nan_max": [596, 989], "nan_min": [596, 989], "ne": [596, 989], "or_": 596, "pct_chang": [596, 989], "pow": [596, 989], "reinterpret": [596, 989], "repeat_bi": 596, "rolling_appli": [596, 989], "rolling_median": [596, 989], "rolling_quantil": [596, 989], "rolling_skew": [596, 989], "rolling_std": [596, 989], "rolling_var": [596, 989], "search_sort": [596, 989], "shrink_dtyp": [596, 989], "sin": [596, 989], "sinh": [596, 989], "sort_bi": 596, "tan": [596, 989], "to_phys": [596, 989], "unique_count": [596, 989], "xor": 596, "expos": 607, "miscellan": 607, "arrowerror": 607, "columnnotfounderror": 607, "invalidoperationerror": 607, "nodataerror": 607, "polarspanicerror": 607, "schemaerror": 607, "schemafieldnotfounderror": 607, "shapeerror": 607, "parametr": 607, "build_info": 607, "get_index_typ": 607, "show_vers": 607, "threadpool_s": 607, "sqlcontext": [607, 996], "hit": [611, 694], "node": [611, 631, 638, 642, 647, 650, 694], "huge": [614, 694], "saver": [614, 694], "purpos": [621, 694], "influenc": [621, 638, 694], "read_json": [626, 675, 694], "lazygroupbi": [627, 628, 629, 694], "other_lf": [633, 694], "validate_output_schema": [638, 694], "streamabl": [638, 642, 694], "past": [638, 694], "assum": [638, 678, 694], "paramount": [638, 694], "bug": [638, 678, 694], "elig": [638, 694], "invari": [638, 694], "upheld": [638, 694], "prune": [638, 694], "show_plot": [647, 694], "truncate_nod": [647, 694], "figsiz": [647, 657, 694], "gantt": [647, 694], "plot": [647, 657, 694], "groupby_partit": [647, 694], "470": [647, 694], "475": [647, 694], "1964": [647, 694], "from_json": [649, 694], "swap": [650, 694], "output_path": [657, 694], "raw_output": [657, 694], "figur": [657, 694], "ram": [658, 659, 694], "slightli": [658, 659, 694], "my_larger_than_ram_fil": [658, 659, 694], "data_pagesize_limit": [659, 694], "290994": [662, 694], "118034": [662, 694], "433013": [662, 694], "1875": [670, 694], "extern": [673, 694], "lf_other": [673, 694], "afoo": [673, 694], "cfoo": [673, 694], "train_lf": [673, 694], "feature_0": [673, 694], "feature_1": [673, 694], "test_lf": [673, 694], "_train": [673, 694], "feature_0_train": [673, 694], "dataframescan": [675, 694], "output_schema": [675, 694], "lf5": 694, "lf6": 694, "explain": 694, "sink_ipc": 694, "sink_parquet": 694, "with_context": 694, "new_aliased_sr": [699, 989], "append_chunk": [702, 989], "super": [702, 989], "141593": [704, 989], "292432": [705, 989], "549306": [709, 989], "listnamespac": [715, 822, 887, 989], "field_2": 740, "n00": 740, "n01": 740, "n02": 740, "catnamespac": 749, "56789": [751, 828, 899, 989], "901234": [751, 828, 899, 989], "pi": [758, 913, 963, 989], "1232e": [758, 989], "quick": [766, 989, 997], "series_num": [766, 989], "581139": [766, 989], "series_str": [766, 989], "datetimenamespac": 771, "ser": [775, 776, 807], "replace_time_zon": [775, 776, 807], "kathmandu": [775, 776, 807], "0545": [775, 776, 807], "500m": [787, 789, 797, 804], "500000": 787, "2m": 792, "500000000": 797, "date_minus_1y_2mon": 799, "165": [803, 810], "series_equ": [803, 810, 989], "timestamp_u": 808, "978307200000000000": 808, "978393600000000000": 808, "978480000000000000": 808, "005": [816, 989], "06293300616044681": [816, 989], "65": [816, 989], "8568409950394724": [816, 989], "4000000": [817, 989], "814697265625": [817, 989], "stringnamespac": [822, 920, 989], "bitmask": [830, 989], "swiftli": [830, 989], "10734580197236529959": [831, 989], "3022416320763508302": [831, 989], "13756996518000038261": [831, 989], "bin_count": [833, 989], "a_count": [833, 989], "fall": [837, 989], "2147483648": [863, 989], "iso3166": [864, 989], "tur": [864, 989], "jpn": [864, 989], "nld": [864, 989], "country_lookup": [864, 989], "japan": [864, 989], "t\u00fcrkiy": [864, 989], "netherland": [864, 989], "unrecognis": [864, 989], "unspecifi": [864, 989], "country_nam": [864, 989], "166667": [877, 989], "142857": [877, 989], "peak": [878, 879, 989], "quanil": [881, 989], "nanstd": [889, 989], "858612": [889, 989], "200": [890, 891, 893, 989], "150": [891, 989], "350": [891, 989], "450": [891, 989], "381802": [895, 989], "dev": [896, 989], "frequent": [903, 904, 989], "mutat": [904, 989], "2246e": [913, 963, 989], "6331e16": [963, 989], "lib": [966, 989], "int64arrai": [966, 989], "a_2": [967, 989], "a_3": [967, 989], "s_from_str_repr": [969, 989], "zero_copy_onli": [971, 989], "writabl": [971, 989], "complet": [971, 989], "presenc": [971, 989], "immut": [971, 989], "127": [977, 989], "seriesview": [980, 989], "arraylik": 989, "dtype_if_empti": 989, "position": 989, "scenario": 989, "chunk_length": 989, "cut": 989, "get_chunk": 989, "has_valid": 989, "hist": 989, "is_boolean": 989, "is_float": 989, "is_integ": 989, "is_numer": [989, 997], "is_sort": 989, "is_tempor": 989, "is_utf8": 989, "new_from_index": 989, "peak_max": 989, "peak_min": 989, "power": 989, "qcut": 989, "set_at_idx": 989, "two_a": 996, "__enter__": 996, "__exit__": 996, "exc_typ": 996, "baseexcept": 996, "exc_val": 996, "exc_tb": 996, "tracebacktyp": 996, "unregist": 996, "guid": 997, "easi": 997, "approxim": 997, "own": 997, "machin": 997, "xdist": 997, "vari": 997, "hardwar": 997, "setup": 997, "numeric_dtyp": 997, "null_probabililti": 997, "test_numer": 997, "col0": 997, "col4": 997, "29096": 997, "485": 997, "2147483647": 997, "8257e14": 997, "7508": 997, "37338": 997, "7264": 997, "321": 997, "16996": 997, "121": 997, "361": 997, "63204": 997, "1443e235": 997, "conform": 997, "ascii_lett": 997, "id_char": 997, "alphabet": 997, "price": 997, "min_valu": 997, "max_valu": 997, "test_price_calcul": 997, "a101": 997, "8nin": 997, "qhoo": 997, "714": 997, "544": 997, "i0e0": 997, "0000": 997, "colz": 997, "test_miscellan": 997, "143": 997, "235": 997, "87": 997, "186": 997, "174": 997, "179": 997, "213": 997, "221": 997, "86": 997, "255": 997}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [36, 0, 1, "", "DataType"], [37, 0, 1, "", "Date"], [38, 0, 1, "", "Datetime"], [39, 0, 1, "", "Decimal"], [40, 0, 1, "", "Duration"], [41, 0, 1, "", "Float32"], [42, 0, 1, "", "Float64"], [43, 0, 1, "", "Int16"], [44, 0, 1, "", "Int32"], [45, 0, 1, "", "Int64"], [46, 0, 1, "", "Int8"], [47, 0, 1, "", "List"], [48, 0, 1, "", "Null"], [49, 0, 1, "", "Object"], [996, 0, 1, "", "SQLContext"], [56, 0, 1, "", "StringCache"], [57, 0, 1, "", "Struct"], [58, 0, 1, "", "Time"], [59, 0, 1, "", "UInt16"], [60, 0, 1, "", "UInt32"], [61, 0, 1, "", "UInt64"], [62, 0, 1, "", "UInt8"], [63, 0, 1, "", "Unknown"], [64, 0, 1, "", "Utf8"], [65, 4, 1, "", "align_frames"], [539, 4, 1, "", "all"], [540, 4, 1, "", "any"], [541, 4, 1, "", "apply"], [542, 4, 1, "", "approx_unique"], [543, 4, 1, "", "arange"], [544, 4, 1, "", "arg_sort_by"], [70, 4, 1, "", "arg_where"], [545, 4, 1, "", "avg"], [71, 4, 1, "", "build_info"], [546, 4, 1, "", "coalesce"], [547, 4, 1, "", "col"], [72, 4, 1, "", "collect_all"], [73, 4, 1, "", "concat"], [548, 4, 1, "", "concat_list"], [549, 4, 1, "", "concat_str"], [550, 4, 1, "", "corr"], [551, 4, 1, "", "count"], [552, 4, 1, "", "cov"], [553, 4, 1, "", "cumfold"], [554, 4, 1, "", "cumreduce"], [555, 4, 1, "", "cumsum"], [74, 4, 1, "", "cut"], [556, 4, 1, "", "date"], [75, 4, 1, "", "date_range"], [557, 4, 1, "", "datetime"], [558, 4, 1, "", "duration"], [559, 4, 1, "", "element"], [76, 4, 1, "", "enable_string_cache"], [560, 4, 1, "", "exclude"], [561, 4, 1, "", "first"], [562, 4, 1, "", "fold"], [563, 4, 1, "", "format"], [91, 4, 1, "", "from_arrow"], [92, 4, 1, "", "from_dataframe"], [93, 4, 1, "", "from_dict"], [94, 4, 1, "", "from_dicts"], [564, 4, 1, "", "from_epoch"], [95, 4, 1, "", "from_numpy"], [96, 4, 1, "", "from_pandas"], [97, 4, 1, "", "from_records"], [98, 4, 1, "", "from_repr"], [99, 4, 1, "", "get_dummies"], [100, 4, 1, "", "get_index_type"], [565, 4, 1, "", "groups"], [566, 4, 1, "", "head"], [567, 4, 1, "", "list"], [568, 4, 1, "", "lit"], [569, 4, 1, "", "map"], [570, 4, 1, "", "max"], [571, 4, 1, "", "mean"], [572, 4, 1, "", "median"], [573, 4, 1, "", "min"], [574, 4, 1, "", "n_unique"], [102, 4, 1, "", "ones"], [575, 4, 1, "", "pearson_corr"], [576, 4, 1, "", "quantile"], [103, 4, 1, "", "read_avro"], [104, 4, 1, "", "read_csv"], [105, 4, 1, "", "read_csv_batched"], [106, 4, 1, "", "read_database"], [107, 4, 1, "", "read_delta"], [108, 4, 1, "", "read_excel"], [109, 4, 1, "", "read_ipc"], [110, 4, 1, "", "read_ipc_schema"], [111, 4, 1, "", "read_json"], [112, 4, 1, "", "read_ndjson"], [113, 4, 1, "", "read_parquet"], [114, 4, 1, "", "read_parquet_schema"], [577, 4, 1, "", "reduce"], [578, 4, 1, "", "repeat"], [579, 4, 1, "", "rolling_corr"], [580, 4, 1, "", "rolling_cov"], [115, 4, 1, "", "scan_csv"], [116, 4, 1, "", "scan_delta"], [117, 4, 1, "", "scan_ipc"], [118, 4, 1, "", "scan_ndjson"], [119, 4, 1, "", "scan_parquet"], [120, 4, 1, "", "scan_pyarrow_dataset"], [581, 4, 1, "", "select"], [121, 4, 1, "", "show_versions"], [582, 4, 1, "", "spearman_rank_corr"], [583, 4, 1, "", "std"], [584, 4, 1, "", "struct"], [585, 4, 1, "", "sum"], [586, 4, 1, "", "tail"], [131, 4, 1, "", "threadpool_size"], [587, 4, 1, "", "time"], [132, 4, 1, "", "time_range"], [588, 4, 1, "", "var"], [589, 4, 1, "", "when"], [133, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "restore_defaults"], [9, 1, 1, "", "save"], [10, 1, 1, "", "set_ascii_tables"], [11, 1, 1, "", "set_fmt_float"], [12, 1, 1, "", "set_fmt_str_lengths"], [13, 1, 1, "", "set_streaming_chunk_size"], [14, 1, 1, "", "set_tbl_cell_alignment"], [15, 1, 1, "", "set_tbl_cols"], [16, 1, 1, "", "set_tbl_column_data_type_inline"], [17, 1, 1, "", "set_tbl_dataframe_shape_below"], [18, 1, 1, "", "set_tbl_formatting"], [19, 1, 1, "", "set_tbl_hide_column_data_types"], [20, 1, 1, "", "set_tbl_hide_column_names"], [21, 1, 1, "", "set_tbl_hide_dataframe_shape"], [22, 1, 1, "", "set_tbl_hide_dtype_separator"], [23, 1, 1, "", "set_tbl_rows"], [24, 1, 1, "", "set_tbl_width_chars"], [25, 1, 1, "", "set_verbose"], [26, 1, 1, "", "state"]], "polars.DataFrame": [[136, 1, 1, "", "__dataframe__"], [137, 1, 1, "", "apply"], [138, 1, 1, "", "bottom_k"], [139, 1, 1, "", "clear"], [140, 1, 1, "", "clone"], [141, 2, 1, "", "columns"], [142, 1, 1, "", "corr"], [143, 1, 1, "", "describe"], [144, 1, 1, "", "drop"], [145, 1, 1, "", "drop_in_place"], [146, 1, 1, "", "drop_nulls"], [147, 2, 1, "", "dtypes"], [148, 1, 1, "", "estimated_size"], [149, 1, 1, "", "explode"], [150, 1, 1, "", "extend"], [151, 1, 1, "", "fill_nan"], [152, 1, 1, "", "fill_null"], [153, 1, 1, "", "filter"], [154, 1, 1, "", "find_idx_by_name"], [155, 1, 1, "", "fold"], [156, 1, 1, "", "frame_equal"], [157, 1, 1, "", "get_column"], [158, 1, 1, "", "get_columns"], [159, 1, 1, "", "glimpse"], [160, 1, 1, "", "groupby"], [161, 1, 1, "", "groupby_dynamic"], [162, 1, 1, "", "groupby_rolling"], [163, 1, 1, "", "hash_rows"], [164, 1, 1, "", "head"], [165, 2, 1, "", "height"], [166, 1, 1, "", "hstack"], [167, 1, 1, "", "insert_at_idx"], [168, 1, 1, "", "interpolate"], [169, 1, 1, "", "is_duplicated"], [170, 1, 1, "", "is_empty"], [171, 1, 1, "", "is_unique"], [172, 1, 1, "", "item"], [173, 1, 1, "", "iter_rows"], [174, 1, 1, "", "iter_slices"], [175, 1, 1, "", "join"], [176, 1, 1, "", "join_asof"], [177, 1, 1, "", "lazy"], [178, 1, 1, "", "limit"], [179, 1, 1, "", "max"], [180, 1, 1, "", "mean"], [181, 1, 1, "", "median"], [182, 1, 1, "", "melt"], [183, 1, 1, "", "merge_sorted"], [184, 1, 1, "", "min"], [185, 1, 1, "", "n_chunks"], [186, 1, 1, "", "n_unique"], [187, 1, 1, "", "null_count"], [188, 1, 1, "", "partition_by"], [189, 1, 1, "", "pipe"], [190, 1, 1, "", "pivot"], [191, 1, 1, "", "product"], [192, 1, 1, "", "quantile"], [193, 1, 1, "", "rechunk"], [194, 1, 1, "", "rename"], [195, 1, 1, "", "replace"], [196, 1, 1, "", "replace_at_idx"], [197, 1, 1, "", "reverse"], [198, 1, 1, "", "row"], [199, 1, 1, "", "rows"], [200, 1, 1, "", "sample"], [201, 2, 1, "", "schema"], [202, 1, 1, "", "select"], [203, 1, 1, "", "set_sorted"], [204, 2, 1, "", "shape"], [205, 1, 1, "", "shift"], [206, 1, 1, "", "shift_and_fill"], [207, 1, 1, "", "shrink_to_fit"], [208, 1, 1, "", "slice"], [209, 1, 1, "", "sort"], [210, 1, 1, "", "std"], [211, 1, 1, "", "sum"], [212, 1, 1, "", "tail"], [213, 1, 1, "", "take_every"], [214, 1, 1, "", "to_arrow"], [215, 1, 1, "", "to_dict"], [216, 1, 1, "", "to_dicts"], [217, 1, 1, "", "to_dummies"], [218, 1, 1, "", "to_init_repr"], [219, 1, 1, "", "to_numpy"], [220, 1, 1, "", "to_pandas"], [221, 1, 1, "", "to_series"], [222, 1, 1, "", "to_struct"], [223, 1, 1, "", "top_k"], [224, 1, 1, "", "transpose"], [225, 1, 1, "", "unique"], [226, 1, 1, "", "unnest"], [227, 1, 1, "", "unstack"], [228, 1, 1, "", "update"], [229, 1, 1, "", "upsample"], [230, 1, 1, "", "var"], [231, 1, 1, "", "vstack"], [232, 2, 1, "", "width"], [233, 1, 1, "", "with_columns"], [234, 1, 1, "", "with_row_count"], [27, 1, 1, "", "write_avro"], [28, 1, 1, "", "write_csv"], [29, 1, 1, "", "write_database"], [30, 1, 1, "", "write_delta"], [31, 1, 1, "", "write_excel"], [32, 1, 1, "", "write_ipc"], [33, 1, 1, "", "write_json"], [34, 1, 1, "", "write_ndjson"], [35, 1, 1, "", "write_parquet"]], "polars.DataType": [[36, 1, 1, "", "__init__"]], "polars.Date": [[37, 1, 1, "", "__init__"]], "polars.Datetime": [[38, 1, 1, "", "__init__"]], "polars.Decimal": [[39, 1, 1, "", "__init__"]], "polars.Duration": [[40, 1, 1, "", "__init__"]], "polars.Expr": [[262, 1, 1, "", "abs"], [263, 1, 1, "", "add"], [264, 1, 1, "", "agg_groups"], [265, 1, 1, "", "alias"], [266, 1, 1, "", "all"], [267, 1, 1, "", "and_"], [268, 1, 1, "", "any"], [269, 1, 1, "", "append"], [270, 1, 1, "", "apply"], [271, 1, 1, "", "approx_unique"], [272, 1, 1, "", "arccos"], [273, 1, 1, "", "arccosh"], [274, 1, 1, "", "arcsin"], [275, 1, 1, "", "arcsinh"], [276, 1, 1, "", "arctan"], [277, 1, 1, "", "arctanh"], [278, 1, 1, "", "arg_max"], [279, 1, 1, "", "arg_min"], [280, 1, 1, "", "arg_sort"], [281, 1, 1, "", "arg_true"], [282, 1, 1, "", "arg_unique"], [309, 1, 1, "", "backward_fill"], [315, 1, 1, "", "bottom_k"], [316, 1, 1, "", "cache"], [317, 1, 1, "", "cast"], [319, 1, 1, "", "ceil"], [320, 1, 1, "", "clip"], [321, 1, 1, "", "clip_max"], [322, 1, 1, "", "clip_min"], [323, 1, 1, "", "cos"], [324, 1, 1, "", "cosh"], [325, 1, 1, "", "count"], [326, 1, 1, "", "cumcount"], [327, 1, 1, "", "cummax"], [328, 1, 1, "", "cummin"], [329, 1, 1, "", "cumprod"], [330, 1, 1, "", "cumsum"], [331, 1, 1, "", "cumulative_eval"], [332, 1, 1, "", "diff"], [333, 1, 1, "", "dot"], [334, 1, 1, "", "drop_nans"], [335, 1, 1, "", "drop_nulls"], [375, 1, 1, "", "entropy"], [376, 1, 1, "", "eq"], [377, 1, 1, "", "ewm_mean"], [378, 1, 1, "", "ewm_std"], [379, 1, 1, "", "ewm_var"], [380, 1, 1, "", "exclude"], [381, 1, 1, "", "exp"], [382, 1, 1, "", "explode"], [383, 1, 1, "", "extend_constant"], [384, 1, 1, "", "fill_nan"], [385, 1, 1, "", "fill_null"], [386, 1, 1, "", "filter"], [387, 1, 1, "", "first"], [388, 1, 1, "", "flatten"], [389, 1, 1, "", "floor"], [390, 1, 1, "", "floordiv"], [391, 1, 1, "", "forward_fill"], [392, 1, 1, "", "ge"], [393, 1, 1, "", "gt"], [394, 1, 1, "", "hash"], [395, 1, 1, "", "head"], [396, 1, 1, "", "implode"], [397, 1, 1, "", "inspect"], [398, 1, 1, "", "interpolate"], [399, 1, 1, "", "is_between"], [400, 1, 1, "", "is_duplicated"], [401, 1, 1, "", "is_finite"], [402, 1, 1, "", "is_first"], [403, 1, 1, "", "is_in"], [404, 1, 1, "", "is_infinite"], [405, 1, 1, "", "is_nan"], [406, 1, 1, "", "is_not"], [407, 1, 1, "", "is_not_nan"], [408, 1, 1, "", "is_not_null"], [409, 1, 1, "", "is_null"], [410, 1, 1, "", "is_unique"], [411, 1, 1, "", "keep_name"], [412, 1, 1, "", "kurtosis"], [413, 1, 1, "", "last"], [414, 1, 1, "", "le"], [415, 1, 1, "", "len"], [416, 1, 1, "", "limit"], [417, 1, 1, "", "log"], [418, 1, 1, "", "log10"], [419, 1, 1, "", "log1p"], [420, 1, 1, "", "lower_bound"], [421, 1, 1, "", "lt"], [422, 1, 1, "", "map"], [423, 1, 1, "", "map_alias"], [424, 1, 1, "", "map_dict"], [425, 1, 1, "", "max"], [426, 1, 1, "", "mean"], [427, 1, 1, "", "median"], [436, 1, 1, "", "min"], [437, 1, 1, "", "mod"], [438, 1, 1, "", "mode"], [439, 1, 1, "", "mul"], [440, 1, 1, "", "n_unique"], [441, 1, 1, "", "nan_max"], [442, 1, 1, "", "nan_min"], [443, 1, 1, "", "ne"], [444, 1, 1, "", "null_count"], [445, 1, 1, "", "or_"], [446, 1, 1, "", "over"], [447, 1, 1, "", "pct_change"], [448, 1, 1, "", "pipe"], [449, 1, 1, "", "pow"], [450, 1, 1, "", "prefix"], [451, 1, 1, "", "product"], [452, 1, 1, "", "quantile"], [453, 1, 1, "", "rank"], [454, 1, 1, "", "rechunk"], [455, 1, 1, "", "reinterpret"], [456, 1, 1, "", "repeat_by"], [457, 1, 1, "", "reshape"], [458, 1, 1, "", "reverse"], [459, 1, 1, "", "rolling_apply"], [460, 1, 1, "", "rolling_max"], [461, 1, 1, "", "rolling_mean"], [462, 1, 1, "", "rolling_median"], [463, 1, 1, "", "rolling_min"], [464, 1, 1, "", "rolling_quantile"], [465, 1, 1, "", "rolling_skew"], [466, 1, 1, "", "rolling_std"], [467, 1, 1, "", "rolling_sum"], [468, 1, 1, "", "rolling_var"], [469, 1, 1, "", "round"], [470, 1, 1, "", "sample"], [471, 1, 1, "", "search_sorted"], [472, 1, 1, "", "set_sorted"], [473, 1, 1, "", "shift"], [474, 1, 1, "", "shift_and_fill"], [475, 1, 1, "", "shrink_dtype"], [476, 1, 1, "", "shuffle"], [477, 1, 1, "", "sign"], [478, 1, 1, "", "sin"], [479, 1, 1, "", "sinh"], [480, 1, 1, "", "skew"], [481, 1, 1, "", "slice"], [482, 1, 1, "", "sort"], [483, 1, 1, "", "sort_by"], [484, 1, 1, "", "sqrt"], [485, 1, 1, "", "std"], [521, 1, 1, "", "sub"], [522, 1, 1, "", "suffix"], [523, 1, 1, "", "sum"], [524, 1, 1, "", "tail"], [525, 1, 1, "", "take"], [526, 1, 1, "", "take_every"], [527, 1, 1, "", "tan"], [528, 1, 1, "", "tanh"], [529, 1, 1, "", "to_physical"], [530, 1, 1, "", "top_k"], [531, 1, 1, "", "truediv"], [532, 1, 1, "", "unique"], [533, 1, 1, "", "unique_counts"], [534, 1, 1, "", "upper_bound"], [535, 1, 1, "", "value_counts"], [536, 1, 1, "", "var"], [537, 1, 1, "", "where"], [538, 1, 1, "", "xor"]], "polars.Expr.arr": [[283, 1, 1, "", "arg_max"], [284, 1, 1, "", "arg_min"], [285, 1, 1, "", "concat"], [286, 1, 1, "", "contains"], [287, 1, 1, "", "count_match"], [288, 1, 1, "", "diff"], [289, 1, 1, "", "eval"], [290, 1, 1, "", "explode"], [291, 1, 1, "", "first"], [292, 1, 1, "", "get"], [293, 1, 1, "", "head"], [294, 1, 1, "", "join"], [295, 1, 1, "", "last"], [296, 1, 1, "", "lengths"], [297, 1, 1, "", "max"], [298, 1, 1, "", "mean"], [299, 1, 1, "", "min"], [300, 1, 1, "", "reverse"], [301, 1, 1, "", "shift"], [302, 1, 1, "", "slice"], [303, 1, 1, "", "sort"], [304, 1, 1, "", "sum"], [305, 1, 1, "", "tail"], [306, 1, 1, "", "take"], [307, 1, 1, "", "to_struct"], [308, 1, 1, "", "unique"]], "polars.Expr.bin": [[310, 1, 1, "", "contains"], [311, 1, 1, "", "decode"], [312, 1, 1, "", "encode"], [313, 1, 1, "", "ends_with"], [314, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[318, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[336, 1, 1, "", "cast_time_unit"], [337, 1, 1, "", "combine"], [338, 1, 1, "", "convert_time_zone"], [339, 1, 1, "", "date"], [340, 1, 1, "", "datetime"], [341, 1, 1, "", "day"], [342, 1, 1, "", "days"], [343, 1, 1, "", "epoch"], [344, 1, 1, "", "hour"], [345, 1, 1, "", "hours"], [346, 1, 1, "", "is_leap_year"], [347, 1, 1, "", "iso_year"], [348, 1, 1, "", "microsecond"], [349, 1, 1, "", "microseconds"], [350, 1, 1, "", "millisecond"], [351, 1, 1, "", "milliseconds"], [352, 1, 1, "", "minute"], [353, 1, 1, "", "minutes"], [354, 1, 1, "", "month"], [355, 1, 1, "", "month_end"], [356, 1, 1, "", "month_start"], [357, 1, 1, "", "nanosecond"], [358, 1, 1, "", "nanoseconds"], [359, 1, 1, "", "offset_by"], [360, 1, 1, "", "ordinal_day"], [361, 1, 1, "", "quarter"], [362, 1, 1, "", "replace_time_zone"], [363, 1, 1, "", "round"], [364, 1, 1, "", "second"], [365, 1, 1, "", "seconds"], [366, 1, 1, "", "strftime"], [367, 1, 1, "", "time"], [368, 1, 1, "", "timestamp"], [369, 1, 1, "", "to_string"], [370, 1, 1, "", "truncate"], [371, 1, 1, "", "week"], [372, 1, 1, "", "weekday"], [373, 1, 1, "", "with_time_unit"], [374, 1, 1, "", "year"]], "polars.Expr.meta": [[428, 1, 1, "", "eq"], [429, 1, 1, "", "has_multiple_outputs"], [430, 1, 1, "", "is_regex_projection"], [431, 1, 1, "", "ne"], [432, 1, 1, "", "output_name"], [433, 1, 1, "", "pop"], [434, 1, 1, "", "root_names"], [435, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[486, 1, 1, "", "concat"], [487, 1, 1, "", "contains"], [488, 1, 1, "", "count_match"], [489, 1, 1, "", "decode"], [490, 1, 1, "", "encode"], [491, 1, 1, "", "ends_with"], [492, 1, 1, "", "explode"], [493, 1, 1, "", "extract"], [494, 1, 1, "", "extract_all"], [495, 1, 1, "", "json_extract"], [496, 1, 1, "", "json_path_match"], [497, 1, 1, "", "lengths"], [498, 1, 1, "", "ljust"], [499, 1, 1, "", "lstrip"], [500, 1, 1, "", "n_chars"], [501, 1, 1, "", "parse_int"], [502, 1, 1, "", "replace"], [503, 1, 1, "", "replace_all"], [504, 1, 1, "", "rjust"], [505, 1, 1, "", "rstrip"], [506, 1, 1, "", "slice"], [507, 1, 1, "", "split"], [508, 1, 1, "", "split_exact"], [509, 1, 1, "", "splitn"], [510, 1, 1, "", "starts_with"], [511, 1, 1, "", "strip"], [512, 1, 1, "", "strptime"], [513, 1, 1, "", "to_date"], [514, 1, 1, "", "to_datetime"], [515, 1, 1, "", "to_lowercase"], [516, 1, 1, "", "to_time"], [517, 1, 1, "", "to_uppercase"], [518, 1, 1, "", "zfill"]], "polars.Expr.struct": [[519, 1, 1, "", "field"], [520, 1, 1, "", "rename_fields"]], "polars.Float32": [[41, 1, 1, "", "__init__"]], "polars.Float64": [[42, 1, 1, "", "__init__"]], "polars.Int16": [[43, 1, 1, "", "__init__"]], "polars.Int32": [[44, 1, 1, "", "__init__"]], "polars.Int64": [[45, 1, 1, "", "__init__"]], "polars.Int8": [[46, 1, 1, "", "__init__"]], "polars.LazyFrame": [[610, 1, 1, "", "bottom_k"], [611, 1, 1, "", "cache"], [612, 1, 1, "", "clear"], [613, 1, 1, "", "clone"], [614, 1, 1, "", "collect"], [615, 2, 1, "", "columns"], [616, 1, 1, "", "drop"], [617, 1, 1, "", "drop_nulls"], [618, 2, 1, "", "dtypes"], [619, 1, 1, "", "explain"], [620, 1, 1, "", "explode"], [621, 1, 1, "", "fetch"], [622, 1, 1, "", "fill_nan"], [623, 1, 1, "", "fill_null"], [624, 1, 1, "", "filter"], [625, 1, 1, "", "first"], [626, 1, 1, "", "from_json"], [627, 1, 1, "", "groupby"], [628, 1, 1, "", "groupby_dynamic"], [629, 1, 1, "", "groupby_rolling"], [630, 1, 1, "", "head"], [631, 1, 1, "", "inspect"], [632, 1, 1, "", "interpolate"], [633, 1, 1, "", "join"], [634, 1, 1, "", "join_asof"], [635, 1, 1, "", "last"], [636, 1, 1, "", "lazy"], [637, 1, 1, "", "limit"], [638, 1, 1, "", "map"], [639, 1, 1, "", "max"], [640, 1, 1, "", "mean"], [641, 1, 1, "", "median"], [642, 1, 1, "", "melt"], [643, 1, 1, "", "merge_sorted"], [644, 1, 1, "", "min"], [645, 1, 1, "", "null_count"], [646, 1, 1, "", "pipe"], [647, 1, 1, "", "profile"], [648, 1, 1, "", "quantile"], [649, 1, 1, "", "read_json"], [650, 1, 1, "", "rename"], [651, 1, 1, "", "reverse"], [652, 2, 1, "", "schema"], [653, 1, 1, "", "select"], [654, 1, 1, "", "set_sorted"], [655, 1, 1, "", "shift"], [656, 1, 1, "", "shift_and_fill"], [657, 1, 1, "", "show_graph"], [658, 1, 1, "", "sink_ipc"], [659, 1, 1, "", "sink_parquet"], [660, 1, 1, "", "slice"], [661, 1, 1, "", "sort"], [662, 1, 1, "", "std"], [663, 1, 1, "", "sum"], [664, 1, 1, "", "tail"], [665, 1, 1, "", "take_every"], [666, 1, 1, "", "top_k"], [667, 1, 1, "", "unique"], [668, 1, 1, "", "unnest"], [669, 1, 1, "", "update"], [670, 1, 1, "", "var"], [671, 2, 1, "", "width"], [672, 1, 1, "", "with_columns"], [673, 1, 1, "", "with_context"], [674, 1, 1, "", "with_row_count"], [675, 1, 1, "", "write_json"]], "polars.List": [[47, 1, 1, "", "__init__"]], "polars.Null": [[48, 1, 1, "", "__init__"]], "polars.Object": [[49, 1, 1, "", "__init__"]], "polars.SQLContext": [[996, 1, 1, "", "__enter__"], [996, 1, 1, "", "__exit__"], [996, 1, 1, "", "__init__"], [50, 1, 1, "", "execute"], [51, 1, 1, "", "register"], [52, 1, 1, "", "register_globals"], [53, 1, 1, "", "register_many"], [54, 1, 1, "", "tables"], [55, 1, 1, "", "unregister"]], "polars.Series": [[698, 1, 1, "", "abs"], [699, 1, 1, "", "alias"], [700, 1, 1, "", "all"], [701, 1, 1, "", "any"], [702, 1, 1, "", "append"], [703, 1, 1, "", "apply"], [704, 1, 1, "", "arccos"], [705, 1, 1, "", "arccosh"], [706, 1, 1, "", "arcsin"], [707, 1, 1, "", "arcsinh"], [708, 1, 1, "", "arctan"], [709, 1, 1, "", "arctanh"], [710, 1, 1, "", "arg_max"], [711, 1, 1, "", "arg_min"], [712, 1, 1, "", "arg_sort"], [713, 1, 1, "", "arg_true"], [714, 1, 1, "", "arg_unique"], [715, 3, 1, "", "arr"], [747, 1, 1, "", "bottom_k"], [748, 1, 1, "", "cast"], [749, 3, 1, "", "cat"], [751, 1, 1, "", "ceil"], [752, 1, 1, "", "chunk_lengths"], [753, 1, 1, "", "clear"], [754, 1, 1, "", "clip"], [755, 1, 1, "", "clip_max"], [756, 1, 1, "", "clip_min"], [757, 1, 1, "", "clone"], [758, 1, 1, "", "cos"], [759, 1, 1, "", "cosh"], [760, 1, 1, "", "cummax"], [761, 1, 1, "", "cummin"], [762, 1, 1, "", "cumprod"], [763, 1, 1, "", "cumsum"], [764, 1, 1, "", "cumulative_eval"], [765, 1, 1, "", "cut"], [766, 1, 1, "", "describe"], [767, 1, 1, "", "diff"], [768, 1, 1, "", "dot"], [769, 1, 1, "", "drop_nans"], [770, 1, 1, "", "drop_nulls"], [771, 3, 1, "", "dt"], [815, 3, 1, "", "dtype"], [816, 1, 1, "", "entropy"], [817, 1, 1, "", "estimated_size"], [818, 1, 1, "", "ewm_mean"], [819, 1, 1, "", "ewm_std"], [820, 1, 1, "", "ewm_var"], [821, 1, 1, "", "exp"], [822, 1, 1, "", "explode"], [823, 1, 1, "", "extend_constant"], [824, 1, 1, "", "fill_nan"], [825, 1, 1, "", "fill_null"], [826, 1, 1, "", "filter"], [827, 3, 1, "", "flags"], [828, 1, 1, "", "floor"], [829, 1, 1, "", "get_chunks"], [830, 1, 1, "", "has_validity"], [831, 1, 1, "", "hash"], [832, 1, 1, "", "head"], [833, 1, 1, "", "hist"], [834, 1, 1, "", "implode"], [835, 3, 1, "", "inner_dtype"], [836, 1, 1, "", "interpolate"], [837, 1, 1, "", "is_between"], [838, 1, 1, "", "is_boolean"], [839, 1, 1, "", "is_duplicated"], [840, 1, 1, "", "is_empty"], [841, 1, 1, "", "is_finite"], [842, 1, 1, "", "is_first"], [843, 1, 1, "", "is_float"], [844, 1, 1, "", "is_in"], [845, 1, 1, "", "is_infinite"], [846, 1, 1, "", "is_integer"], [847, 1, 1, "", "is_nan"], [848, 1, 1, "", "is_not_nan"], [849, 1, 1, "", "is_not_null"], [850, 1, 1, "", "is_null"], [851, 1, 1, "", "is_numeric"], [852, 1, 1, "", "is_sorted"], [853, 1, 1, "", "is_temporal"], [854, 1, 1, "", "is_unique"], [855, 1, 1, "", "is_utf8"], [856, 1, 1, "", "item"], [857, 1, 1, "", "kurtosis"], [858, 1, 1, "", "len"], [859, 1, 1, "", "limit"], [860, 1, 1, "", "log"], [861, 1, 1, "", "log10"], [862, 1, 1, "", "log1p"], [863, 1, 1, "", "lower_bound"], [864, 1, 1, "", "map_dict"], [865, 1, 1, "", "max"], [866, 1, 1, "", "mean"], [867, 1, 1, "", "median"], [868, 1, 1, "", "min"], [869, 1, 1, "", "mode"], [870, 1, 1, "", "n_chunks"], [871, 1, 1, "", "n_unique"], [872, 3, 1, "", "name"], [873, 1, 1, "", "nan_max"], [874, 1, 1, "", "nan_min"], [875, 1, 1, "", "new_from_index"], [876, 1, 1, "", "null_count"], [877, 1, 1, "", "pct_change"], [878, 1, 1, "", "peak_max"], [879, 1, 1, "", "peak_min"], [880, 1, 1, "", "product"], [881, 1, 1, "", "qcut"], [882, 1, 1, "", "quantile"], [883, 1, 1, "", "rank"], [884, 1, 1, "", "rechunk"], [885, 1, 1, "", "reinterpret"], [886, 1, 1, "", "rename"], [887, 1, 1, "", "reshape"], [888, 1, 1, "", "reverse"], [889, 1, 1, "", "rolling_apply"], [890, 1, 1, "", "rolling_max"], [891, 1, 1, "", "rolling_mean"], [892, 1, 1, "", "rolling_median"], [893, 1, 1, "", "rolling_min"], [894, 1, 1, "", "rolling_quantile"], [895, 1, 1, "", "rolling_skew"], [896, 1, 1, "", "rolling_std"], [897, 1, 1, "", "rolling_sum"], [898, 1, 1, "", "rolling_var"], [899, 1, 1, "", "round"], [900, 1, 1, "", "sample"], [901, 1, 1, "", "search_sorted"], [902, 1, 1, "", "series_equal"], [903, 1, 1, "", "set"], [904, 1, 1, "", "set_at_idx"], [905, 1, 1, "", "set_sorted"], [906, 3, 1, "", "shape"], [907, 1, 1, "", "shift"], [908, 1, 1, "", "shift_and_fill"], [909, 1, 1, "", "shrink_dtype"], [910, 1, 1, "", "shrink_to_fit"], [911, 1, 1, "", "shuffle"], [912, 1, 1, "", "sign"], [913, 1, 1, "", "sin"], [914, 1, 1, "", "sinh"], [915, 1, 1, "", "skew"], [916, 1, 1, "", "slice"], [917, 1, 1, "", "sort"], [918, 1, 1, "", "sqrt"], [919, 1, 1, "", "std"], [920, 3, 1, "", "str"], [959, 1, 1, "", "sum"], [960, 1, 1, "", "tail"], [961, 1, 1, "", "take"], [962, 1, 1, "", "take_every"], [963, 1, 1, "", "tan"], [964, 1, 1, "", "tanh"], [965, 3, 1, "", "time_unit"], [966, 1, 1, "", "to_arrow"], [967, 1, 1, "", "to_dummies"], [968, 1, 1, "", "to_frame"], [969, 1, 1, "", "to_init_repr"], [970, 1, 1, "", "to_list"], [971, 1, 1, "", "to_numpy"], [972, 1, 1, "", "to_pandas"], [973, 1, 1, "", "to_physical"], [974, 1, 1, "", "top_k"], [975, 1, 1, "", "unique"], [976, 1, 1, "", "unique_counts"], [977, 1, 1, "", "upper_bound"], [978, 1, 1, "", "value_counts"], [979, 1, 1, "", "var"], [980, 1, 1, "", "view"], [981, 1, 1, "", "zip_with"]], "polars.Series.arr": [[716, 1, 1, "", "arg_max"], [717, 1, 1, "", "arg_min"], [718, 1, 1, "", "concat"], [719, 1, 1, "", "contains"], [720, 1, 1, "", "count_match"], [721, 1, 1, "", "diff"], [722, 1, 1, "", "eval"], [723, 1, 1, "", "explode"], [724, 1, 1, "", "first"], [725, 1, 1, "", "get"], [726, 1, 1, "", "head"], [727, 1, 1, "", "join"], [728, 1, 1, "", "last"], [729, 1, 1, "", "lengths"], [730, 1, 1, "", "max"], [731, 1, 1, "", "mean"], [732, 1, 1, "", "min"], [733, 1, 1, "", "reverse"], [734, 1, 1, "", "shift"], [735, 1, 1, "", "slice"], [736, 1, 1, "", "sort"], [737, 1, 1, "", "sum"], [738, 1, 1, "", "tail"], [739, 1, 1, "", "take"], [740, 1, 1, "", "to_struct"], [741, 1, 1, "", "unique"]], "polars.Series.bin": [[742, 1, 1, "", "contains"], [743, 1, 1, "", "decode"], [744, 1, 1, "", "encode"], [745, 1, 1, "", "ends_with"], [746, 1, 1, "", "starts_with"]], "polars.Series.cat": [[750, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[772, 1, 1, "", "cast_time_unit"], [773, 1, 1, "", "combine"], [774, 1, 1, "", "convert_time_zone"], [775, 1, 1, "", "date"], [776, 1, 1, "", "datetime"], [777, 1, 1, "", "day"], [778, 1, 1, "", "days"], [779, 1, 1, "", "epoch"], [780, 1, 1, "", "hour"], [781, 1, 1, "", "hours"], [782, 1, 1, "", "is_leap_year"], [783, 1, 1, "", "iso_year"], [784, 1, 1, "", "max"], [785, 1, 1, "", "mean"], [786, 1, 1, "", "median"], [787, 1, 1, "", "microsecond"], [788, 1, 1, "", "microseconds"], [789, 1, 1, "", "millisecond"], [790, 1, 1, "", "milliseconds"], [791, 1, 1, "", "min"], [792, 1, 1, "", "minute"], [793, 1, 1, "", "minutes"], [794, 1, 1, "", "month"], [795, 1, 1, "", "month_end"], [796, 1, 1, "", "month_start"], [797, 1, 1, "", "nanosecond"], [798, 1, 1, "", "nanoseconds"], [799, 1, 1, "", "offset_by"], [800, 1, 1, "", "ordinal_day"], [801, 1, 1, "", "quarter"], [802, 1, 1, "", "replace_time_zone"], [803, 1, 1, "", "round"], [804, 1, 1, "", "second"], [805, 1, 1, "", "seconds"], [806, 1, 1, "", "strftime"], [807, 1, 1, "", "time"], [808, 1, 1, "", "timestamp"], [809, 1, 1, "", "to_string"], [810, 1, 1, "", "truncate"], [811, 1, 1, "", "week"], [812, 1, 1, "", "weekday"], [813, 1, 1, "", "with_time_unit"], [814, 1, 1, "", "year"]], "polars.Series.str": [[921, 1, 1, "", "concat"], [922, 1, 1, "", "contains"], [923, 1, 1, "", "count_match"], [924, 1, 1, "", "decode"], [925, 1, 1, "", "encode"], [926, 1, 1, "", "ends_with"], [927, 1, 1, "", "explode"], [928, 1, 1, "", "extract"], [929, 1, 1, "", "extract_all"], [930, 1, 1, "", "json_extract"], [931, 1, 1, "", "json_path_match"], [932, 1, 1, "", "lengths"], [933, 1, 1, "", "ljust"], [934, 1, 1, "", "lstrip"], [935, 1, 1, "", "n_chars"], [936, 1, 1, "", "parse_int"], [937, 1, 1, "", "replace"], [938, 1, 1, "", "replace_all"], [939, 1, 1, "", "rjust"], [940, 1, 1, "", "rstrip"], [941, 1, 1, "", "slice"], [942, 1, 1, "", "split"], [943, 1, 1, "", "split_exact"], [944, 1, 1, "", "splitn"], [945, 1, 1, "", "starts_with"], [946, 1, 1, "", "strip"], [947, 1, 1, "", "strptime"], [948, 1, 1, "", "to_date"], [949, 1, 1, "", "to_datetime"], [950, 1, 1, "", "to_lowercase"], [951, 1, 1, "", "to_time"], [952, 1, 1, "", "to_uppercase"], [953, 1, 1, "", "zfill"]], "polars.Series.struct": [[954, 1, 1, "", "field"], [955, 3, 1, "", "fields"], [956, 1, 1, "", "rename_fields"], [957, 3, 1, "", "schema"], [958, 1, 1, "", "unnest"]], "polars.StringCache": [[56, 1, 1, "", "__init__"]], "polars.Struct": [[57, 1, 1, "", "__init__"]], "polars.Time": [[58, 1, 1, "", "__init__"]], "polars.UInt16": [[59, 1, 1, "", "__init__"]], "polars.UInt32": [[60, 1, 1, "", "__init__"]], "polars.UInt64": [[61, 1, 1, "", "__init__"]], "polars.UInt8": [[62, 1, 1, "", "__init__"]], "polars.Unknown": [[63, 1, 1, "", "__init__"]], "polars.Utf8": [[64, 1, 1, "", "__init__"]], "polars.api": [[66, 4, 1, "", "register_dataframe_namespace"], [67, 4, 1, "", "register_expr_namespace"], [68, 4, 1, "", "register_lazyframe_namespace"], [69, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[235, 1, 1, "", "__iter__"], [236, 1, 1, "", "agg"], [237, 1, 1, "", "all"], [238, 1, 1, "", "apply"], [239, 1, 1, "", "count"], [240, 1, 1, "", "first"], [241, 1, 1, "", "head"], [242, 1, 1, "", "last"], [243, 1, 1, "", "max"], [244, 1, 1, "", "mean"], [245, 1, 1, "", "median"], [246, 1, 1, "", "min"], [247, 1, 1, "", "n_unique"], [248, 1, 1, "", "quantile"], [249, 1, 1, "", "sum"], [250, 1, 1, "", "tail"]], "polars.exceptions": [[77, 5, 1, "", "ArrowError"], [78, 5, 1, "", "ColumnNotFoundError"], [79, 5, 1, "", "ComputeError"], [80, 5, 1, "", "DuplicateError"], [81, 5, 1, "", "InvalidOperationError"], [82, 5, 1, "", "NoDataError"], [83, 5, 1, "", "NoRowsReturnedError"], [84, 5, 1, "", "PolarsPanicError"], [85, 5, 1, "", "RowsError"], [86, 5, 1, "", "SchemaError"], [87, 5, 1, "", "SchemaFieldNotFoundError"], [88, 5, 1, "", "ShapeError"], [89, 5, 1, "", "StructFieldNotFoundError"], [90, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[101, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[676, 1, 1, "", "agg"], [677, 1, 1, "", "all"], [678, 1, 1, "", "apply"], [679, 1, 1, "", "count"], [680, 1, 1, "", "first"], [681, 1, 1, "", "head"], [682, 1, 1, "", "last"], [683, 1, 1, "", "max"], [684, 1, 1, "", "mean"], [685, 1, 1, "", "median"], [686, 1, 1, "", "min"], [687, 1, 1, "", "n_unique"], [688, 1, 1, "", "quantile"], [689, 1, 1, "", "sum"], [690, 1, 1, "", "tail"]], "polars.testing": [[122, 4, 1, "", "assert_frame_equal"], [123, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[124, 0, 1, "", "column"], [125, 4, 1, "", "columns"], [126, 4, 1, "", "create_list_strategy"], [127, 4, 1, "", "dataframes"], [128, 4, 1, "", "load_profile"], [129, 4, 1, "", "series"], [130, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[124, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 150], "api": [1, 66, 67, 68, 69, 607], "provid": 1, "new": 1, "function": [1, 595, 606], "avail": 1, "registr": 1, "exampl": [1, 997], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 997], "arrai": 2, "binari": [3, 590, 601, 983], "boolean": [4, 591, 984], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 134], "activate_decim": 6, "load": [7, 134], "restore_default": 8, "save": [9, 134], "set_ascii_t": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_streaming_chunk_s": 13, "set_tbl_cell_align": 14, "set_tbl_col": 15, "set_tbl_column_data_type_inlin": 16, "set_tbl_dataframe_shape_below": 17, "set_tbl_format": 18, "set_tbl_hide_column_data_typ": 19, "set_tbl_hide_column_nam": 20, "set_tbl_hide_dataframe_shap": 21, "set_tbl_hide_dtype_separ": 22, "set_tbl_row": 23, "set_tbl_width_char": 24, "set_verbos": 25, "state": [26, 134], "datafram": [27, 28, 29, 30, 31, 32, 33, 34, 35, 127, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256], "write_avro": 27, "write_csv": 28, "write_databas": 29, "write_delta": 30, "write_excel": 31, "write_ipc": 32, "write_json": [33, 675], "write_ndjson": 34, "write_parquet": 35, "datatyp": 36, "date": [37, 339, 556, 775], "datetim": [38, 340, 557, 776], "decim": 39, "durat": [40, 558], "float32": 41, "float64": 42, "int16": 43, "int32": 44, "int64": 45, "int8": 46, "list": [47, 567, 597, 990], "null": 48, "object": 49, "sqlcontext": [50, 51, 52, 53, 54, 55], "execut": 50, "regist": 51, "register_glob": 52, "register_mani": 53, "tabl": 54, "unregist": 55, "stringcach": [56, 606], "struct": [57, 519, 520, 584, 603, 954, 955, 956, 957, 958, 994], "time": [58, 367, 587, 807], "uint16": 59, "uint32": 60, "uint64": 61, "uint8": 62, "unknown": 63, "utf8": 64, "align_fram": 65, "register_dataframe_namespac": 66, "register_expr_namespac": 67, "register_lazyframe_namespac": 68, "register_series_namespac": 69, "arg_wher": 70, "build_info": 71, "collect_al": 72, "concat": [73, 285, 486, 718, 921], "cut": [74, 765], "date_rang": 75, "enable_string_cach": 76, "except": [77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 260], "arrowerror": 77, "columnnotfounderror": 78, "computeerror": 79, "duplicateerror": 80, "invalidoperationerror": 81, "nodataerror": 82, "norowsreturnederror": 83, "polarspanicerror": 84, "rowserror": 85, "schemaerror": 86, "schemafieldnotfounderror": 87, "shapeerror": 88, "structfieldnotfounderror": 89, "toomanyrowsreturnederror": 90, "from_arrow": 91, "from_datafram": 92, "from_dict": [93, 94], "from_numpi": 95, "from_panda": 96, "from_record": 97, "from_repr": 98, "get_dummi": 99, "get_index_typ": 100, "io": 101, "csv": [101, 608], "batched_read": 101, "batchedcsvread": [101, 608], "next_batch": 101, "ones": 102, "read_avro": 103, "read_csv": 104, "read_csv_batch": 105, "read_databas": 106, "read_delta": 107, "read_excel": 108, "read_ipc": 109, "read_ipc_schema": 110, "read_json": [111, 649], "read_ndjson": 112, "read_parquet": 113, "read_parquet_schema": 114, "scan_csv": 115, "scan_delta": 116, "scan_ipc": 117, "scan_ndjson": 118, "scan_parquet": 119, "scan_pyarrow_dataset": 120, "show_vers": 121, "test": [122, 123, 124, 125, 126, 127, 128, 129, 130, 997], "assert_frame_equ": 122, "assert_series_equ": 123, "parametr": [124, 125, 126, 127, 128, 129, 130, 997], "column": [124, 125, 141, 593, 615], "create_list_strategi": 126, "load_profil": 128, "seri": [129, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 989], "set_profil": 130, "threadpool_s": 131, "time_rang": 132, "zero": 133, "option": 134, "current": 134, "us": 134, "context": 134, "manag": 134, "aggreg": [135, 261, 609, 697], "__dataframe__": 136, "appli": [137, 238, 270, 541, 678, 703], "bottom_k": [138, 315, 610, 747], "clear": [139, 612, 753], "clone": [140, 613, 757], "corr": [142, 550], "describ": [143, 766], "drop": [144, 616], "drop_in_plac": 145, "drop_nul": [146, 335, 617, 770], "dtype": [147, 618, 815], "estimated_s": [148, 817], "explod": [149, 290, 382, 492, 620, 723, 822, 927], "fill_nan": [151, 384, 622, 824], "fill_nul": [152, 385, 623, 825], "filter": [153, 386, 624, 826], "find_idx_by_nam": 154, "fold": [155, 562], "frame_equ": 156, "get_column": [157, 158], "glimps": 159, "groupbi": [160, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 255, 627, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693], "groupby_dynam": [161, 628], "groupby_rol": [162, 629], "hash_row": 163, "head": [164, 241, 293, 395, 566, 630, 681, 726, 832], "height": 165, "hstack": 166, "insert_at_idx": 167, "interpol": [168, 398, 632, 836], "is_dupl": [169, 400, 839], "is_empti": [170, 840], "is_uniqu": [171, 410, 854], "item": [172, 856], "iter_row": 173, "iter_slic": 174, "join": [175, 294, 633, 727], "join_asof": [176, 634], "lazi": [177, 606, 636], "limit": [178, 416, 637, 859], "max": [179, 243, 297, 425, 570, 639, 683, 730, 784, 865], "mean": [180, 244, 298, 426, 571, 640, 684, 731, 785, 866], "median": [181, 245, 427, 572, 641, 685, 786, 867], "melt": [182, 642], "merge_sort": [183, 643], "min": [184, 246, 299, 436, 573, 644, 686, 732, 791, 868], "n_chunk": [185, 870], "n_uniqu": [186, 247, 440, 574, 687, 871], "null_count": [187, 444, 645, 876], "partition_bi": 188, "pipe": [189, 448, 646], "pivot": 190, "product": [191, 451, 880], "quantil": [192, 248, 452, 576, 648, 688, 882], "rechunk": [193, 454, 884], "renam": [194, 650, 886], "replac": [195, 502, 937], "replace_at_idx": 196, "revers": [197, 300, 458, 651, 733, 888], "row": [198, 199], "sampl": [200, 470, 900], "schema": [201, 652, 957], "select": [202, 258, 581, 600, 653, 696, 992], "set_sort": [203, 472, 654, 905], "shape": [204, 906], "shift": [205, 301, 473, 655, 734, 907], "shift_and_fil": [206, 474, 656, 908], "shrink_to_fit": [207, 910], "slice": [208, 302, 481, 506, 660, 735, 916, 941], "sort": [209, 303, 482, 661, 736, 917], "std": [210, 485, 583, 662, 919], "sum": [211, 249, 304, 523, 585, 663, 689, 737, 959], "tail": [212, 250, 305, 524, 586, 664, 690, 738, 960], "take_everi": [213, 526, 665, 962], "to_arrow": [214, 966], "to_dict": [215, 216], "to_dummi": [217, 967], "to_init_repr": [218, 969], "to_numpi": [219, 971], "to_panda": [220, 972], "to_seri": 221, "to_struct": [222, 307, 740], "top_k": [223, 530, 666, 974], "transpos": 224, "uniqu": [225, 308, 532, 667, 741, 975], "unnest": [226, 668, 958], "unstack": 227, "updat": [228, 669], "upsampl": 229, "var": [230, 536, 588, 670, 979], "vstack": 231, "width": [232, 671], "with_column": [233, 672], "with_row_count": [234, 674], "__iter__": 235, "agg": [236, 676], "all": [237, 266, 539, 677, 700], "count": [239, 325, 551, 679], "first": [240, 291, 387, 561, 625, 680, 724], "last": [242, 295, 413, 635, 682, 728], "attribut": [251, 691, 982], "comput": [252, 594, 986], "descript": [253, 692, 987], "export": [254, 988], "miscellan": [257, 599, 606, 695, 991], "manipul": [258, 600, 696, 992], "data": 259, "type": 259, "numer": [259, 601], "tempor": [259, 604, 995], "nest": 259, "other": 259, "expr": [262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538], "ab": [262, 698], "add": 263, "agg_group": 264, "alia": [265, 699], "and_": 267, "ani": [268, 540, 701], "append": [269, 702], "approx_uniqu": [271, 542], "arcco": [272, 704], "arccosh": [273, 705], "arcsin": [274, 706], "arcsinh": [275, 707], "arctan": [276, 708], "arctanh": [277, 709], "arg_max": [278, 283, 710, 716], "arg_min": [279, 284, 711, 717], "arg_sort": [280, 712], "arg_tru": [281, 713], "arg_uniqu": [282, 714], "arr": [283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741], "contain": [286, 310, 487, 719, 742, 922], "count_match": [287, 488, 720, 923], "diff": [288, 332, 721, 767], "eval": [289, 722], "get": [292, 725], "length": [296, 497, 729, 932], "take": [306, 525, 739, 961], "backward_fil": 309, "bin": [310, 311, 312, 313, 314, 742, 743, 744, 745, 746], "decod": [311, 489, 743, 924], "encod": [312, 490, 744, 925], "ends_with": [313, 491, 745, 926], "starts_with": [314, 510, 746, 945], "cach": [316, 611], "cast": [317, 748], "cat": [318, 749, 750], "set_ord": [318, 750], "ceil": [319, 751], "clip": [320, 754], "clip_max": [321, 755], "clip_min": [322, 756], "co": [323, 758], "cosh": [324, 759], "cumcount": 326, "cummax": [327, 760], "cummin": [328, 761], "cumprod": [329, 762], "cumsum": [330, 555, 763], "cumulative_ev": [331, 764], "dot": [333, 768], "drop_nan": [334, 769], "dt": [336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814], "cast_time_unit": [336, 772], "combin": [337, 773], "convert_time_zon": [338, 774], "dai": [341, 342, 777, 778], "epoch": [343, 779], "hour": [344, 345, 780, 781], "is_leap_year": [346, 782], "iso_year": [347, 783], "microsecond": [348, 349, 787, 788], "millisecond": [350, 351, 789, 790], "minut": [352, 353, 792, 793], "month": [354, 794], "month_end": [355, 795], "month_start": [356, 796], "nanosecond": [357, 358, 797, 798], "offset_bi": [359, 799], "ordinal_dai": [360, 800], "quarter": [361, 801], "replace_time_zon": [362, 802], "round": [363, 469, 803, 899], "second": [364, 365, 804, 805], "strftime": [366, 806], "timestamp": [368, 808], "to_str": [369, 809], "truncat": [370, 810], "week": [371, 811], "weekdai": [372, 812], "with_time_unit": [373, 813], "year": [374, 814], "entropi": [375, 816], "eq": [376, 428], "ewm_mean": [377, 818], "ewm_std": [378, 819], "ewm_var": [379, 820], "exclud": [380, 560], "exp": [381, 821], "extend_const": [383, 823], "flatten": 388, "floor": [389, 828], "floordiv": 390, "forward_fil": 391, "ge": 392, "gt": 393, "hash": [394, 831], "implod": [396, 834], "inspect": [397, 631], "is_between": [399, 837], "is_finit": [401, 841], "is_first": [402, 842], "is_in": [403, 844], "is_infinit": [404, 845], "is_nan": [405, 847], "is_not": 406, "is_not_nan": [407, 848], "is_not_nul": [408, 849], "is_nul": [409, 850], "keep_nam": 411, "kurtosi": [412, 857], "le": 414, "len": [415, 858], "log": [417, 860], "log10": [418, 861], "log1p": [419, 862], "lower_bound": [420, 863], "lt": 421, "map": [422, 569, 638], "map_alia": 423, "map_dict": [424, 864], "meta": [428, 429, 430, 431, 432, 433, 434, 435, 598], "has_multiple_output": 429, "is_regex_project": 430, "ne": [431, 443], "output_nam": 432, "pop": 433, "root_nam": 434, "undo_alias": 435, "mod": 437, "mode": [438, 869], "mul": 439, "nan_max": [441, 873], "nan_min": [442, 874], "or_": 445, "over": 446, "pct_chang": [447, 877], "pow": 449, "prefix": 450, "rank": [453, 883], "reinterpret": [455, 885], "repeat_bi": 456, "reshap": [457, 887], "rolling_appli": [459, 889], "rolling_max": [460, 890], "rolling_mean": [461, 891], "rolling_median": [462, 892], "rolling_min": [463, 893], "rolling_quantil": [464, 894], "rolling_skew": [465, 895], "rolling_std": [466, 896], "rolling_sum": [467, 897], "rolling_var": [468, 898], "search_sort": [471, 901], "shrink_dtyp": [475, 909], "shuffl": [476, 911], "sign": [477, 912], "sin": [478, 913], "sinh": [479, 914], "skew": [480, 915], "sort_bi": 483, "sqrt": [484, 918], "str": [486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953], "extract": [493, 928], "extract_al": [494, 929], "json_extract": [495, 930], "json_path_match": [496, 931], "ljust": [498, 933], "lstrip": [499, 934], "n_char": [500, 935], "parse_int": [501, 936], "replace_al": [503, 938], "rjust": [504, 939], "rstrip": [505, 940], "split": [507, 942], "split_exact": [508, 943], "splitn": [509, 944], "strip": [511, 946], "strptime": [512, 947], "to_dat": [513, 948], "to_datetim": [514, 949], "to_lowercas": [515, 950], "to_tim": [516, 951], "to_uppercas": [517, 952], "zfill": [518, 953], "field": [519, 954, 955], "rename_field": [520, 956], "sub": 521, "suffix": 522, "tan": [527, 963], "tanh": [528, 964], "to_phys": [529, 973], "truediv": 531, "unique_count": [533, 976], "upper_bound": [534, 977], "value_count": [535, 978], "where": 537, "xor": 538, "arang": 543, "arg_sort_bi": 544, "avg": 545, "coalesc": 546, "col": 547, "concat_list": 548, "concat_str": 549, "cov": 552, "cumfold": 553, "cumreduc": 554, "element": 559, "format": 563, "from_epoch": 564, "group": 565, "lit": 568, "pearson_corr": 575, "reduc": 577, "repeat": 578, "rolling_corr": 579, "rolling_cov": 580, "spearman_rank_corr": 582, "when": 589, "categori": [592, 985], "name": [593, 872], "express": 596, "oper": 601, "conjunct": 601, "comparison": 601, "string": [602, 993], "window": 605, "convers": 606, "eager": 606, "parallel": 606, "refer": 607, "input": 608, "output": 608, "feather": 608, "ipc": 608, "parquet": 608, "databas": 608, "json": 608, "avro": 608, "excel": 608, "delta": 608, "lake": 608, "dataset": 608, "lazyfram": [610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694], "collect": 614, "explain": 619, "fetch": 621, "from_json": 626, "profil": [647, 997], "show_graph": 657, "sink_ipc": 658, "sink_parquet": 659, "with_context": 673, "lazygroupbi": [676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690], "read": 695, "write": 695, "logic": 695, "plan": 695, "chunk_length": 752, "flag": 827, "get_chunk": 829, "has_valid": 830, "hist": 833, "inner_dtyp": 835, "is_boolean": 838, "is_float": 843, "is_integ": 846, "is_numer": 851, "is_sort": 852, "is_tempor": 853, "is_utf8": 855, "new_from_index": 875, "peak_max": 878, "peak_min": 879, "qcut": 881, "series_equ": 902, "set": 903, "set_at_idx": 904, "time_unit": 965, "to_fram": 968, "to_list": 970, "view": 980, "zip_with": 981, "sql": 996, "method": 996, "assert": 997, "primit": 997, "strategi": 997, "helper": 997, "util": 998}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.ones": [[102, "polars-ones"]], "polars.exceptions.RowsError": [[85, "polars-exceptions-rowserror"]], "polars.read_excel": [[108, "polars-read-excel"]], "polars.from_dataframe": [[92, "polars-from-dataframe"]], "polars.exceptions.PolarsPanicError": [[84, "polars-exceptions-polarspanicerror"]], "polars.concat": [[73, "polars-concat"]], "polars.from_arrow": [[91, "polars-from-arrow"]], "polars.exceptions.DuplicateError": [[80, "polars-exceptions-duplicateerror"]], "polars.exceptions.ShapeError": [[88, "polars-exceptions-shapeerror"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[101, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.read_delta": [[107, "polars-read-delta"]], "polars.scan_csv": [[115, "polars-scan-csv"]], "polars.testing.parametric.columns": [[125, "polars-testing-parametric-columns"]], "polars.testing.parametric.set_profile": [[130, "polars-testing-parametric-set-profile"]], "polars.read_json": [[111, "polars-read-json"]], "polars.DataFrame.bottom_k": [[138, "polars-dataframe-bottom-k"]], "polars.testing.assert_series_equal": [[123, "polars-testing-assert-series-equal"]], "polars.collect_all": [[72, "polars-collect-all"]], "polars.from_dicts": [[94, "polars-from-dicts"]], "polars.testing.assert_frame_equal": [[122, "polars-testing-assert-frame-equal"]], "polars.testing.parametric.series": [[129, "polars-testing-parametric-series"]], "Aggregation": [[135, "aggregation"], [697, "aggregation"], [609, "aggregation"], [261, "aggregation"]], "polars.testing.parametric.column": [[124, "polars-testing-parametric-column"]], "polars.read_csv_batched": [[105, "polars-read-csv-batched"]], "polars.from_pandas": [[96, "polars-from-pandas"]], "polars.time_range": [[132, "polars-time-range"]], "polars.testing.parametric.create_list_strategy": [[126, "polars-testing-parametric-create-list-strategy"]], "polars.exceptions.InvalidOperationError": [[81, "polars-exceptions-invalidoperationerror"]], "polars.from_dict": [[93, "polars-from-dict"]], "polars.exceptions.StructFieldNotFoundError": [[89, "polars-exceptions-structfieldnotfounderror"]], "polars.testing.parametric.load_profile": [[128, "polars-testing-parametric-load-profile"]], "polars.exceptions.NoDataError": [[82, "polars-exceptions-nodataerror"]], "polars.exceptions.ColumnNotFoundError": [[78, "polars-exceptions-columnnotfounderror"]], "polars.threadpool_size": [[131, "polars-threadpool-size"]], "polars.zeros": [[133, "polars-zeros"]], "polars.build_info": [[71, "polars-build-info"]], "polars.read_parquet": [[113, "polars-read-parquet"]], "polars.get_index_type": [[100, "polars-get-index-type"]], "polars.read_database": [[106, "polars-read-database"]], "polars.scan_ndjson": [[118, "polars-scan-ndjson"]], "polars.scan_parquet": [[119, "polars-scan-parquet"]], "polars.cut": [[74, "polars-cut"]], "polars.show_versions": [[121, "polars-show-versions"]], "polars.read_avro": [[103, "polars-read-avro"]], "polars.from_numpy": [[95, "polars-from-numpy"]], "polars.arg_where": [[70, "polars-arg-where"]], "Config": [[134, "config"]], "Config options": [[134, "config-options"]], "Config load, save, and current state": [[134, "config-load-save-and-current-state"]], "Use as a context manager": [[134, "use-as-a-context-manager"]], "polars.DataFrame.apply": [[137, "polars-dataframe-apply"]], "polars.read_parquet_schema": [[114, "polars-read-parquet-schema"]], "polars.exceptions.ComputeError": [[79, "polars-exceptions-computeerror"]], "polars.DataFrame.__dataframe__": [[136, "polars-dataframe-dataframe"]], "polars.from_repr": [[98, "polars-from-repr"]], "polars.read_ipc": [[109, "polars-read-ipc"]], "polars.scan_pyarrow_dataset": [[120, "polars-scan-pyarrow-dataset"]], "polars.exceptions.NoRowsReturnedError": [[83, "polars-exceptions-norowsreturnederror"]], "polars.read_ndjson": [[112, "polars-read-ndjson"]], "polars.exceptions.SchemaFieldNotFoundError": [[87, "polars-exceptions-schemafieldnotfounderror"]], "polars.scan_ipc": [[117, "polars-scan-ipc"]], "polars.get_dummies": [[99, "polars-get-dummies"]], "polars.read_ipc_schema": [[110, "polars-read-ipc-schema"]], "polars.exceptions.SchemaError": [[86, "polars-exceptions-schemaerror"]], "polars.exceptions.TooManyRowsReturnedError": [[90, "polars-exceptions-toomanyrowsreturnederror"]], "polars.testing.parametric.dataframes": [[127, "polars-testing-parametric-dataframes"]], "polars.enable_string_cache": [[76, "polars-enable-string-cache"]], "polars.read_csv": [[104, "polars-read-csv"]], "polars.scan_delta": [[116, "polars-scan-delta"]], "polars.date_range": [[75, "polars-date-range"]], "polars.DataFrame.clear": [[139, "polars-dataframe-clear"]], "polars.from_records": [[97, "polars-from-records"]], "polars.exceptions.ArrowError": [[77, "polars-exceptions-arrowerror"]], "polars.Int64": [[45, "polars-int64"]], "polars.SQLContext.tables": [[54, "polars-sqlcontext-tables"]], "polars.Float64": [[42, "polars-float64"]], "polars.Date": [[37, "polars-date"]], "polars.api.register_expr_namespace": [[67, "polars-api-register-expr-namespace"]], "polars.SQLContext.register_globals": [[52, "polars-sqlcontext-register-globals"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.Int32": [[44, "polars-int32"]], "polars.Struct": [[57, "polars-struct"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.SQLContext.unregister": [[55, "polars-sqlcontext-unregister"]], "polars.api.register_series_namespace": [[69, "polars-api-register-series-namespace"]], "polars.DataFrame.write_ndjson": [[34, "polars-dataframe-write-ndjson"]], "polars.Config.set_tbl_hide_column_data_types": [[19, "polars-config-set-tbl-hide-column-data-types"]], "polars.Object": [[49, "polars-object"]], "polars.SQLContext.register": [[51, "polars-sqlcontext-register"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.DataFrame.write_ipc": [[32, "polars-dataframe-write-ipc"]], "polars.Array": [[2, "polars-array"]], "polars.Config.set_fmt_float": [[11, "polars-config-set-fmt-float"]], "polars.Config.state": [[26, "polars-config-state"]], "polars.Datetime": [[38, "polars-datetime"]], "polars.SQLContext.register_many": [[53, "polars-sqlcontext-register-many"]], "polars.Config.set_verbose": [[25, "polars-config-set-verbose"]], "polars.Decimal": [[39, "polars-decimal"]], "polars.Null": [[48, "polars-null"]], "polars.UInt32": [[60, "polars-uint32"]], "polars.Config.set_tbl_dataframe_shape_below": [[17, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.restore_defaults": [[8, "polars-config-restore-defaults"]], "polars.Unknown": [[63, "polars-unknown"]], "polars.Config.set_tbl_rows": [[23, "polars-config-set-tbl-rows"]], "polars.DataType": [[36, "polars-datatype"]], "polars.DataFrame.write_delta": [[30, "polars-dataframe-write-delta"]], "polars.Utf8": [[64, "polars-utf8"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [997, "examples"]], "polars.Config.set_tbl_formatting": [[18, "polars-config-set-tbl-formatting"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Binary": [[3, "polars-binary"]], "polars.Config.save": [[9, "polars-config-save"]], "polars.DataFrame.write_parquet": [[35, "polars-dataframe-write-parquet"]], "polars.UInt16": [[59, "polars-uint16"]], "polars.UInt8": [[62, "polars-uint8"]], "polars.Config.set_tbl_cols": [[15, "polars-config-set-tbl-cols"]], "polars.Float32": [[41, "polars-float32"]], "polars.Config.set_tbl_cell_alignment": [[14, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_fmt_str_lengths": [[12, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_streaming_chunk_size": [[13, "polars-config-set-streaming-chunk-size"]], "polars.Duration": [[40, "polars-duration"]], "polars.Int8": [[46, "polars-int8"]], "polars.Int16": [[43, "polars-int16"]], "polars.Config.set_tbl_hide_column_names": [[20, "polars-config-set-tbl-hide-column-names"]], "polars.DataFrame.write_database": [[29, "polars-dataframe-write-database"]], "polars.api.register_lazyframe_namespace": [[68, "polars-api-register-lazyframe-namespace"]], "polars.DataFrame.write_json": [[33, "polars-dataframe-write-json"]], "polars.Config.set_tbl_hide_dtype_separator": [[22, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.set_tbl_column_data_type_inline": [[16, "polars-config-set-tbl-column-data-type-inline"]], "polars.DataFrame.write_avro": [[27, "polars-dataframe-write-avro"]], "polars.align_frames": [[65, "polars-align-frames"]], "polars.StringCache": [[56, "polars-stringcache"]], "polars.Time": [[58, "polars-time"]], "polars.Config.set_tbl_hide_dataframe_shape": [[21, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.DataFrame.write_excel": [[31, "polars-dataframe-write-excel"]], "polars.Config.set_tbl_width_chars": [[24, "polars-config-set-tbl-width-chars"]], "polars.DataFrame.write_csv": [[28, "polars-dataframe-write-csv"]], "polars.Config.set_ascii_tables": [[10, "polars-config-set-ascii-tables"]], "polars.List": [[47, "polars-list"]], "polars.api.register_dataframe_namespace": [[66, "polars-api-register-dataframe-namespace"]], "polars.UInt64": [[61, "polars-uint64"]], "polars.SQLContext.execute": [[50, "polars-sqlcontext-execute"]], "polars.Series.str.to_datetime": [[949, "polars-series-str-to-datetime"]], "polars.Series.tail": [[960, "polars-series-tail"]], "polars.Series.str.starts_with": [[945, "polars-series-str-starts-with"]], "polars.Series.str.to_date": [[948, "polars-series-str-to-date"]], "polars.Series.str.strptime": [[947, "polars-series-str-strptime"]], "polars.Series.str.zfill": [[953, "polars-series-str-zfill"]], "polars.Series.str.to_time": [[951, "polars-series-str-to-time"]], "polars.Series.sort": [[917, "polars-series-sort"]], "polars.Series.struct.fields": [[955, "polars-series-struct-fields"]], "polars.Series.str.to_lowercase": [[950, "polars-series-str-to-lowercase"]], "polars.Series.shrink_to_fit": [[910, "polars-series-shrink-to-fit"]], "polars.Series.sinh": [[914, "polars-series-sinh"]], "polars.Series.skew": [[915, "polars-series-skew"]], "polars.Series.time_unit": [[965, "polars-series-time-unit"]], "polars.Series.str.replace": [[937, "polars-series-str-replace"]], "polars.Series.to_frame": [[968, "polars-series-to-frame"]], "polars.Series.std": [[919, "polars-series-std"]], "polars.Series.str.contains": [[922, "polars-series-str-contains"]], "polars.Series.value_counts": [[978, "polars-series-value-counts"]], "polars.Series.unique_counts": [[976, "polars-series-unique-counts"]], "polars.Series.str.ljust": [[933, "polars-series-str-ljust"]], "polars.Series.to_physical": [[973, "polars-series-to-physical"]], "polars.Series.unique": [[975, "polars-series-unique"]], "polars.Series.str.parse_int": [[936, "polars-series-str-parse-int"]], "polars.Series.shuffle": [[911, "polars-series-shuffle"]], "polars.Series.to_dummies": [[967, "polars-series-to-dummies"]], "polars.Series.sum": [[959, "polars-series-sum"]], "polars.Series.to_list": [[970, "polars-series-to-list"]], "polars.Series.to_pandas": [[972, "polars-series-to-pandas"]], "polars.Series.sqrt": [[918, "polars-series-sqrt"]], "polars.Series.str.count_match": [[923, "polars-series-str-count-match"]], "polars.Series.str.encode": [[925, "polars-series-str-encode"]], "polars.Series.str.to_uppercase": [[952, "polars-series-str-to-uppercase"]], "polars.Series.struct.schema": [[957, "polars-series-struct-schema"]], "polars.Series.tan": [[963, "polars-series-tan"]], "polars.Series.str.slice": [[941, "polars-series-str-slice"]], "polars.Series.slice": [[916, "polars-series-slice"]], "polars.Series.take": [[961, "polars-series-take"]], "polars.Series.take_every": [[962, "polars-series-take-every"]], "polars.Series.tanh": [[964, "polars-series-tanh"]], "polars.Series.upper_bound": [[977, "polars-series-upper-bound"]], "polars.Series.to_init_repr": [[969, "polars-series-to-init-repr"]], "polars.Series.struct.unnest": [[958, "polars-series-struct-unnest"]], "polars.Series.str.splitn": [[944, "polars-series-str-splitn"]], "polars.Series.str.extract_all": [[929, "polars-series-str-extract-all"]], "polars.Series.str.strip": [[946, "polars-series-str-strip"]], "polars.Series.to_arrow": [[966, "polars-series-to-arrow"]], "polars.Series.struct.rename_fields": [[956, "polars-series-struct-rename-fields"]], "polars.Series.var": [[979, "polars-series-var"]], "polars.Series.str.replace_all": [[938, "polars-series-str-replace-all"]], "polars.Series.str.ends_with": [[926, "polars-series-str-ends-with"]], "polars.Series.struct.field": [[954, "polars-series-struct-field"]], "polars.Series.to_numpy": [[971, "polars-series-to-numpy"]], "polars.Series.top_k": [[974, "polars-series-top-k"]], "polars.Series.str.json_path_match": [[931, "polars-series-str-json-path-match"]], "polars.Series.str.n_chars": [[935, "polars-series-str-n-chars"]], "polars.Series.str.extract": [[928, "polars-series-str-extract"]], "polars.Series.str.lengths": [[932, "polars-series-str-lengths"]], "polars.Series.str.rjust": [[939, "polars-series-str-rjust"]], "polars.Series.str.rstrip": [[940, "polars-series-str-rstrip"]], "polars.Series.str.concat": [[921, "polars-series-str-concat"]], "polars.Series.str": [[920, "polars-series-str"]], "polars.Series.str.json_extract": [[930, "polars-series-str-json-extract"]], "polars.Series.sign": [[912, "polars-series-sign"]], "polars.Series.str.split": [[942, "polars-series-str-split"]], "polars.Series.str.lstrip": [[934, "polars-series-str-lstrip"]], "polars.Series.str.decode": [[924, "polars-series-str-decode"]], "polars.Series.str.split_exact": [[943, "polars-series-str-split-exact"]], "polars.Series.str.explode": [[927, "polars-series-str-explode"]], "polars.Series.sin": [[913, "polars-series-sin"]], "polars.Series.is_finite": [[841, "polars-series-is-finite"]], "polars.Series.len": [[858, "polars-series-len"]], "polars.Series.nan_max": [[873, "polars-series-nan-max"]], "polars.Series.nan_min": [[874, "polars-series-nan-min"]], "polars.Series.quantile": [[882, "polars-series-quantile"]], "polars.Series.kurtosis": [[857, "polars-series-kurtosis"]], "polars.Series.peak_min": [[879, "polars-series-peak-min"]], "polars.Series.series_equal": [[902, "polars-series-series-equal"]], "polars.Series.is_infinite": [[845, "polars-series-is-infinite"]], "polars.Series.shift": [[907, "polars-series-shift"]], "polars.Series.rank": [[883, "polars-series-rank"]], "polars.Series.rolling_apply": [[889, "polars-series-rolling-apply"]], "polars.Series.set_sorted": [[905, "polars-series-set-sorted"]], "polars.Series.rolling_skew": [[895, "polars-series-rolling-skew"]], "polars.Series.is_in": [[844, "polars-series-is-in"]], "polars.Series.is_numeric": [[851, "polars-series-is-numeric"]], "polars.Series.is_temporal": [[853, "polars-series-is-temporal"]], "polars.Series.pct_change": [[877, "polars-series-pct-change"]], "polars.Series.qcut": [[881, "polars-series-qcut"]], "polars.Series.rolling_std": [[896, "polars-series-rolling-std"]], "polars.Series.is_nan": [[847, "polars-series-is-nan"]], "polars.Series.median": [[867, "polars-series-median"]], "polars.Series.mean": [[866, "polars-series-mean"]], "polars.Series.is_sorted": [[852, "polars-series-is-sorted"]], "polars.Series.shift_and_fill": [[908, "polars-series-shift-and-fill"]], "polars.Series.is_utf8": [[855, "polars-series-is-utf8"]], "polars.Series.n_unique": [[871, "polars-series-n-unique"]], "polars.Series.rolling_mean": [[891, "polars-series-rolling-mean"]], "polars.Series.set": [[903, "polars-series-set"]], "polars.Series.sample": [[900, "polars-series-sample"]], "polars.Series.reshape": [[887, "polars-series-reshape"]], "polars.Series.rename": [[886, "polars-series-rename"]], "polars.Series.log": [[860, "polars-series-log"]], "polars.Series.is_unique": [[854, "polars-series-is-unique"]], "polars.Series.map_dict": [[864, "polars-series-map-dict"]], "polars.Series.peak_max": [[878, "polars-series-peak-max"]], "polars.Series.product": [[880, "polars-series-product"]], "polars.Series.reverse": [[888, "polars-series-reverse"]], "polars.Series.set_at_idx": [[904, "polars-series-set-at-idx"]], "polars.Series.lower_bound": [[863, "polars-series-lower-bound"]], "polars.Series.rechunk": [[884, "polars-series-rechunk"]], "polars.Series.mode": [[869, "polars-series-mode"]], "polars.Series.is_empty": [[840, "polars-series-is-empty"]], "polars.Series.null_count": [[876, "polars-series-null-count"]], "polars.Series.max": [[865, "polars-series-max"]], "polars.Series.rolling_var": [[898, "polars-series-rolling-var"]], "polars.Series.limit": [[859, "polars-series-limit"]], "polars.Series.rolling_max": [[890, "polars-series-rolling-max"]], "polars.Series.is_null": [[850, "polars-series-is-null"]], "polars.Series.is_not_nan": [[848, "polars-series-is-not-nan"]], "polars.Series.reinterpret": [[885, "polars-series-reinterpret"]], "polars.Series.log1p": [[862, "polars-series-log1p"]], "polars.Series.name": [[872, "polars-series-name"]], "polars.Series.item": [[856, "polars-series-item"]], "polars.Series.round": [[899, "polars-series-round"]], "polars.Series.rolling_median": [[892, "polars-series-rolling-median"]], "polars.Series.new_from_index": [[875, "polars-series-new-from-index"]], "polars.Series.search_sorted": [[901, "polars-series-search-sorted"]], "polars.Series.shape": [[906, "polars-series-shape"]], "polars.Series.is_not_null": [[849, "polars-series-is-not-null"]], "polars.Series.n_chunks": [[870, "polars-series-n-chunks"]], "polars.Series.min": [[868, "polars-series-min"]], "polars.Series.rolling_sum": [[897, "polars-series-rolling-sum"]], "polars.Series.is_first": [[842, "polars-series-is-first"]], "polars.Series.rolling_quantile": [[894, "polars-series-rolling-quantile"]], "polars.Series.is_float": [[843, "polars-series-is-float"]], "polars.Series.log10": [[861, "polars-series-log10"]], "polars.Series.shrink_dtype": [[909, "polars-series-shrink-dtype"]], "polars.Series.rolling_min": [[893, "polars-series-rolling-min"]], "polars.Series.is_integer": [[846, "polars-series-is-integer"]], "polars.Series.hash": [[831, "polars-series-hash"]], "polars.Series.dt.microseconds": [[788, "polars-series-dt-microseconds"]], "polars.Series.dt.hours": [[781, "polars-series-dt-hours"]], "polars.Series.dt.weekday": [[812, "polars-series-dt-weekday"]], "polars.Series.entropy": [[816, "polars-series-entropy"]], "polars.Series.dt.week": [[811, "polars-series-dt-week"]], "polars.Series.dt.with_time_unit": [[813, "polars-series-dt-with-time-unit"]], "polars.Series.dt.min": [[791, "polars-series-dt-min"]], "polars.Series.dt.second": [[804, "polars-series-dt-second"]], "polars.Series.has_validity": [[830, "polars-series-has-validity"]], "polars.Series.fill_nan": [[824, "polars-series-fill-nan"]], "polars.Series.floor": [[828, "polars-series-floor"]], "polars.Series.dt.nanoseconds": [[798, "polars-series-dt-nanoseconds"]], "polars.Series.dt.datetime": [[776, "polars-series-dt-datetime"]], "polars.Series.dt.max": [[784, "polars-series-dt-max"]], "polars.Series.dt.month_end": [[795, "polars-series-dt-month-end"]], "polars.Series.dt.seconds": [[805, "polars-series-dt-seconds"]], "polars.Series.filter": [[826, "polars-series-filter"]], "polars.Series.dt.microsecond": [[787, "polars-series-dt-microsecond"]], "polars.Series.head": [[832, "polars-series-head"]], "polars.Series.dt.quarter": [[801, "polars-series-dt-quarter"]], "polars.Series.ewm_mean": [[818, "polars-series-ewm-mean"]], "polars.Series.dt.date": [[775, "polars-series-dt-date"]], "polars.Series.drop_nulls": [[770, "polars-series-drop-nulls"]], "polars.Series.dt.cast_time_unit": [[772, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.epoch": [[779, "polars-series-dt-epoch"]], "polars.Series.exp": [[821, "polars-series-exp"]], "polars.Series.dt.round": [[803, "polars-series-dt-round"]], "polars.Series.dt.days": [[778, "polars-series-dt-days"]], "polars.Series.ewm_std": [[819, "polars-series-ewm-std"]], "polars.Series.is_boolean": [[838, "polars-series-is-boolean"]], "polars.Series.dt.offset_by": [[799, "polars-series-dt-offset-by"]], "polars.Series.get_chunks": [[829, "polars-series-get-chunks"]], "polars.Series.dt.convert_time_zone": [[774, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.replace_time_zone": [[802, "polars-series-dt-replace-time-zone"]], "polars.Series.flags": [[827, "polars-series-flags"]], "polars.Series.dt.combine": [[773, "polars-series-dt-combine"]], "polars.Series.ewm_var": [[820, "polars-series-ewm-var"]], "polars.Series.dt.is_leap_year": [[782, "polars-series-dt-is-leap-year"]], "polars.Series.fill_null": [[825, "polars-series-fill-null"]], "polars.Series.dt.strftime": [[806, "polars-series-dt-strftime"]], "polars.Series.dt.timestamp": [[808, "polars-series-dt-timestamp"]], "polars.Series.dt.truncate": [[810, "polars-series-dt-truncate"]], "polars.Series.estimated_size": [[817, "polars-series-estimated-size"]], "polars.Series.dt.median": [[786, "polars-series-dt-median"]], "polars.Series.interpolate": [[836, "polars-series-interpolate"]], "polars.Series.explode": [[822, "polars-series-explode"]], "polars.Series.dt.month": [[794, "polars-series-dt-month"]], "polars.Series.dt.nanosecond": [[797, "polars-series-dt-nanosecond"]], "polars.Series.is_duplicated": [[839, "polars-series-is-duplicated"]], "polars.Series.dt.month_start": [[796, "polars-series-dt-month-start"]], "polars.Series.dt.millisecond": [[789, "polars-series-dt-millisecond"]], "polars.Series.extend_constant": [[823, "polars-series-extend-constant"]], "polars.Series.hist": [[833, "polars-series-hist"]], "polars.Series.dt.hour": [[780, "polars-series-dt-hour"]], "polars.Series.dt.year": [[814, "polars-series-dt-year"]], "polars.Series.dt.iso_year": [[783, "polars-series-dt-iso-year"]], "polars.Series.dt.mean": [[785, "polars-series-dt-mean"]], "polars.Series.dt.day": [[777, "polars-series-dt-day"]], "polars.Series.dt.minutes": [[793, "polars-series-dt-minutes"]], "polars.Series.implode": [[834, "polars-series-implode"]], "polars.Series.dt.time": [[807, "polars-series-dt-time"]], "polars.Series.dt.ordinal_day": [[800, "polars-series-dt-ordinal-day"]], "polars.Series.dt": [[771, "polars-series-dt"]], "polars.Series.is_between": [[837, "polars-series-is-between"]], "polars.Series.dt.minute": [[792, "polars-series-dt-minute"]], "polars.Series.dtype": [[815, "polars-series-dtype"]], "polars.Series.inner_dtype": [[835, "polars-series-inner-dtype"]], "polars.Series.dt.to_string": [[809, "polars-series-dt-to-string"]], "polars.Series.dt.milliseconds": [[790, "polars-series-dt-milliseconds"]], "polars.Series.bin.decode": [[743, "polars-series-bin-decode"]], "polars.Series.arctan": [[708, "polars-series-arctan"]], "polars.Series.arr.contains": [[719, "polars-series-arr-contains"]], "polars.Series.cumsum": [[763, "polars-series-cumsum"]], "polars.Series.arr.lengths": [[729, "polars-series-arr-lengths"]], "polars.Series.describe": [[766, "polars-series-describe"]], "polars.Series.arg_true": [[713, "polars-series-arg-true"]], "polars.Series.arr.shift": [[734, "polars-series-arr-shift"]], "polars.Series.arr.to_struct": [[740, "polars-series-arr-to-struct"]], "polars.Series.arr.take": [[739, "polars-series-arr-take"]], "polars.Series.arr.first": [[724, "polars-series-arr-first"]], "polars.Series.arg_min": [[711, "polars-series-arg-min"]], "polars.Series.arr.slice": [[735, "polars-series-arr-slice"]], "polars.Series.cast": [[748, "polars-series-cast"]], "polars.Series.cat.set_ordering": [[750, "polars-series-cat-set-ordering"]], "polars.Series.chunk_lengths": [[752, "polars-series-chunk-lengths"]], "polars.Series.bin.starts_with": [[746, "polars-series-bin-starts-with"]], "polars.Series.cumulative_eval": [[764, "polars-series-cumulative-eval"]], "polars.Series.arr.eval": [[722, "polars-series-arr-eval"]], "polars.Series.apply": [[703, "polars-series-apply"]], "polars.Series.arr.tail": [[738, "polars-series-arr-tail"]], "polars.Series.bottom_k": [[747, "polars-series-bottom-k"]], "polars.Series.clip": [[754, "polars-series-clip"]], "polars.Series.cummin": [[761, "polars-series-cummin"]], "polars.Series.bin.encode": [[744, "polars-series-bin-encode"]], "polars.Series.arg_max": [[710, "polars-series-arg-max"]], "polars.Series.any": [[701, "polars-series-any"]], "polars.Series.arr.get": [[725, "polars-series-arr-get"]], "polars.Series.cat": [[749, "polars-series-cat"]], "polars.Series.drop_nans": [[769, "polars-series-drop-nans"]], "polars.Series.arg_unique": [[714, "polars-series-arg-unique"]], "polars.Series.arctanh": [[709, "polars-series-arctanh"]], "polars.Series.arr.mean": [[731, "polars-series-arr-mean"]], "polars.Series.arr.unique": [[741, "polars-series-arr-unique"]], "polars.Series.bin.contains": [[742, "polars-series-bin-contains"]], "polars.Series.arr": [[715, "polars-series-arr"]], "polars.Series.arg_sort": [[712, "polars-series-arg-sort"]], "polars.Series.arr.max": [[730, "polars-series-arr-max"]], "polars.Series.clip_max": [[755, "polars-series-clip-max"]], "polars.Series.arr.join": [[727, "polars-series-arr-join"]], "polars.Series.dot": [[768, "polars-series-dot"]], "polars.Series.cut": [[765, "polars-series-cut"]], "polars.Series.arr.diff": [[721, "polars-series-arr-diff"]], "polars.Series.arr.sort": [[736, "polars-series-arr-sort"]], "polars.Series.arr.min": [[732, "polars-series-arr-min"]], "polars.Series.ceil": [[751, "polars-series-ceil"]], "polars.Series.arr.arg_max": [[716, "polars-series-arr-arg-max"]], "polars.Series.append": [[702, "polars-series-append"]], "polars.Series.arr.last": [[728, "polars-series-arr-last"]], "polars.Series.clip_min": [[756, "polars-series-clip-min"]], "polars.Series.diff": [[767, "polars-series-diff"]], "polars.Series.arcsinh": [[707, "polars-series-arcsinh"]], "polars.Series.clear": [[753, "polars-series-clear"]], "polars.Series.arr.head": [[726, "polars-series-arr-head"]], "polars.Series.bin.ends_with": [[745, "polars-series-bin-ends-with"]], "polars.Series.cummax": [[760, "polars-series-cummax"]], "polars.Series.arr.reverse": [[733, "polars-series-arr-reverse"]], "polars.Series.arr.sum": [[737, "polars-series-arr-sum"]], "polars.Series.arr.explode": [[723, "polars-series-arr-explode"]], "polars.Series.clone": [[757, "polars-series-clone"]], "polars.Series.arr.count_match": [[720, "polars-series-arr-count-match"]], "polars.Series.cumprod": [[762, "polars-series-cumprod"]], "polars.Series.all": [[700, "polars-series-all"]], "polars.Series.arccosh": [[705, "polars-series-arccosh"]], "polars.Series.arcsin": [[706, "polars-series-arcsin"]], "polars.Series.arccos": [[704, "polars-series-arccos"]], "polars.Series.arr.concat": [[718, "polars-series-arr-concat"]], "polars.Series.arr.arg_min": [[717, "polars-series-arr-arg-min"]], "polars.Series.cosh": [[759, "polars-series-cosh"]], "polars.Series.cos": [[758, "polars-series-cos"]], "polars.Series.view": [[980, "polars-series-view"]], "Boolean": [[984, "boolean"], [591, "boolean"]], "Utils": [[998, "utils"]], "Miscellaneous": [[991, "miscellaneous"], [695, "miscellaneous"], [606, "miscellaneous"], [599, "miscellaneous"], [257, "miscellaneous"]], "Temporal": [[995, "temporal"], [604, "temporal"], [259, "temporal"]], "SQL": [[996, "sql"]], "Methods": [[996, "methods"]], "Series": [[989, "series"]], "Manipulation/selection": [[992, "manipulation-selection"], [696, "manipulation-selection"], [600, "manipulation-selection"], [258, "manipulation-selection"]], "String": [[993, "string"], [602, "string"]], "Attributes": [[982, "attributes"], [691, "attributes"], [251, "attributes"]], "polars.Series.zip_with": [[981, "polars-series-zip-with"]], "Descriptive": [[987, "descriptive"], [692, "descriptive"], [253, "descriptive"]], "Computation": [[986, "computation"], [594, "computation"], [252, "computation"]], "Categories": [[985, "categories"], [592, "categories"]], "Testing": [[997, "testing"]], "Asserts": [[997, "asserts"]], "Parametric testing": [[997, "parametric-testing"]], "Polars primitives": [[997, "polars-primitives"]], "Strategy helpers": [[997, "strategy-helpers"]], "Profiles": [[997, "profiles"]], "Binary": [[983, "binary"], [601, "binary"], [590, "binary"]], "Export": [[988, "export"], [254, "export"]], "Struct": [[994, "struct"], [603, "struct"]], "List": [[990, "list"], [597, "list"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[681, "polars-lazyframe-groupby-lazygroupby-head"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[688, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.LazyFrame.take_every": [[665, "polars-lazyframe-take-every"]], "polars.LazyFrame.shift_and_fill": [[656, "polars-lazyframe-shift-and-fill"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[686, "polars-lazyframe-groupby-lazygroupby-min"]], "polars.LazyFrame.var": [[670, "polars-lazyframe-var"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[679, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.LazyFrame.unique": [[667, "polars-lazyframe-unique"]], "polars.LazyFrame.limit": [[637, "polars-lazyframe-limit"]], "polars.LazyFrame.min": [[644, "polars-lazyframe-min"]], "polars.LazyFrame.max": [[639, "polars-lazyframe-max"]], "polars.LazyFrame.lazy": [[636, "polars-lazyframe-lazy"]], "polars.LazyFrame.inspect": [[631, "polars-lazyframe-inspect"]], "polars.LazyFrame.rename": [[650, "polars-lazyframe-rename"]], "polars.LazyFrame.std": [[662, "polars-lazyframe-std"]], "polars.LazyFrame.profile": [[647, "polars-lazyframe-profile"]], "polars.LazyFrame.select": [[653, "polars-lazyframe-select"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[690, "polars-lazyframe-groupby-lazygroupby-tail"]], "polars.LazyFrame.merge_sorted": [[643, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.sink_parquet": [[659, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.melt": [[642, "polars-lazyframe-melt"]], "polars.Series.alias": [[699, "polars-series-alias"]], "polars.LazyFrame.unnest": [[668, "polars-lazyframe-unnest"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[676, "polars-lazyframe-groupby-lazygroupby-agg"]], "polars.LazyFrame.null_count": [[645, "polars-lazyframe-null-count"]], "polars.LazyFrame.update": [[669, "polars-lazyframe-update"]], "polars.LazyFrame.write_json": [[675, "polars-lazyframe-write-json"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[678, "polars-lazyframe-groupby-lazygroupby-apply"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[682, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.Series.abs": [[698, "polars-series-abs"]], "polars.LazyFrame.quantile": [[648, "polars-lazyframe-quantile"]], "polars.LazyFrame.sum": [[663, "polars-lazyframe-sum"]], "polars.LazyFrame.tail": [[664, "polars-lazyframe-tail"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[687, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.LazyFrame.pipe": [[646, "polars-lazyframe-pipe"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[683, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.LazyFrame.show_graph": [[657, "polars-lazyframe-show-graph"]], "polars.LazyFrame.with_columns": [[672, "polars-lazyframe-with-columns"]], "polars.LazyFrame.with_row_count": [[674, "polars-lazyframe-with-row-count"]], "LazyFrame": [[694, "lazyframe"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[689, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.LazyFrame.interpolate": [[632, "polars-lazyframe-interpolate"]], "polars.LazyFrame.sort": [[661, "polars-lazyframe-sort"]], "polars.LazyFrame.last": [[635, "polars-lazyframe-last"]], "polars.LazyFrame.map": [[638, "polars-lazyframe-map"]], "polars.LazyFrame.head": [[630, "polars-lazyframe-head"]], "polars.LazyFrame.mean": [[640, "polars-lazyframe-mean"]], "polars.LazyFrame.join": [[633, "polars-lazyframe-join"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[680, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.LazyFrame.reverse": [[651, "polars-lazyframe-reverse"]], "Read/write logical plan": [[695, "read-write-logical-plan"]], "polars.LazyFrame.width": [[671, "polars-lazyframe-width"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[684, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[685, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.LazyFrame.with_context": [[673, "polars-lazyframe-with-context"]], "polars.LazyFrame.slice": [[660, "polars-lazyframe-slice"]], "GroupBy": [[693, "groupby"], [255, "groupby"]], "polars.LazyFrame.shift": [[655, "polars-lazyframe-shift"]], "polars.LazyFrame.top_k": [[666, "polars-lazyframe-top-k"]], "polars.LazyFrame.schema": [[652, "polars-lazyframe-schema"]], "polars.LazyFrame.sink_ipc": [[658, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.join_asof": [[634, "polars-lazyframe-join-asof"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[677, "polars-lazyframe-groupby-lazygroupby-all"]], "polars.LazyFrame.median": [[641, "polars-lazyframe-median"]], "polars.LazyFrame.set_sorted": [[654, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.read_json": [[649, "polars-lazyframe-read-json"]], "polars.col": [[547, "polars-col"]], "polars.Expr.str.to_lowercase": [[515, "polars-expr-str-to-lowercase"]], "polars.coalesce": [[546, "polars-coalesce"]], "polars.Expr.take": [[525, "polars-expr-take"]], "polars.cumsum": [[555, "polars-cumsum"]], "polars.date": [[556, "polars-date"]], "polars.Expr.str.extract_all": [[494, "polars-expr-str-extract-all"]], "polars.Expr.str.encode": [[490, "polars-expr-str-encode"]], "polars.cumfold": [[553, "polars-cumfold"]], "polars.Expr.str.rstrip": [[505, "polars-expr-str-rstrip"]], "polars.Expr.str.json_extract": [[495, "polars-expr-str-json-extract"]], "polars.Expr.str.strptime": [[512, "polars-expr-str-strptime"]], "polars.Expr.struct.rename_fields": [[520, "polars-expr-struct-rename-fields"]], "polars.concat_list": [[548, "polars-concat-list"]], "polars.Expr.str.split_exact": [[508, "polars-expr-str-split-exact"]], "polars.Expr.str.split": [[507, "polars-expr-str-split"]], "polars.Expr.str.slice": [[506, "polars-expr-str-slice"]], "polars.Expr.value_counts": [[535, "polars-expr-value-counts"]], "polars.Expr.str.rjust": [[504, "polars-expr-str-rjust"]], "polars.Expr.unique_counts": [[533, "polars-expr-unique-counts"]], "polars.Expr.str.replace_all": [[503, "polars-expr-str-replace-all"]], "polars.cov": [[552, "polars-cov"]], "polars.approx_unique": [[542, "polars-approx-unique"]], "polars.Expr.top_k": [[530, "polars-expr-top-k"]], "polars.Expr.truediv": [[531, "polars-expr-truediv"]], "polars.Expr.str.lengths": [[497, "polars-expr-str-lengths"]], "polars.Expr.str.ljust": [[498, "polars-expr-str-ljust"]], "polars.Expr.take_every": [[526, "polars-expr-take-every"]], "polars.Expr.str.to_time": [[516, "polars-expr-str-to-time"]], "polars.Expr.sub": [[521, "polars-expr-sub"]], "polars.any": [[540, "polars-any"]], "polars.Expr.str.n_chars": [[500, "polars-expr-str-n-chars"]], "polars.Expr.struct.field": [[519, "polars-expr-struct-field"]], "polars.Expr.where": [[537, "polars-expr-where"]], "polars.Expr.str.extract": [[493, "polars-expr-str-extract"]], "polars.Expr.tail": [[524, "polars-expr-tail"]], "polars.element": [[559, "polars-element"]], "polars.Expr.str.lstrip": [[499, "polars-expr-str-lstrip"]], "polars.Expr.suffix": [[522, "polars-expr-suffix"]], "polars.Expr.xor": [[538, "polars-expr-xor"]], "polars.corr": [[550, "polars-corr"]], "polars.Expr.str.to_date": [[513, "polars-expr-str-to-date"]], "polars.Expr.str.ends_with": [[491, "polars-expr-str-ends-with"]], "polars.Expr.str.splitn": [[509, "polars-expr-str-splitn"]], "polars.Expr.var": [[536, "polars-expr-var"]], "polars.Expr.unique": [[532, "polars-expr-unique"]], "polars.avg": [[545, "polars-avg"]], "polars.apply": [[541, "polars-apply"]], "polars.Expr.tanh": [[528, "polars-expr-tanh"]], "polars.arange": [[543, "polars-arange"]], "polars.Expr.tan": [[527, "polars-expr-tan"]], "polars.Expr.str.parse_int": [[501, "polars-expr-str-parse-int"]], "polars.Expr.str.replace": [[502, "polars-expr-str-replace"]], "polars.Expr.str.to_datetime": [[514, "polars-expr-str-to-datetime"]], "polars.all": [[539, "polars-all"]], "polars.arg_sort_by": [[544, "polars-arg-sort-by"]], "polars.Expr.str.starts_with": [[510, "polars-expr-str-starts-with"]], "polars.Expr.str.explode": [[492, "polars-expr-str-explode"]], "polars.concat_str": [[549, "polars-concat-str"]], "polars.cumreduce": [[554, "polars-cumreduce"]], "polars.Expr.to_physical": [[529, "polars-expr-to-physical"]], "polars.Expr.str.zfill": [[518, "polars-expr-str-zfill"]], "polars.Expr.upper_bound": [[534, "polars-expr-upper-bound"]], "polars.Expr.sum": [[523, "polars-expr-sum"]], "polars.duration": [[558, "polars-duration"]], "polars.Expr.str.to_uppercase": [[517, "polars-expr-str-to-uppercase"]], "polars.Expr.str.json_path_match": [[496, "polars-expr-str-json-path-match"]], "polars.count": [[551, "polars-count"]], "polars.Expr.str.strip": [[511, "polars-expr-str-strip"]], "polars.datetime": [[557, "polars-datetime"]], "polars.Expr.or_": [[445, "polars-expr-or"]], "polars.Expr.over": [[446, "polars-expr-over"]], "polars.Expr.str.contains": [[487, "polars-expr-str-contains"]], "polars.Expr.sign": [[477, "polars-expr-sign"]], "polars.Expr.mul": [[439, "polars-expr-mul"]], "polars.Expr.prefix": [[450, "polars-expr-prefix"]], "polars.Expr.meta.is_regex_projection": [[430, "polars-expr-meta-is-regex-projection"]], "polars.Expr.round": [[469, "polars-expr-round"]], "polars.Expr.sort_by": [[483, "polars-expr-sort-by"]], "polars.Expr.quantile": [[452, "polars-expr-quantile"]], "polars.Expr.rolling_min": [[463, "polars-expr-rolling-min"]], "polars.Expr.skew": [[480, "polars-expr-skew"]], "polars.Expr.reinterpret": [[455, "polars-expr-reinterpret"]], "polars.Expr.ne": [[443, "polars-expr-ne"]], "polars.Expr.rolling_apply": [[459, "polars-expr-rolling-apply"]], "polars.Expr.meta.undo_aliases": [[435, "polars-expr-meta-undo-aliases"]], "polars.Expr.null_count": [[444, "polars-expr-null-count"]], "polars.Expr.rolling_var": [[468, "polars-expr-rolling-var"]], "polars.Expr.repeat_by": [[456, "polars-expr-repeat-by"]], "polars.Expr.min": [[436, "polars-expr-min"]], "polars.Expr.shift_and_fill": [[474, "polars-expr-shift-and-fill"]], "polars.Expr.nan_max": [[441, "polars-expr-nan-max"]], "polars.Expr.pct_change": [[447, "polars-expr-pct-change"]], "polars.Expr.sort": [[482, "polars-expr-sort"]], "polars.Expr.set_sorted": [[472, "polars-expr-set-sorted"]], "polars.Expr.meta.eq": [[428, "polars-expr-meta-eq"]], "polars.Expr.rolling_skew": [[465, "polars-expr-rolling-skew"]], "polars.Expr.sample": [[470, "polars-expr-sample"]], "polars.Expr.str.decode": [[489, "polars-expr-str-decode"]], "polars.Expr.str.concat": [[486, "polars-expr-str-concat"]], "polars.Expr.pow": [[449, "polars-expr-pow"]], "polars.Expr.sqrt": [[484, "polars-expr-sqrt"]], "polars.Expr.rolling_max": [[460, "polars-expr-rolling-max"]], "polars.Expr.reshape": [[457, "polars-expr-reshape"]], "polars.Expr.rank": [[453, "polars-expr-rank"]], "polars.Expr.mean": [[426, "polars-expr-mean"]], "polars.Expr.shift": [[473, "polars-expr-shift"]], "polars.Expr.std": [[485, "polars-expr-std"]], "polars.Expr.meta.has_multiple_outputs": [[429, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.meta.output_name": [[432, "polars-expr-meta-output-name"]], "polars.Expr.shuffle": [[476, "polars-expr-shuffle"]], "polars.Expr.mod": [[437, "polars-expr-mod"]], "polars.Expr.lt": [[421, "polars-expr-lt"]], "polars.Expr.rechunk": [[454, "polars-expr-rechunk"]], "polars.Expr.rolling_mean": [[461, "polars-expr-rolling-mean"]], "polars.Expr.meta.ne": [[431, "polars-expr-meta-ne"]], "polars.Expr.n_unique": [[440, "polars-expr-n-unique"]], "polars.Expr.rolling_sum": [[467, "polars-expr-rolling-sum"]], "polars.Expr.str.count_match": [[488, "polars-expr-str-count-match"]], "polars.Expr.sin": [[478, "polars-expr-sin"]], "polars.Expr.shrink_dtype": [[475, "polars-expr-shrink-dtype"]], "polars.Expr.map_dict": [[424, "polars-expr-map-dict"]], "polars.Expr.lower_bound": [[420, "polars-expr-lower-bound"]], "polars.Expr.slice": [[481, "polars-expr-slice"]], "polars.Expr.map_alias": [[423, "polars-expr-map-alias"]], "polars.Expr.meta.pop": [[433, "polars-expr-meta-pop"]], "polars.Expr.meta.root_names": [[434, "polars-expr-meta-root-names"]], "polars.Expr.reverse": [[458, "polars-expr-reverse"]], "polars.Expr.rolling_median": [[462, "polars-expr-rolling-median"]], "polars.Expr.sinh": [[479, "polars-expr-sinh"]], "polars.Expr.rolling_std": [[466, "polars-expr-rolling-std"]], "polars.Expr.pipe": [[448, "polars-expr-pipe"]], "polars.Expr.max": [[425, "polars-expr-max"]], "polars.Expr.nan_min": [[442, "polars-expr-nan-min"]], "polars.Expr.product": [[451, "polars-expr-product"]], "polars.Expr.search_sorted": [[471, "polars-expr-search-sorted"]], "polars.Expr.rolling_quantile": [[464, "polars-expr-rolling-quantile"]], "polars.Expr.median": [[427, "polars-expr-median"]], "polars.Expr.map": [[422, "polars-expr-map"]], "polars.Expr.mode": [[438, "polars-expr-mode"]], "polars.Expr.dt.minute": [[352, "polars-expr-dt-minute"]], "polars.Expr.dt.seconds": [[365, "polars-expr-dt-seconds"]], "polars.Expr.interpolate": [[398, "polars-expr-interpolate"]], "polars.Expr.is_not_nan": [[407, "polars-expr-is-not-nan"]], "polars.Expr.limit": [[416, "polars-expr-limit"]], "polars.Expr.dt.millisecond": [[350, "polars-expr-dt-millisecond"]], "polars.Expr.dt.time": [[367, "polars-expr-dt-time"]], "polars.Expr.dt.milliseconds": [[351, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.weekday": [[372, "polars-expr-dt-weekday"]], "polars.Expr.is_finite": [[401, "polars-expr-is-finite"]], "polars.Expr.floordiv": [[390, "polars-expr-floordiv"]], "polars.Expr.log10": [[418, "polars-expr-log10"]], "polars.Expr.implode": [[396, "polars-expr-implode"]], "polars.Expr.dt.minutes": [[353, "polars-expr-dt-minutes"]], "polars.Expr.fill_null": [[385, "polars-expr-fill-null"]], "polars.Expr.dt.second": [[364, "polars-expr-dt-second"]], "polars.Expr.first": [[387, "polars-expr-first"]], "polars.Expr.last": [[413, "polars-expr-last"]], "polars.Expr.is_not_null": [[408, "polars-expr-is-not-null"]], "polars.Expr.dt.nanoseconds": [[358, "polars-expr-dt-nanoseconds"]], "polars.Expr.exp": [[381, "polars-expr-exp"]], "polars.Expr.is_unique": [[410, "polars-expr-is-unique"]], "polars.Expr.exclude": [[380, "polars-expr-exclude"]], "polars.Expr.is_between": [[399, "polars-expr-is-between"]], "polars.Expr.is_null": [[409, "polars-expr-is-null"]], "polars.Expr.extend_constant": [[383, "polars-expr-extend-constant"]], "polars.Expr.is_not": [[406, "polars-expr-is-not"]], "polars.Expr.dt.timestamp": [[368, "polars-expr-dt-timestamp"]], "polars.Expr.dt.truncate": [[370, "polars-expr-dt-truncate"]], "polars.Expr.dt.ordinal_day": [[360, "polars-expr-dt-ordinal-day"]], "polars.Expr.fill_nan": [[384, "polars-expr-fill-nan"]], "polars.Expr.flatten": [[388, "polars-expr-flatten"]], "polars.Expr.is_duplicated": [[400, "polars-expr-is-duplicated"]], "polars.Expr.is_nan": [[405, "polars-expr-is-nan"]], "polars.Expr.is_first": [[402, "polars-expr-is-first"]], "polars.Expr.keep_name": [[411, "polars-expr-keep-name"]], "polars.Expr.log1p": [[419, "polars-expr-log1p"]], "polars.Expr.entropy": [[375, "polars-expr-entropy"]], "polars.Expr.ewm_mean": [[377, "polars-expr-ewm-mean"]], "polars.Expr.log": [[417, "polars-expr-log"]], "polars.Expr.head": [[395, "polars-expr-head"]], "polars.Expr.dt.week": [[371, "polars-expr-dt-week"]], "polars.Expr.dt.strftime": [[366, "polars-expr-dt-strftime"]], "polars.Expr.ewm_var": [[379, "polars-expr-ewm-var"]], "polars.Expr.is_in": [[403, "polars-expr-is-in"]], "polars.Expr.dt.to_string": [[369, "polars-expr-dt-to-string"]], "polars.Expr.kurtosis": [[412, "polars-expr-kurtosis"]], "polars.Expr.explode": [[382, "polars-expr-explode"]], "polars.Expr.len": [[415, "polars-expr-len"]], "polars.Expr.hash": [[394, "polars-expr-hash"]], "polars.Expr.dt.offset_by": [[359, "polars-expr-dt-offset-by"]], "polars.Expr.ge": [[392, "polars-expr-ge"]], "polars.Expr.gt": [[393, "polars-expr-gt"]], "polars.Expr.dt.with_time_unit": [[373, "polars-expr-dt-with-time-unit"]], "polars.Expr.filter": [[386, "polars-expr-filter"]], "polars.Expr.dt.replace_time_zone": [[362, "polars-expr-dt-replace-time-zone"]], "polars.Expr.ewm_std": [[378, "polars-expr-ewm-std"]], "polars.Expr.dt.month_start": [[356, "polars-expr-dt-month-start"]], "polars.Expr.dt.year": [[374, "polars-expr-dt-year"]], "polars.Expr.floor": [[389, "polars-expr-floor"]], "polars.Expr.le": [[414, "polars-expr-le"]], "polars.Expr.dt.nanosecond": [[357, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.month_end": [[355, "polars-expr-dt-month-end"]], "polars.Expr.forward_fill": [[391, "polars-expr-forward-fill"]], "polars.Expr.dt.month": [[354, "polars-expr-dt-month"]], "polars.Expr.inspect": [[397, "polars-expr-inspect"]], "polars.Expr.dt.quarter": [[361, "polars-expr-dt-quarter"]], "polars.Expr.eq": [[376, "polars-expr-eq"]], "polars.Expr.dt.round": [[363, "polars-expr-dt-round"]], "polars.Expr.is_infinite": [[404, "polars-expr-is-infinite"]], "polars.LazyFrame.dtypes": [[618, "polars-lazyframe-dtypes"]], "polars.median": [[572, "polars-median"]], "polars.select": [[581, "polars-select"]], "polars.pearson_corr": [[575, "polars-pearson-corr"]], "polars.rolling_corr": [[579, "polars-rolling-corr"]], "polars.LazyFrame.explode": [[620, "polars-lazyframe-explode"]], "polars.first": [[561, "polars-first"]], "polars.time": [[587, "polars-time"]], "Window": [[605, "window"]], "Meta": [[598, "meta"]], "polars.LazyFrame.clear": [[612, "polars-lazyframe-clear"]], "polars.fold": [[562, "polars-fold"]], "polars.std": [[583, "polars-std"]], "polars.LazyFrame.drop": [[616, "polars-lazyframe-drop"]], "polars.max": [[570, "polars-max"]], "polars.mean": [[571, "polars-mean"]], "polars.var": [[588, "polars-var"]], "polars.rolling_cov": [[580, "polars-rolling-cov"]], "polars.LazyFrame.columns": [[615, "polars-lazyframe-columns"]], "polars.from_epoch": [[564, "polars-from-epoch"]], "polars.groups": [[565, "polars-groups"]], "polars.tail": [[586, "polars-tail"]], "polars.head": [[566, "polars-head"]], "polars.when": [[589, "polars-when"]], "polars.exclude": [[560, "polars-exclude"]], "polars.LazyFrame.fill_nan": [[622, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.filter": [[624, "polars-lazyframe-filter"]], "Expressions": [[596, "expressions"]], "API reference": [[607, "api-reference"]], "polars.LazyFrame.clone": [[613, "polars-lazyframe-clone"]], "Operators": [[601, "operators"]], "Conjunction": [[601, "conjunction"]], "Comparison": [[601, "comparison"]], "Numeric": [[601, "numeric"], [259, "numeric"]], "polars.list": [[567, "polars-list"]], "polars.LazyFrame.first": [[625, "polars-lazyframe-first"]], "polars.lit": [[568, "polars-lit"]], "polars.LazyFrame.cache": [[611, "polars-lazyframe-cache"]], "polars.LazyFrame.groupby_dynamic": [[628, "polars-lazyframe-groupby-dynamic"]], "Columns / names": [[593, "columns-names"]], "Functions": [[606, "functions"], [595, "functions"]], "Conversion": [[606, "conversion"]], "Eager/Lazy functions": [[606, "eager-lazy-functions"]], "Parallelization": [[606, "parallelization"]], "StringCache": [[606, "stringcache"]], "polars.struct": [[584, "polars-struct"]], "polars.format": [[563, "polars-format"]], "polars.reduce": [[577, "polars-reduce"]], "polars.LazyFrame.from_json": [[626, "polars-lazyframe-from-json"]], "Input/output": [[608, "input-output"]], "CSV": [[608, "csv"]], "Feather/ IPC": [[608, "feather-ipc"]], "Parquet": [[608, "parquet"]], "Database": [[608, "database"]], "JSON": [[608, "json"]], "AVRO": [[608, "avro"]], "Excel": [[608, "excel"]], "Delta Lake": [[608, "delta-lake"]], "Datasets": [[608, "datasets"]], "BatchedCsvReader": [[608, "batchedcsvreader"]], "polars.sum": [[585, "polars-sum"]], "polars.LazyFrame.collect": [[614, "polars-lazyframe-collect"]], "polars.LazyFrame.fill_null": [[623, "polars-lazyframe-fill-null"]], "polars.map": [[569, "polars-map"]], "polars.LazyFrame.groupby_rolling": [[629, "polars-lazyframe-groupby-rolling"]], "polars.quantile": [[576, "polars-quantile"]], "polars.repeat": [[578, "polars-repeat"]], "polars.LazyFrame.bottom_k": [[610, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.explain": [[619, "polars-lazyframe-explain"]], "polars.LazyFrame.fetch": [[621, "polars-lazyframe-fetch"]], "polars.spearman_rank_corr": [[582, "polars-spearman-rank-corr"]], "polars.LazyFrame.groupby": [[627, "polars-lazyframe-groupby"]], "polars.min": [[573, "polars-min"]], "polars.n_unique": [[574, "polars-n-unique"]], "polars.LazyFrame.drop_nulls": [[617, "polars-lazyframe-drop-nulls"]], "polars.Expr.cumulative_eval": [[331, "polars-expr-cumulative-eval"]], "polars.Expr.arr.min": [[299, "polars-expr-arr-min"]], "polars.Expr.dot": [[333, "polars-expr-dot"]], "polars.Expr.arr.sort": [[303, "polars-expr-arr-sort"]], "polars.Expr.dt.hours": [[345, "polars-expr-dt-hours"]], "polars.Expr.clip_max": [[321, "polars-expr-clip-max"]], "polars.Expr.arr.to_struct": [[307, "polars-expr-arr-to-struct"]], "polars.Expr.arr.slice": [[302, "polars-expr-arr-slice"]], "polars.Expr.clip": [[320, "polars-expr-clip"]], "polars.Expr.arr.count_match": [[287, "polars-expr-arr-count-match"]], "polars.Expr.cos": [[323, "polars-expr-cos"]], "polars.Expr.drop_nans": [[334, "polars-expr-drop-nans"]], "polars.Expr.cache": [[316, "polars-expr-cache"]], "polars.Expr.cat.set_ordering": [[318, "polars-expr-cat-set-ordering"]], "polars.Expr.dt.cast_time_unit": [[336, "polars-expr-dt-cast-time-unit"]], "polars.Expr.arr.shift": [[301, "polars-expr-arr-shift"]], "polars.Expr.arr.arg_max": [[283, "polars-expr-arr-arg-max"]], "polars.Expr.arr.sum": [[304, "polars-expr-arr-sum"]], "polars.Expr.dt.microseconds": [[349, "polars-expr-dt-microseconds"]], "polars.Expr.cumsum": [[330, "polars-expr-cumsum"]], "polars.Expr.backward_fill": [[309, "polars-expr-backward-fill"]], "polars.Expr.arr.lengths": [[296, "polars-expr-arr-lengths"]], "polars.Expr.arg_sort": [[280, "polars-expr-arg-sort"]], "polars.Expr.arr.get": [[292, "polars-expr-arr-get"]], "polars.Expr.arr.take": [[306, "polars-expr-arr-take"]], "polars.Expr.dt.convert_time_zone": [[338, "polars-expr-dt-convert-time-zone"]], "polars.Expr.arr.contains": [[286, "polars-expr-arr-contains"]], "polars.Expr.diff": [[332, "polars-expr-diff"]], "polars.Expr.arr.head": [[293, "polars-expr-arr-head"]], "polars.Expr.cosh": [[324, "polars-expr-cosh"]], "polars.Expr.dt.date": [[339, "polars-expr-dt-date"]], "polars.Expr.arg_unique": [[282, "polars-expr-arg-unique"]], "polars.Expr.bin.decode": [[311, "polars-expr-bin-decode"]], "polars.Expr.bottom_k": [[315, "polars-expr-bottom-k"]], "polars.Expr.dt.is_leap_year": [[346, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.microsecond": [[348, "polars-expr-dt-microsecond"]], "polars.Expr.arr.eval": [[289, "polars-expr-arr-eval"]], "polars.Expr.cummax": [[327, "polars-expr-cummax"]], "polars.Expr.arg_true": [[281, "polars-expr-arg-true"]], "polars.Expr.arr.tail": [[305, "polars-expr-arr-tail"]], "polars.Expr.count": [[325, "polars-expr-count"]], "polars.Expr.arr.explode": [[290, "polars-expr-arr-explode"]], "polars.Expr.cast": [[317, "polars-expr-cast"]], "polars.Expr.bin.starts_with": [[314, "polars-expr-bin-starts-with"]], "polars.Expr.cumcount": [[326, "polars-expr-cumcount"]], "polars.Expr.bin.ends_with": [[313, "polars-expr-bin-ends-with"]], "polars.Expr.arr.join": [[294, "polars-expr-arr-join"]], "polars.Expr.dt.combine": [[337, "polars-expr-dt-combine"]], "polars.Expr.arr.first": [[291, "polars-expr-arr-first"]], "polars.Expr.arr.max": [[297, "polars-expr-arr-max"]], "polars.Expr.drop_nulls": [[335, "polars-expr-drop-nulls"]], "polars.Expr.dt.days": [[342, "polars-expr-dt-days"]], "polars.Expr.cummin": [[328, "polars-expr-cummin"]], "polars.Expr.dt.datetime": [[340, "polars-expr-dt-datetime"]], "polars.Expr.arr.reverse": [[300, "polars-expr-arr-reverse"]], "polars.Expr.bin.encode": [[312, "polars-expr-bin-encode"]], "polars.Expr.clip_min": [[322, "polars-expr-clip-min"]], "polars.Expr.dt.day": [[341, "polars-expr-dt-day"]], "polars.Expr.arr.arg_min": [[284, "polars-expr-arr-arg-min"]], "polars.Expr.arr.diff": [[288, "polars-expr-arr-diff"]], "polars.Expr.ceil": [[319, "polars-expr-ceil"]], "polars.Expr.cumprod": [[329, "polars-expr-cumprod"]], "polars.Expr.dt.iso_year": [[347, "polars-expr-dt-iso-year"]], "polars.Expr.arr.last": [[295, "polars-expr-arr-last"]], "polars.Expr.dt.hour": [[344, "polars-expr-dt-hour"]], "polars.Expr.arr.mean": [[298, "polars-expr-arr-mean"]], "polars.Expr.arr.unique": [[308, "polars-expr-arr-unique"]], "polars.Expr.arr.concat": [[285, "polars-expr-arr-concat"]], "polars.Expr.dt.epoch": [[343, "polars-expr-dt-epoch"]], "polars.Expr.bin.contains": [[310, "polars-expr-bin-contains"]], "polars.DataFrame.shrink_to_fit": [[207, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.pipe": [[189, "polars-dataframe-pipe"]], "polars.DataFrame.shift_and_fill": [[206, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.columns": [[141, "polars-dataframe-columns"]], "polars.DataFrame.n_unique": [[186, "polars-dataframe-n-unique"]], "polars.DataFrame.glimpse": [[159, "polars-dataframe-glimpse"]], "polars.DataFrame.set_sorted": [[203, "polars-dataframe-set-sorted"]], "polars.DataFrame.dtypes": [[147, "polars-dataframe-dtypes"]], "polars.DataFrame.filter": [[153, "polars-dataframe-filter"]], "polars.DataFrame.groupby_rolling": [[162, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.is_unique": [[171, "polars-dataframe-is-unique"]], "polars.DataFrame.iter_rows": [[173, "polars-dataframe-iter-rows"]], "polars.DataFrame.pivot": [[190, "polars-dataframe-pivot"]], "polars.DataFrame.clone": [[140, "polars-dataframe-clone"]], "polars.DataFrame.item": [[172, "polars-dataframe-item"]], "polars.DataFrame.is_empty": [[170, "polars-dataframe-is-empty"]], "polars.DataFrame.is_duplicated": [[169, "polars-dataframe-is-duplicated"]], "polars.DataFrame.product": [[191, "polars-dataframe-product"]], "polars.DataFrame.frame_equal": [[156, "polars-dataframe-frame-equal"]], "polars.DataFrame.groupby_dynamic": [[161, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.height": [[165, "polars-dataframe-height"]], "polars.DataFrame.find_idx_by_name": [[154, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.schema": [[201, "polars-dataframe-schema"]], "polars.DataFrame.slice": [[208, "polars-dataframe-slice"]], "polars.DataFrame.get_column": [[157, "polars-dataframe-get-column"]], "polars.DataFrame.n_chunks": [[185, "polars-dataframe-n-chunks"]], "polars.DataFrame.explode": [[149, "polars-dataframe-explode"]], "polars.DataFrame.merge_sorted": [[183, "polars-dataframe-merge-sorted"]], "polars.DataFrame.replace": [[195, "polars-dataframe-replace"]], "polars.DataFrame.drop_in_place": [[145, "polars-dataframe-drop-in-place"]], "polars.DataFrame.rechunk": [[193, "polars-dataframe-rechunk"]], "polars.DataFrame.insert_at_idx": [[167, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.quantile": [[192, "polars-dataframe-quantile"]], "polars.DataFrame.describe": [[143, "polars-dataframe-describe"]], "polars.DataFrame.shape": [[204, "polars-dataframe-shape"]], "polars.DataFrame.rows": [[199, "polars-dataframe-rows"]], "polars.DataFrame.null_count": [[187, "polars-dataframe-null-count"]], "polars.DataFrame.hstack": [[166, "polars-dataframe-hstack"]], "polars.DataFrame.join": [[175, "polars-dataframe-join"]], "polars.DataFrame.iter_slices": [[174, "polars-dataframe-iter-slices"]], "polars.DataFrame.join_asof": [[176, "polars-dataframe-join-asof"]], "polars.DataFrame.lazy": [[177, "polars-dataframe-lazy"]], "polars.DataFrame.melt": [[182, "polars-dataframe-melt"]], "polars.DataFrame.drop": [[144, "polars-dataframe-drop"]], "polars.DataFrame.min": [[184, "polars-dataframe-min"]], "polars.DataFrame.rename": [[194, "polars-dataframe-rename"]], "polars.DataFrame.mean": [[180, "polars-dataframe-mean"]], "polars.DataFrame.replace_at_idx": [[196, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.reverse": [[197, "polars-dataframe-reverse"]], "polars.DataFrame.shift": [[205, "polars-dataframe-shift"]], "polars.DataFrame.drop_nulls": [[146, "polars-dataframe-drop-nulls"]], "polars.DataFrame.fold": [[155, "polars-dataframe-fold"]], "polars.DataFrame.max": [[179, "polars-dataframe-max"]], "polars.DataFrame.select": [[202, "polars-dataframe-select"]], "polars.DataFrame.get_columns": [[158, "polars-dataframe-get-columns"]], "polars.DataFrame.median": [[181, "polars-dataframe-median"]], "polars.DataFrame.limit": [[178, "polars-dataframe-limit"]], "polars.DataFrame.sample": [[200, "polars-dataframe-sample"]], "polars.DataFrame.sort": [[209, "polars-dataframe-sort"]], "polars.DataFrame.corr": [[142, "polars-dataframe-corr"]], "polars.DataFrame.head": [[164, "polars-dataframe-head"]], "polars.DataFrame.interpolate": [[168, "polars-dataframe-interpolate"]], "polars.DataFrame.extend": [[150, "polars-dataframe-extend"]], "polars.DataFrame.fill_nan": [[151, "polars-dataframe-fill-nan"]], "polars.DataFrame.fill_null": [[152, "polars-dataframe-fill-null"]], "polars.DataFrame.estimated_size": [[148, "polars-dataframe-estimated-size"]], "polars.DataFrame.row": [[198, "polars-dataframe-row"]], "polars.DataFrame.hash_rows": [[163, "polars-dataframe-hash-rows"]], "polars.DataFrame.partition_by": [[188, "polars-dataframe-partition-by"]], "polars.DataFrame.groupby": [[160, "polars-dataframe-groupby"]], "DataFrame": [[256, "dataframe"]], "polars.Expr.add": [[263, "polars-expr-add"]], "polars.DataFrame.top_k": [[223, "polars-dataframe-top-k"]], "polars.DataFrame.with_row_count": [[234, "polars-dataframe-with-row-count"]], "polars.DataFrame.vstack": [[231, "polars-dataframe-vstack"]], "polars.DataFrame.tail": [[212, "polars-dataframe-tail"]], "polars.dataframe.groupby.GroupBy.tail": [[250, "polars-dataframe-groupby-groupby-tail"]], "polars.Expr.arg_min": [[279, "polars-expr-arg-min"]], "polars.Expr.and_": [[267, "polars-expr-and"]], "polars.dataframe.groupby.GroupBy.__iter__": [[235, "polars-dataframe-groupby-groupby-iter"]], "polars.Expr.approx_unique": [[271, "polars-expr-approx-unique"]], "polars.DataFrame.sum": [[211, "polars-dataframe-sum"]], "polars.dataframe.groupby.GroupBy.min": [[246, "polars-dataframe-groupby-groupby-min"]], "polars.dataframe.groupby.GroupBy.quantile": [[248, "polars-dataframe-groupby-groupby-quantile"]], "polars.dataframe.groupby.GroupBy.mean": [[244, "polars-dataframe-groupby-groupby-mean"]], "Exceptions": [[260, "exceptions"]], "polars.Expr.all": [[266, "polars-expr-all"]], "polars.Expr.arg_max": [[278, "polars-expr-arg-max"]], "polars.dataframe.groupby.GroupBy.n_unique": [[247, "polars-dataframe-groupby-groupby-n-unique"]], "polars.dataframe.groupby.GroupBy.last": [[242, "polars-dataframe-groupby-groupby-last"]], "polars.Expr.arctanh": [[277, "polars-expr-arctanh"]], "polars.DataFrame.width": [[232, "polars-dataframe-width"]], "Data types": [[259, "data-types"]], "Nested": [[259, "nested"]], "Other": [[259, "other"]], "polars.Expr.apply": [[270, "polars-expr-apply"]], "polars.Expr.arccosh": [[273, "polars-expr-arccosh"]], "polars.Expr.arctan": [[276, "polars-expr-arctan"]], "polars.DataFrame.transpose": [[224, "polars-dataframe-transpose"]], "polars.DataFrame.var": [[230, "polars-dataframe-var"]], "polars.DataFrame.to_series": [[221, "polars-dataframe-to-series"]], "polars.Expr.arcsinh": [[275, "polars-expr-arcsinh"]], "polars.Expr.arcsin": [[274, "polars-expr-arcsin"]], "polars.Expr.arccos": [[272, "polars-expr-arccos"]], "polars.dataframe.groupby.GroupBy.max": [[243, "polars-dataframe-groupby-groupby-max"]], "polars.DataFrame.unique": [[225, "polars-dataframe-unique"]], "polars.DataFrame.take_every": [[213, "polars-dataframe-take-every"]], "polars.dataframe.groupby.GroupBy.all": [[237, "polars-dataframe-groupby-groupby-all"]], "polars.DataFrame.to_pandas": [[220, "polars-dataframe-to-pandas"]], "polars.DataFrame.to_dicts": [[216, "polars-dataframe-to-dicts"]], "polars.DataFrame.upsample": [[229, "polars-dataframe-upsample"]], "polars.Expr.abs": [[262, "polars-expr-abs"]], "polars.DataFrame.to_init_repr": [[218, "polars-dataframe-to-init-repr"]], "polars.Expr.any": [[268, "polars-expr-any"]], "polars.DataFrame.with_columns": [[233, "polars-dataframe-with-columns"]], "polars.DataFrame.std": [[210, "polars-dataframe-std"]], "polars.DataFrame.unstack": [[227, "polars-dataframe-unstack"]], "polars.DataFrame.to_struct": [[222, "polars-dataframe-to-struct"]], "polars.dataframe.groupby.GroupBy.count": [[239, "polars-dataframe-groupby-groupby-count"]], "polars.dataframe.groupby.GroupBy.agg": [[236, "polars-dataframe-groupby-groupby-agg"]], "polars.DataFrame.to_arrow": [[214, "polars-dataframe-to-arrow"]], "polars.dataframe.groupby.GroupBy.head": [[241, "polars-dataframe-groupby-groupby-head"]], "polars.dataframe.groupby.GroupBy.median": [[245, "polars-dataframe-groupby-groupby-median"]], "polars.Expr.alias": [[265, "polars-expr-alias"]], "polars.Expr.append": [[269, "polars-expr-append"]], "polars.dataframe.groupby.GroupBy.apply": [[238, "polars-dataframe-groupby-groupby-apply"]], "polars.DataFrame.to_dict": [[215, "polars-dataframe-to-dict"]], "polars.DataFrame.to_dummies": [[217, "polars-dataframe-to-dummies"]], "polars.dataframe.groupby.GroupBy.first": [[240, "polars-dataframe-groupby-groupby-first"]], "polars.dataframe.groupby.GroupBy.sum": [[249, "polars-dataframe-groupby-groupby-sum"]], "polars.DataFrame.update": [[228, "polars-dataframe-update"]], "polars.DataFrame.to_numpy": [[219, "polars-dataframe-to-numpy"]], "polars.Expr.agg_groups": [[264, "polars-expr-agg-groups"]], "polars.DataFrame.unnest": [[226, "polars-dataframe-unnest"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[8, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[9, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[10, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[13, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[14, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[15, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[16, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[17, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[18, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[23, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[24, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[25, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[26, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[27, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[28, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[29, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[30, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[31, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[32, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[33, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[34, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[35, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[36, "polars.DataType"]], "__init__() (polars.datatype method)": [[36, "polars.DataType.__init__"]], "date (class in polars)": [[37, "polars.Date"]], "__init__() (polars.date method)": [[37, "polars.Date.__init__"]], "datetime (class in polars)": [[38, "polars.Datetime"]], "__init__() (polars.datetime method)": [[38, "polars.Datetime.__init__"]], "decimal (class in polars)": [[39, "polars.Decimal"]], "__init__() (polars.decimal method)": [[39, "polars.Decimal.__init__"]], "duration (class in polars)": [[40, "polars.Duration"]], "__init__() (polars.duration method)": [[40, "polars.Duration.__init__"]], "float32 (class in polars)": [[41, "polars.Float32"]], "__init__() (polars.float32 method)": [[41, "polars.Float32.__init__"]], "float64 (class in polars)": [[42, "polars.Float64"]], "__init__() (polars.float64 method)": [[42, "polars.Float64.__init__"]], "int16 (class in polars)": [[43, "polars.Int16"]], "__init__() (polars.int16 method)": [[43, "polars.Int16.__init__"]], "int32 (class in polars)": [[44, "polars.Int32"]], "__init__() (polars.int32 method)": [[44, "polars.Int32.__init__"]], "int64 (class in polars)": [[45, "polars.Int64"]], "__init__() (polars.int64 method)": [[45, "polars.Int64.__init__"]], "int8 (class in polars)": [[46, "polars.Int8"]], "__init__() (polars.int8 method)": [[46, "polars.Int8.__init__"]], "list (class in polars)": [[47, "polars.List"]], "__init__() (polars.list method)": [[47, "polars.List.__init__"]], "null (class in polars)": [[48, "polars.Null"]], "__init__() (polars.null method)": [[48, "polars.Null.__init__"]], "object (class in polars)": [[49, "polars.Object"]], "__init__() (polars.object method)": [[49, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[50, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[51, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[52, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[53, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[54, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[55, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[56, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[56, "polars.StringCache.__init__"]], "struct (class in polars)": [[57, "polars.Struct"]], "__init__() (polars.struct method)": [[57, "polars.Struct.__init__"]], "time (class in polars)": [[58, "polars.Time"]], "__init__() (polars.time method)": [[58, "polars.Time.__init__"]], "uint16 (class in polars)": [[59, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[59, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[60, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[60, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[61, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[61, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[62, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[62, "polars.UInt8.__init__"]], "unknown (class in polars)": [[63, "polars.Unknown"]], "__init__() (polars.unknown method)": [[63, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[64, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[64, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[65, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[66, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[67, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[68, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[69, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[70, "polars.arg_where"]], "build_info() (in module polars)": [[71, "polars.build_info"]], "collect_all() (in module polars)": [[72, "polars.collect_all"]], "concat() (in module polars)": [[73, "polars.concat"]], "cut() (in module polars)": [[74, "polars.cut"]], "date_range() (in module polars)": [[75, "polars.date_range"]], "enable_string_cache() (in module polars)": [[76, "polars.enable_string_cache"]], "arrowerror": [[77, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[78, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[79, "polars.exceptions.ComputeError"]], "duplicateerror": [[80, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[81, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[82, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[83, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[84, "polars.exceptions.PolarsPanicError"]], "rowserror": [[85, "polars.exceptions.RowsError"]], "schemaerror": [[86, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[87, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[88, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[89, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[90, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[91, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[92, "polars.from_dataframe"]], "from_dict() (in module polars)": [[93, "polars.from_dict"]], "from_dicts() (in module polars)": [[94, "polars.from_dicts"]], "from_numpy() (in module polars)": [[95, "polars.from_numpy"]], "from_pandas() (in module polars)": [[96, "polars.from_pandas"]], "from_records() (in module polars)": [[97, "polars.from_records"]], "from_repr() (in module polars)": [[98, "polars.from_repr"]], "get_dummies() (in module polars)": [[99, "polars.get_dummies"]], "get_index_type() (in module polars)": [[100, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[101, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[102, "polars.ones"]], "read_avro() (in module polars)": [[103, "polars.read_avro"]], "read_csv() (in module polars)": [[104, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[105, "polars.read_csv_batched"]], "read_database() (in module polars)": [[106, "polars.read_database"]], "read_delta() (in module polars)": [[107, "polars.read_delta"]], "read_excel() (in module polars)": [[108, "polars.read_excel"]], "read_ipc() (in module polars)": [[109, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[110, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[111, "polars.read_json"]], "read_ndjson() (in module polars)": [[112, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[113, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[114, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[115, "polars.scan_csv"]], "scan_delta() (in module polars)": [[116, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[117, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[118, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[119, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[120, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[121, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[122, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[123, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[124, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[124, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[125, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[126, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[127, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[128, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[129, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[130, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[131, "polars.threadpool_size"]], "time_range() (in module polars)": [[132, "polars.time_range"]], "zeros() (in module polars)": [[133, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[136, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[137, "polars.DataFrame.apply"]], "bottom_k() (polars.dataframe method)": [[138, "polars.DataFrame.bottom_k"]], "clear() (polars.dataframe method)": [[139, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[140, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[141, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[142, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[143, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[144, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[145, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[146, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[147, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[148, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[149, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[150, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[151, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[152, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[153, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[154, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[155, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[156, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[157, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[158, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[159, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[160, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[161, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[162, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[163, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[164, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[165, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[166, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[167, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[168, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[169, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[170, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[171, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[172, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[173, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[174, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[175, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[176, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[177, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[178, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[179, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[180, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[181, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[182, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[183, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[184, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[185, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[186, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[187, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[188, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[189, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[190, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[191, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[192, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[193, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[194, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[195, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[196, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[197, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[198, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[199, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[200, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[201, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[202, "polars.DataFrame.select"]], "set_sorted() (polars.dataframe method)": [[203, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[204, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[205, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[206, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[207, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[208, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[209, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[210, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[211, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[212, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[213, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[214, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[215, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[216, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[217, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[218, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[219, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[220, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[221, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[222, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[223, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[224, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[225, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[226, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[227, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[228, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[229, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[230, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[231, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[232, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[233, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[234, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[238, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[239, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[240, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[241, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[242, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[243, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[244, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[245, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[246, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[247, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[248, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[249, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[250, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[262, "polars.Expr.abs"]], "add() (polars.expr method)": [[263, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[264, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[265, "polars.Expr.alias"]], "all() (polars.expr method)": [[266, "polars.Expr.all"]], "and_() (polars.expr method)": [[267, "polars.Expr.and_"]], "any() (polars.expr method)": [[268, "polars.Expr.any"]], "append() (polars.expr method)": [[269, "polars.Expr.append"]], "apply() (polars.expr method)": [[270, "polars.Expr.apply"]], "approx_unique() (polars.expr method)": [[271, "polars.Expr.approx_unique"]], "arccos() (polars.expr method)": [[272, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[273, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[274, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[275, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[276, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[277, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[278, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[279, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[280, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[281, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[282, "polars.Expr.arg_unique"]], "arg_max() (polars.expr.arr method)": [[283, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[284, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[285, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[286, "polars.Expr.arr.contains"]], "count_match() (polars.expr.arr method)": [[287, "polars.Expr.arr.count_match"]], "diff() (polars.expr.arr method)": [[288, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[289, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[290, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[291, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[292, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[293, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[294, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[295, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[296, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[297, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[298, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[299, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[300, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[301, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[302, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[303, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[304, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[305, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[306, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[307, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[308, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[309, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[310, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[311, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[312, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[313, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[314, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[315, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[316, "polars.Expr.cache"]], "cast() (polars.expr method)": [[317, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[318, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[319, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[320, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[321, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[322, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[323, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[324, "polars.Expr.cosh"]], "count() (polars.expr method)": [[325, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[326, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[327, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[328, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[329, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[330, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[331, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[332, "polars.Expr.diff"]], "dot() (polars.expr method)": [[333, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[334, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[335, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[336, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[337, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[338, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[339, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[340, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[341, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[342, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[343, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[344, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[345, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[346, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[347, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[348, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[349, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[350, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[351, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[352, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[353, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[354, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[355, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[356, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[357, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[358, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[359, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[360, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[361, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[362, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[363, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[364, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[365, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[366, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[367, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[368, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[369, "polars.Expr.dt.to_string"]], "truncate() (polars.expr.dt method)": [[370, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[371, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[372, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[373, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[374, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[375, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[376, "polars.Expr.eq"]], "ewm_mean() (polars.expr method)": [[377, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[378, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[379, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[380, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[381, "polars.Expr.exp"]], "explode() (polars.expr method)": [[382, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[383, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[384, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[385, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[386, "polars.Expr.filter"]], "first() (polars.expr method)": [[387, "polars.Expr.first"]], "flatten() (polars.expr method)": [[388, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[389, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[390, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[391, "polars.Expr.forward_fill"]], "ge() (polars.expr method)": [[392, "polars.Expr.ge"]], "gt() (polars.expr method)": [[393, "polars.Expr.gt"]], "hash() (polars.expr method)": [[394, "polars.Expr.hash"]], "head() (polars.expr method)": [[395, "polars.Expr.head"]], "implode() (polars.expr method)": [[396, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[397, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[398, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[399, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[400, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[401, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[402, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[403, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[404, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[405, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[406, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[407, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[408, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[409, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[410, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[411, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[412, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[413, "polars.Expr.last"]], "le() (polars.expr method)": [[414, "polars.Expr.le"]], "len() (polars.expr method)": [[415, "polars.Expr.len"]], "limit() (polars.expr method)": [[416, "polars.Expr.limit"]], "log() (polars.expr method)": [[417, "polars.Expr.log"]], "log10() (polars.expr method)": [[418, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[419, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[420, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[421, "polars.Expr.lt"]], "map() (polars.expr method)": [[422, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[423, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[424, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[425, "polars.Expr.max"]], "mean() (polars.expr method)": [[426, "polars.Expr.mean"]], "median() (polars.expr method)": [[427, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[428, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[429, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[430, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[431, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[432, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[433, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[434, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[435, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[436, "polars.Expr.min"]], "mod() (polars.expr method)": [[437, "polars.Expr.mod"]], "mode() (polars.expr method)": [[438, "polars.Expr.mode"]], "mul() (polars.expr method)": [[439, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[440, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[441, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[442, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[443, "polars.Expr.ne"]], "null_count() (polars.expr method)": [[444, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[445, "polars.Expr.or_"]], "over() (polars.expr method)": [[446, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[447, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[448, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[449, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[450, "polars.Expr.prefix"]], "product() (polars.expr method)": [[451, "polars.Expr.product"]], "quantile() (polars.expr method)": [[452, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[453, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[454, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[455, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[456, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[457, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[458, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[459, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[460, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[461, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[462, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[463, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[464, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[465, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[466, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[467, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[468, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[469, "polars.Expr.round"]], "sample() (polars.expr method)": [[470, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[471, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[472, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[473, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[474, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[475, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[476, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[477, "polars.Expr.sign"]], "sin() (polars.expr method)": [[478, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[479, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[480, "polars.Expr.skew"]], "slice() (polars.expr method)": [[481, "polars.Expr.slice"]], "sort() (polars.expr method)": [[482, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[483, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[484, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[485, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[486, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[487, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[488, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[489, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[490, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[491, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[492, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[493, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[494, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[495, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[496, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[497, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[498, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[499, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[500, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[501, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[502, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[503, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[504, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[505, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[506, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[507, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[508, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[509, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[510, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[511, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[512, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[513, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[514, "polars.Expr.str.to_datetime"]], "to_lowercase() (polars.expr.str method)": [[515, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[516, "polars.Expr.str.to_time"]], "to_uppercase() (polars.expr.str method)": [[517, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[518, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[519, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[520, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[521, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[522, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[523, "polars.Expr.sum"]], "tail() (polars.expr method)": [[524, "polars.Expr.tail"]], "take() (polars.expr method)": [[525, "polars.Expr.take"]], "take_every() (polars.expr method)": [[526, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[527, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[528, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[529, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[530, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[531, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[532, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[533, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[534, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[535, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[536, "polars.Expr.var"]], "where() (polars.expr method)": [[537, "polars.Expr.where"]], "xor() (polars.expr method)": [[538, "polars.Expr.xor"]], "all() (in module polars)": [[539, "polars.all"]], "any() (in module polars)": [[540, "polars.any"]], "apply() (in module polars)": [[541, "polars.apply"]], "approx_unique() (in module polars)": [[542, "polars.approx_unique"]], "arange() (in module polars)": [[543, "polars.arange"]], "arg_sort_by() (in module polars)": [[544, "polars.arg_sort_by"]], "avg() (in module polars)": [[545, "polars.avg"]], "coalesce() (in module polars)": [[546, "polars.coalesce"]], "col() (in module polars)": [[547, "polars.col"]], "concat_list() (in module polars)": [[548, "polars.concat_list"]], "concat_str() (in module polars)": [[549, "polars.concat_str"]], "corr() (in module polars)": [[550, "polars.corr"]], "count() (in module polars)": [[551, "polars.count"]], "cov() (in module polars)": [[552, "polars.cov"]], "cumfold() (in module polars)": [[553, "polars.cumfold"]], "cumreduce() (in module polars)": [[554, "polars.cumreduce"]], "cumsum() (in module polars)": [[555, "polars.cumsum"]], "date() (in module polars)": [[556, "polars.date"]], "datetime() (in module polars)": [[557, "polars.datetime"]], "duration() (in module polars)": [[558, "polars.duration"]], "element() (in module polars)": [[559, "polars.element"]], "exclude() (in module polars)": [[560, "polars.exclude"]], "first() (in module polars)": [[561, "polars.first"]], "fold() (in module polars)": [[562, "polars.fold"]], "format() (in module polars)": [[563, "polars.format"]], "from_epoch() (in module polars)": [[564, "polars.from_epoch"]], "groups() (in module polars)": [[565, "polars.groups"]], "head() (in module polars)": [[566, "polars.head"]], "list() (in module polars)": [[567, "polars.list"]], "lit() (in module polars)": [[568, "polars.lit"]], "map() (in module polars)": [[569, "polars.map"]], "max() (in module polars)": [[570, "polars.max"]], "mean() (in module polars)": [[571, "polars.mean"]], "median() (in module polars)": [[572, "polars.median"]], "min() (in module polars)": [[573, "polars.min"]], "n_unique() (in module polars)": [[574, "polars.n_unique"]], "pearson_corr() (in module polars)": [[575, "polars.pearson_corr"]], "quantile() (in module polars)": [[576, "polars.quantile"]], "reduce() (in module polars)": [[577, "polars.reduce"]], "repeat() (in module polars)": [[578, "polars.repeat"]], "rolling_corr() (in module polars)": [[579, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[580, "polars.rolling_cov"]], "select() (in module polars)": [[581, "polars.select"]], "spearman_rank_corr() (in module polars)": [[582, "polars.spearman_rank_corr"]], "std() (in module polars)": [[583, "polars.std"]], "struct() (in module polars)": [[584, "polars.struct"]], "sum() (in module polars)": [[585, "polars.sum"]], "tail() (in module polars)": [[586, "polars.tail"]], "time() (in module polars)": [[587, "polars.time"]], "var() (in module polars)": [[588, "polars.var"]], "when() (in module polars)": [[589, "polars.when"]], "bottom_k() (polars.lazyframe method)": [[610, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[611, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[612, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[613, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[614, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[615, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[616, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[617, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[618, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[619, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[620, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[621, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[622, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[623, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[624, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[625, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[626, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[627, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[628, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[629, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[630, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[631, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[632, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[633, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[634, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[635, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[636, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[637, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[638, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[639, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[640, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[641, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[642, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[643, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[644, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[645, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[646, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[647, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[648, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[649, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[650, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[651, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[652, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[653, "polars.LazyFrame.select"]], "set_sorted() (polars.lazyframe method)": [[654, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[655, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[656, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[657, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[658, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[659, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[660, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[661, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[662, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[663, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[664, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[665, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[666, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[667, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[668, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[669, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[670, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[671, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[672, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[673, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[674, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[675, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[676, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[677, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[678, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[679, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[680, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[681, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[682, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[683, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[684, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[685, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[686, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[687, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[688, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[689, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[690, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[698, "polars.Series.abs"]], "alias() (polars.series method)": [[699, "polars.Series.alias"]], "all() (polars.series method)": [[700, "polars.Series.all"]], "any() (polars.series method)": [[701, "polars.Series.any"]], "append() (polars.series method)": [[702, "polars.Series.append"]], "apply() (polars.series method)": [[703, "polars.Series.apply"]], "arccos() (polars.series method)": [[704, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[705, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[706, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[707, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[708, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[709, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[710, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[711, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[712, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[713, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[714, "polars.Series.arg_unique"]], "arr (polars.series attribute)": [[715, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[716, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[717, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[718, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[719, "polars.Series.arr.contains"]], "count_match() (polars.series.arr method)": [[720, "polars.Series.arr.count_match"]], "diff() (polars.series.arr method)": [[721, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[722, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[723, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[724, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[725, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[726, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[727, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[728, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[729, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[730, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[731, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[732, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[733, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[734, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[735, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[736, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[737, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[738, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[739, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[740, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[741, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[742, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[743, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[744, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[745, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[746, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[747, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[748, "polars.Series.cast"]], "cat (polars.series attribute)": [[749, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[750, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[751, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[752, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[753, "polars.Series.clear"]], "clip() (polars.series method)": [[754, "polars.Series.clip"]], "clip_max() (polars.series method)": [[755, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[756, "polars.Series.clip_min"]], "clone() (polars.series method)": [[757, "polars.Series.clone"]], "cos() (polars.series method)": [[758, "polars.Series.cos"]], "cosh() (polars.series method)": [[759, "polars.Series.cosh"]], "cummax() (polars.series method)": [[760, "polars.Series.cummax"]], "cummin() (polars.series method)": [[761, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[762, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[763, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[764, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[765, "polars.Series.cut"]], "describe() (polars.series method)": [[766, "polars.Series.describe"]], "diff() (polars.series method)": [[767, "polars.Series.diff"]], "dot() (polars.series method)": [[768, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[769, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[770, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[771, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[772, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[773, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[774, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[775, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[776, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[777, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[778, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[779, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[780, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[781, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[782, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[783, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[784, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[785, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[786, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[787, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[788, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[789, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[790, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[791, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[792, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[793, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[794, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[795, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[796, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[797, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[798, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[799, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[800, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[801, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[802, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[803, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[804, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[805, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[806, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[807, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[808, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[809, "polars.Series.dt.to_string"]], "truncate() (polars.series.dt method)": [[810, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[811, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[812, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[813, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[814, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[815, "polars.Series.dtype"]], "entropy() (polars.series method)": [[816, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[817, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[818, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[819, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[820, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[821, "polars.Series.exp"]], "explode() (polars.series method)": [[822, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[823, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[824, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[825, "polars.Series.fill_null"]], "filter() (polars.series method)": [[826, "polars.Series.filter"]], "flags (polars.series attribute)": [[827, "polars.Series.flags"]], "floor() (polars.series method)": [[828, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[829, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[830, "polars.Series.has_validity"]], "hash() (polars.series method)": [[831, "polars.Series.hash"]], "head() (polars.series method)": [[832, "polars.Series.head"]], "hist() (polars.series method)": [[833, "polars.Series.hist"]], "implode() (polars.series method)": [[834, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[835, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[836, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[837, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[838, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[839, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[840, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[841, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[842, "polars.Series.is_first"]], "is_float() (polars.series method)": [[843, "polars.Series.is_float"]], "is_in() (polars.series method)": [[844, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[845, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[846, "polars.Series.is_integer"]], "is_nan() (polars.series method)": [[847, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[848, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[849, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[850, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[851, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[852, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[853, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[854, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[855, "polars.Series.is_utf8"]], "item() (polars.series method)": [[856, "polars.Series.item"]], "kurtosis() (polars.series method)": [[857, "polars.Series.kurtosis"]], "len() (polars.series method)": [[858, "polars.Series.len"]], "limit() (polars.series method)": [[859, "polars.Series.limit"]], "log() (polars.series method)": [[860, "polars.Series.log"]], "log10() (polars.series method)": [[861, "polars.Series.log10"]], "log1p() (polars.series method)": [[862, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[863, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[864, "polars.Series.map_dict"]], "max() (polars.series method)": [[865, "polars.Series.max"]], "mean() (polars.series method)": [[866, "polars.Series.mean"]], "median() (polars.series method)": [[867, "polars.Series.median"]], "min() (polars.series method)": [[868, "polars.Series.min"]], "mode() (polars.series method)": [[869, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[870, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[871, "polars.Series.n_unique"]], "name (polars.series attribute)": [[872, "polars.Series.name"]], "nan_max() (polars.series method)": [[873, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[874, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[875, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[876, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[877, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[878, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[879, "polars.Series.peak_min"]], "product() (polars.series method)": [[880, "polars.Series.product"]], "qcut() (polars.series method)": [[881, "polars.Series.qcut"]], "quantile() (polars.series method)": [[882, "polars.Series.quantile"]], "rank() (polars.series method)": [[883, "polars.Series.rank"]], "rechunk() (polars.series method)": [[884, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[885, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[886, "polars.Series.rename"]], "reshape() (polars.series method)": [[887, "polars.Series.reshape"]], "reverse() (polars.series method)": [[888, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[889, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[890, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[891, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[892, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[893, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[894, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[895, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[896, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[897, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[898, "polars.Series.rolling_var"]], "round() (polars.series method)": [[899, "polars.Series.round"]], "sample() (polars.series method)": [[900, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[901, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[902, "polars.Series.series_equal"]], "set() (polars.series method)": [[903, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[904, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[905, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[906, "polars.Series.shape"]], "shift() (polars.series method)": [[907, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[908, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[909, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[910, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[911, "polars.Series.shuffle"]], "sign() (polars.series method)": [[912, "polars.Series.sign"]], "sin() (polars.series method)": [[913, "polars.Series.sin"]], "sinh() (polars.series method)": [[914, "polars.Series.sinh"]], "skew() (polars.series method)": [[915, "polars.Series.skew"]], "slice() (polars.series method)": [[916, "polars.Series.slice"]], "sort() (polars.series method)": [[917, "polars.Series.sort"]], "sqrt() (polars.series method)": [[918, "polars.Series.sqrt"]], "std() (polars.series method)": [[919, "polars.Series.std"]], "str (polars.series attribute)": [[920, "polars.Series.str"]], "concat() (polars.series.str method)": [[921, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[922, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[923, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[924, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[925, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[926, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[927, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[928, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[929, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[930, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[931, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[932, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[933, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[934, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[935, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[936, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[937, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[938, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[939, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[940, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[941, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[942, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[943, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[944, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[945, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[946, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[947, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[948, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[949, "polars.Series.str.to_datetime"]], "to_lowercase() (polars.series.str method)": [[950, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[951, "polars.Series.str.to_time"]], "to_uppercase() (polars.series.str method)": [[952, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[953, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[954, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[955, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[956, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[957, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[958, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[959, "polars.Series.sum"]], "tail() (polars.series method)": [[960, "polars.Series.tail"]], "take() (polars.series method)": [[961, "polars.Series.take"]], "take_every() (polars.series method)": [[962, "polars.Series.take_every"]], "tan() (polars.series method)": [[963, "polars.Series.tan"]], "tanh() (polars.series method)": [[964, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[965, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[966, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[967, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[968, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[969, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[970, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[971, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[972, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[973, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[974, "polars.Series.top_k"]], "unique() (polars.series method)": [[975, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[976, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[977, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[978, "polars.Series.value_counts"]], "var() (polars.series method)": [[979, "polars.Series.var"]], "view() (polars.series method)": [[980, "polars.Series.view"]], "zip_with() (polars.series method)": [[981, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[996, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[996, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[996, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[996, "polars.SQLContext.__init__"]]}})